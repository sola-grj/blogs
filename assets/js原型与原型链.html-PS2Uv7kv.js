import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-DwEIf6KW.js";const e="/blogs/assets/images/web/js/1.png",o="/blogs/assets/images/web/js/2.png",p={},c=t(`<h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型"><span>原型</span></a></h2><p>JavaScript常被描述为一种基于原型的语言，每个对象拥有一个原型对象。当试图访问一个对象的属性时，不仅仅在对象上寻找，还会寻找该对象的原型，以及该对象原型的原型，依次层层向上搜索，知道找到一个名字匹配的属性或者到达原型链的末尾。</p><p>准确的说，这些属性和方法定义在Object的构造函数（constructor functions）之上的<code>prototype</code>属性上，而非实例对象本身</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> doSomething<span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 控制台输出</span>
<span class="token punctuation">{</span>
 <span class="token literal-property property">constructor</span><span class="token operator">:</span> ƒ <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">constructor</span><span class="token operator">:</span> ƒ <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">hasOwnProperty</span><span class="token operator">:</span> ƒ <span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">isPrototypeOf</span><span class="token operator">:</span> ƒ <span class="token function">isPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">propertyIsEnumerable</span><span class="token operator">:</span> ƒ <span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">toLocaleString</span><span class="token operator">:</span> ƒ <span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">toString</span><span class="token operator">:</span> ƒ <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">valueOf</span><span class="token operator">:</span> ƒ <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个对象就是原型对象。可以看到，原型对象有一个自有属性<code>constructor</code>，这个属性指向该函数，如下图所示</p><figure><img src="`+e+`" alt="constructor关系" tabindex="0" loading="lazy"><figcaption>constructor关系</figcaption></figure><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链"><span>原型链</span></a></h2><p>原型对象也可能有原型，并从中继承方法和属性，一层一层、以此类推。这种关系被称为原型链（prototype chain）它解释了为何任何一个对象会拥有定义在其他对象中的属性和方法</p><p>在对象实例和它的构造器之间建立一个链接（它是<code>__proto__</code>属性，是从构造函数的<code>prototype</code>属性派生的），之后通过上溯原型链，在构造器中找到这些属性和方法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// </span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;person&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析</p><ul><li>构造函数<code>Person</code>存在原型对象<code>Person.prototype</code></li><li>构造函数生成的实例对象<code>person</code>，<code>person</code>的<code>__proto__</code>指向构造函数<code>Person</code>的原型对象</li><li><code>Person.prototype.__proto__</code>指向内置对象，因为<code>Person.prototype</code>是个对象，默认是由<code>Object</code>函数作为类创建的，而<code>Object.prototype</code>为内置对象</li><li><code>Person.__proto__</code>指向内置匿名函数<code>anonymous</code>，因为Person是个函数对象。默认由Function类创建</li><li><code>Function.prototype</code>和<code>Function.__proto__</code>同时指向内置匿名函数<code>anonymous</code>，这样原型链的终点就是<code>null</code></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><code>__proto__</code>作为不同对象之间的桥梁，用来指向创建它的构造函数的原型对象，如下图</p><figure><img src="`+o+`" alt="__proto__关系" tabindex="0" loading="lazy"><figcaption>__proto__关系</figcaption></figure><p>每个对象的<code>__proto__</code>都是指向它的构造函数的原型对象<code>prototype</code>的</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>person1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>构造函数(Person)是一个函数对象，是通过<code>Function</code>构造器产生的</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>原型对象本身就是一个普通对象，而普通对象的构造函数都是<code>Object</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所有的构造器都是函数对象，函数对象都是<code>Function</code>构造产生的，<code>Object</code>同样也是构造器，也是<code>Function</code>构造器产生的</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Object</code>的原型对象也有<code>__proto__</code>属性指向<code>null</code>，<code>null</code>是原型链的顶端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>一切对象都是继承自<code>Object</code>对象，<code>Object</code>对象直接继承根源对象<code>null</code></li><li>一切的函数对象（包括<code>Object</code>对象），都是继承自<code>Function</code>对象</li></ul>`,26),i=[c];function l(r,u){return s(),a("div",null,i)}const m=n(p,[["render",l],["__file","js原型与原型链.html.vue"]]),v=JSON.parse('{"path":"/web/js/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html","title":"js原型与原型链","lang":"zh-CN","frontmatter":{"title":"js原型与原型链","icon":"gears","order":4,"category":["js"],"tag":["js"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"原型 JavaScript常被描述为一种基于原型的语言，每个对象拥有一个原型对象。当试图访问一个对象的属性时，不仅仅在对象上寻找，还会寻找该对象的原型，以及该对象原型的原型，依次层层向上搜索，知道找到一个名字匹配的属性或者到达原型链的末尾。 准确的说，这些属性和方法定义在Object的构造函数（constructor functions）之上的prot...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/web/js/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"js原型与原型链"}],["meta",{"property":"og:description","content":"原型 JavaScript常被描述为一种基于原型的语言，每个对象拥有一个原型对象。当试图访问一个对象的属性时，不仅仅在对象上寻找，还会寻找该对象的原型，以及该对象原型的原型，依次层层向上搜索，知道找到一个名字匹配的属性或者到达原型链的末尾。 准确的说，这些属性和方法定义在Object的构造函数（constructor functions）之上的prot..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blogs/assets/images/web/js/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-09T09:33:16.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:modified_time","content":"2024-07-09T09:33:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js原型与原型链\\",\\"image\\":[\\"https://mister-hope.github.io/blogs/assets/images/web/js/1.png\\",\\"https://mister-hope.github.io/blogs/assets/images/web/js/2.png\\"],\\"dateModified\\":\\"2024-07-09T09:33:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"原型","slug":"原型","link":"#原型","children":[]},{"level":2,"title":"原型链","slug":"原型链","link":"#原型链","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1720517596000,"updatedTime":1720517596000,"contributors":[{"name":"sola-grj","email":"1131631886@qq.com","commits":1}]},"readingTime":{"minutes":2.56,"words":769},"filePathRelative":"web/js/js原型与原型链.md","localizedDate":"2024年7月9日","excerpt":"<h2>原型</h2>\\n<p>JavaScript常被描述为一种基于原型的语言，每个对象拥有一个原型对象。当试图访问一个对象的属性时，不仅仅在对象上寻找，还会寻找该对象的原型，以及该对象原型的原型，依次层层向上搜索，知道找到一个名字匹配的属性或者到达原型链的末尾。</p>\\n<p>准确的说，这些属性和方法定义在Object的构造函数（constructor functions）之上的<code>prototype</code>属性上，而非实例对象本身</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">doSomething</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span> doSomething<span class=\\"token punctuation\\">.</span>prototype <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 控制台输出</span>\\n<span class=\\"token punctuation\\">{</span>\\n <span class=\\"token literal-property property\\">constructor</span><span class=\\"token operator\\">:</span> ƒ <span class=\\"token function\\">doSomething</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n <span class=\\"token literal-property property\\">__proto__</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n <span class=\\"token literal-property property\\">constructor</span><span class=\\"token operator\\">:</span> ƒ <span class=\\"token function\\">Object</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n <span class=\\"token literal-property property\\">hasOwnProperty</span><span class=\\"token operator\\">:</span> ƒ <span class=\\"token function\\">hasOwnProperty</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n <span class=\\"token literal-property property\\">isPrototypeOf</span><span class=\\"token operator\\">:</span> ƒ <span class=\\"token function\\">isPrototypeOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n <span class=\\"token literal-property property\\">propertyIsEnumerable</span><span class=\\"token operator\\">:</span> ƒ <span class=\\"token function\\">propertyIsEnumerable</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n <span class=\\"token literal-property property\\">toLocaleString</span><span class=\\"token operator\\">:</span> ƒ <span class=\\"token function\\">toLocaleString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n <span class=\\"token literal-property property\\">toString</span><span class=\\"token operator\\">:</span> ƒ <span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n <span class=\\"token literal-property property\\">valueOf</span><span class=\\"token operator\\">:</span> ƒ <span class=\\"token function\\">valueOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{m as comp,v as data};
