import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-tdQwJvOh.js";const e="/blogs/assets/images/node/nestjs/38.png",p="/blogs/assets/images/node/nestjs/39.png",o="/blogs/assets/images/node/nestjs/40.png",i="/blogs/assets/images/node/nestjs/41.png",c={},l=t('<h3 id="_1-先创建一个验证管道" tabindex="-1"><a class="header-anchor" href="#_1-先创建一个验证管道"><span>1.先创建一个验证管道</span></a></h3><ul><li>nest g pi 文件名字 <img src="'+e+`" alt="验证管道" loading="lazy"></li></ul><h3 id="_2-安装验证器" tabindex="-1"><a class="header-anchor" href="#_2-安装验证器"><span>2.安装验证器</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">--save</span> class-validator class-transformer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> IsNotEmpty<span class="token punctuation">,</span> IsString<span class="token punctuation">,</span> Length<span class="token punctuation">,</span> IsNumber <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-validator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CreateLoginDto</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsString</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Length</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    message<span class="token operator">:</span> <span class="token string">&quot;Name must be between 5 and 10 characters long&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNumber</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用管道和定义类型" tabindex="-1"><a class="header-anchor" href="#_3-使用管道和定义类型"><span>3.使用管道和定义类型</span></a></h3><figure><img src="`+p+`" alt="使用管道" tabindex="0" loading="lazy"><figcaption>使用管道</figcaption></figure><h3 id="_4-实现验证-transform" tabindex="-1"><a class="header-anchor" href="#_4-实现验证-transform"><span>4.实现验证 transform</span></a></h3><ul><li>value 就是 前端传过来的数据 metaData 就是元数据 通过 metatype 可以去实例化这个类</li><li>实例化 DTO</li><li>通过 validate 验证 DTO 返回一个 promise 的错误信息 如果有错误抛出</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  ArgumentMetadata<span class="token punctuation">,</span>
  HttpException<span class="token punctuation">,</span>
  HttpStatus<span class="token punctuation">,</span>
  Injectable<span class="token punctuation">,</span>
  PipeTransform<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> plainToInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-transformer&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> validate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-validator&quot;</span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoginPipe</span> <span class="token keyword">implements</span> <span class="token class-name">PipeTransform</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> metadata<span class="token operator">:</span> ArgumentMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dto <span class="token operator">=</span> <span class="token function">plainToInstance</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span>metatype<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">validate</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> messages <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>constraints<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;=======&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> dto<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-注册全局-dto-验证管道" tabindex="-1"><a class="header-anchor" href="#_5-注册全局-dto-验证管道"><span>5.注册全局 DTO 验证管道</span></a></h3><figure><img src="`+o+'" alt="注册全局管道" tabindex="0" loading="lazy"><figcaption>注册全局管道</figcaption></figure><figure><img src="'+i+'" alt="验证管道" tabindex="0" loading="lazy"><figcaption>验证管道</figcaption></figure>',13),r=[l];function u(d,k){return s(),a("div",null,r)}const v=n(c,[["render",u],["__file","nestjs 管道验证DTO.html.vue"]]),b=JSON.parse('{"path":"/node/nestjs/nestjs%20%E7%AE%A1%E9%81%93%E9%AA%8C%E8%AF%81DTO.html","title":"nestjs 管道验证DTO","lang":"zh-CN","frontmatter":{"title":"nestjs 管道验证DTO","icon":"gears","order":4,"category":["node"],"tag":["nestjs"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"1.先创建一个验证管道 nest g pi 文件名字 验证管道 2.安装验证器 3.使用管道和定义类型 使用管道使用管道 4.实现验证 transform value 就是 前端传过来的数据 metaData 就是元数据 通过 metatype 可以去实例化这个类 实例化 DTO 通过 validate 验证 DTO 返回一个 promise 的错误信...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/node/nestjs/nestjs%20%E7%AE%A1%E9%81%93%E9%AA%8C%E8%AF%81DTO.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"nestjs 管道验证DTO"}],["meta",{"property":"og:description","content":"1.先创建一个验证管道 nest g pi 文件名字 验证管道 2.安装验证器 3.使用管道和定义类型 使用管道使用管道 4.实现验证 transform value 就是 前端传过来的数据 metaData 就是元数据 通过 metatype 可以去实例化这个类 实例化 DTO 通过 validate 验证 DTO 返回一个 promise 的错误信..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blogs/assets/images/node/nestjs/38.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-13T07:14:15.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"nestjs"}],["meta",{"property":"article:modified_time","content":"2025-01-13T07:14:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nestjs 管道验证DTO\\",\\"image\\":[\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/38.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/39.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/40.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/41.png\\"],\\"dateModified\\":\\"2025-01-13T07:14:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"1.先创建一个验证管道","slug":"_1-先创建一个验证管道","link":"#_1-先创建一个验证管道","children":[]},{"level":3,"title":"2.安装验证器","slug":"_2-安装验证器","link":"#_2-安装验证器","children":[]},{"level":3,"title":"3.使用管道和定义类型","slug":"_3-使用管道和定义类型","link":"#_3-使用管道和定义类型","children":[]},{"level":3,"title":"4.实现验证 transform","slug":"_4-实现验证-transform","link":"#_4-实现验证-transform","children":[]},{"level":3,"title":"5.注册全局 DTO 验证管道","slug":"_5-注册全局-dto-验证管道","link":"#_5-注册全局-dto-验证管道","children":[]}],"git":{"createdTime":1736752455000,"updatedTime":1736752455000,"contributors":[{"name":"garry","email":"Garryg@ecinnovations.com","commits":1}]},"readingTime":{"minutes":0.9,"words":269},"filePathRelative":"node/nestjs/nestjs 管道验证DTO.md","localizedDate":"2025年1月13日","excerpt":"<h3>1.先创建一个验证管道</h3>\\n<ul>\\n<li>nest g pi 文件名字\\n<img src=\\"/assets/images/node/nestjs/38.png\\" alt=\\"验证管道\\" loading=\\"lazy\\"></li>\\n</ul>\\n<h3>2.安装验证器</h3>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">npm</span> i <span class=\\"token parameter variable\\">--save</span> class-validator class-transformer\\n</code></pre></div>","autoDesc":true}');export{v as comp,b as data};
