import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as e}from"./app-BCMx_cTT.js";const t="/blogs/assets/images/node/nestjs/22.png",l="/blogs/assets/images/node/nestjs/23.png",p="/blogs/assets/images/node/nestjs/24.png",h="/blogs/assets/images/node/nestjs/25.png",r="/blogs/assets/images/node/nestjs/26.png",k="/blogs/assets/images/node/nestjs/27.png",d="/blogs/assets/images/node/nestjs/28.png",o="/blogs/assets/images/node/nestjs/29.png",g={};function c(B,s){return e(),a("div",null,s[0]||(s[0]=[n('<h4 id="模块-module" tabindex="-1"><a class="header-anchor" href="#模块-module"><span>模块@Module</span></a></h4><p>每个 <a href="https://so.csdn.net/so/search?q=Nest&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">Nest</a> 应用程序至少有一个模块，即根模块。根模块是 Nest 开始安排应用程序树的地方。事实上，根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的<strong>功能</strong></p><h4 id="_1-基本用法" tabindex="-1"><a class="header-anchor" href="#_1-基本用法"><span>1.基本用法</span></a></h4><p>当我们使用 nest g res user 创建一个<a href="https://so.csdn.net/so/search?q=CURD&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">CURD</a> 模板的时候 <a href="https://so.csdn.net/so/search?q=nestjs&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">nestjs</a> 会自动帮我们引入模块</p><figure><img src="'+t+'" alt="模块引入" tabindex="0" loading="lazy"><figcaption>模块引入</figcaption></figure><h4 id="_2-共享模块" tabindex="-1"><a class="header-anchor" href="#_2-共享模块"><span>2.共享模块</span></a></h4><p>例如 user 的 Service 想暴露给 其他模块使用就可以使用 exports 导出该服务</p><figure><img src="'+l+'" alt="模块引入" tabindex="0" loading="lazy"><figcaption>模块引入</figcaption></figure><p>由于 App.modules 已经引入过该模块 就可以直接使用 user 模块的 Service</p><figure><img src="'+p+'" alt="模块引入" tabindex="0" loading="lazy"><figcaption>模块引入</figcaption></figure><figure><img src="'+h+'" alt="模块引入" tabindex="0" loading="lazy"><figcaption>模块引入</figcaption></figure><h4 id="_3-全局模块" tabindex="-1"><a class="header-anchor" href="#_3-全局模块"><span>3.全局模块</span></a></h4><p>@Global()</p><p>我们给 user 模块添加  @Global() 他便注册为全局模块</p><figure><img src="'+r+'" alt="全局模块" tabindex="0" loading="lazy"><figcaption>全局模块</figcaption></figure><p>在 user 模块使用无须在 module  import 导入</p><figure><img src="'+k+'" alt="全局模块" tabindex="0" loading="lazy"><figcaption>全局模块</figcaption></figure><h4 id="_4-动态模块" tabindex="-1"><a class="header-anchor" href="#_4-动态模块"><span>4.动态模块</span></a></h4><p>动态模块主要就是为了给模块传递参数 可以给该模块添加一个静态方法 用来接受参数</p><figure><img src="'+d+`" alt="全局模块" tabindex="0" loading="lazy"><figcaption>全局模块</figcaption></figure><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DynamicModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@nestjs/common&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ConfigModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> forRoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">options</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DynamicModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ConfigModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      providers</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          provide</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Config&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          useValue</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">baseApi</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/api&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          provide</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Config&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          useValue</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">baseApi</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/api&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+'" alt="全局模块" tabindex="0" loading="lazy"><figcaption>全局模块</figcaption></figure>',22)]))}const A=i(g,[["render",c]]),y=JSON.parse('{"path":"/node/nestjs/nestjs%20%E6%A8%A1%E5%9D%97.html","title":"nestjs 模块","lang":"zh-CN","frontmatter":{"title":"nestjs 模块","icon":"gears","order":4,"category":["node"],"tag":["nestjs"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"模块@Module 每个 Nest 应用程序至少有一个模块，即根模块。根模块是 Nest 开始安排应用程序树的地方。事实上，根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的功能 1.基本用法 当我们使用 nest g res user 创建一个CU...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nestjs 模块\\",\\"image\\":[\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/22.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/23.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/24.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/25.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/26.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/27.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/28.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/29.png\\"],\\"dateModified\\":\\"2025-01-06T09:59:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/node/nestjs/nestjs%20%E6%A8%A1%E5%9D%97.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"nestjs 模块"}],["meta",{"property":"og:description","content":"模块@Module 每个 Nest 应用程序至少有一个模块，即根模块。根模块是 Nest 开始安排应用程序树的地方。事实上，根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的功能 1.基本用法 当我们使用 nest g res user 创建一个CU..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blogs/assets/images/node/nestjs/22.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-06T09:59:22.000Z"}],["meta",{"property":"article:tag","content":"nestjs"}],["meta",{"property":"article:modified_time","content":"2025-01-06T09:59:22.000Z"}]]},"git":{"createdTime":1736157562000,"updatedTime":1736157562000,"contributors":[{"name":"garry","username":"garry","email":"Garryg@ecinnovations.com","commits":1,"url":"https://github.com/garry"}]},"readingTime":{"minutes":1.38,"words":415},"filePathRelative":"node/nestjs/nestjs 模块.md","excerpt":"<h4>模块@Module</h4>\\n<p>每个 <a href=\\"https://so.csdn.net/so/search?q=Nest&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Nest</a> 应用程序至少有一个模块，即根模块。根模块是 Nest 开始安排应用程序树的地方。事实上，根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的<strong>功能</strong></p>\\n<h4>1.基本用法</h4>","autoDesc":true}');export{A as comp,y as data};
