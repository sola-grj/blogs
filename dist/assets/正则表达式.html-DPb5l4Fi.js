import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-tdQwJvOh.js";const e={},p=t(`<h2 id="正则基础" tabindex="-1"><a class="header-anchor" href="#正则基础"><span>正则基础</span></a></h2><h3 id="_1、为什么使用正则" tabindex="-1"><a class="header-anchor" href="#_1、为什么使用正则"><span>1、为什么使用正则</span></a></h3><ul><li><p>需求</p><p>判断一个字符串是否是手机号</p></li><li><p>解决</p><p>编写一个函数，给函数一个字符串，如果是手机号则返回 True，否则返回 False</p></li><li><p>代码</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">isPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 长度为11</span>
    <span class="token comment"># 全部都是数字字符</span>
    <span class="token comment"># 以1开头</span>
    <span class="token keyword">pass</span>

<span class="token keyword">if</span> isPhone<span class="token punctuation">(</span><span class="token string">&quot;13812345678&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;是手机号&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;不是手机号&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意</p><p>如果使用正则会让这个问题变得简单</p></li></ul><h3 id="_2、正则与-re-模块简介" tabindex="-1"><a class="header-anchor" href="#_2、正则与-re-模块简介"><span>2、正则与 re 模块简介</span></a></h3><p><strong>概述：</strong> <strong>正则表达式</strong>，又称规则表达式</p><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern）</p><p>正则匹配是一个 模糊的匹配(不是精确匹配)</p><p>**re：**python 自 1.5 版本开始增加了 re 模块，该模块提供了 perl 风格的正则表达式模式，re 模块是 python 语言拥有了所有正则表达式的功能</p><ul><li>如下四个方法经常使用 <ul><li>match()</li><li>search()</li><li>findall()</li><li>finditer()</li></ul></li></ul><h2 id="二、正则表达式" tabindex="-1"><a class="header-anchor" href="#二、正则表达式"><span>二、正则表达式</span></a></h2><h3 id="_1、匹配单个字符与数字" tabindex="-1"><a class="header-anchor" href="#_1、匹配单个字符与数字"><span>1、匹配单个字符与数字</span></a></h3><table><thead><tr><th>匹配</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符，当 flags 被设置为 re.S 时，可以匹配包含换行符以内的所有字符</td></tr><tr><td>[]</td><td>里面是字符集合，匹配[]里任意一个字符</td></tr><tr><td>[0123456789]</td><td>匹配任意一个数字字符</td></tr><tr><td>[0-9]</td><td>匹配任意一个数字字符</td></tr><tr><td>[a-z]</td><td>匹配任意一个小写英文字母字符</td></tr><tr><td>[A-Z]</td><td>匹配任意一个大写英文字母字符</td></tr><tr><td>[A-Za-z]</td><td>匹配任意一个英文字母字符</td></tr><tr><td>[A-Za-z0-9]</td><td>匹配任意一个数字或英文字母字符</td></tr><tr><td>[^lucky]</td><td>[]里的^称为脱字符，表示非，匹配不在[]内的任意一个字符</td></tr><tr><td>^[lucky]</td><td>以[]中内的某一个字符作为开头</td></tr><tr><td>\\d</td><td>匹配任意一个数字字符，相当于[0-9]</td></tr><tr><td>\\D</td><td>匹配任意一个非数字字符，相当于<code>[^0-9]</code></td></tr><tr><td>\\w</td><td>匹配字母、下划线、数字中的任意一个字符，相当于[0-9A-Za-z_]</td></tr><tr><td>\\W</td><td>匹配非字母、下划线、数字中的任意一个字符，相当于<code>[^0-9A-Za-z_]</code></td></tr><tr><td>\\s</td><td>匹配空白符(空格、换页、换行、回车、制表)，相当于[ \\f\\n\\r\\t]</td></tr><tr><td>\\S</td><td>匹配非空白符(空格、换页、换行、回车、制表)，相当于<code>[^ \\f\\n\\r\\t]</code></td></tr></tbody></table><h3 id="_2、匹配锚字符" tabindex="-1"><a class="header-anchor" href="#_2、匹配锚字符"><span>2、匹配锚字符</span></a></h3><p>锚字符:用来判定是否按照规定开始或者结尾</p><ul><li><p>注意：</p><p>只要字符串包含就可以</p><p>只匹配一次</p></li><li><p>示例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[a-z]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;131A3ab889s&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p>注意</p><p>与 search 的区别</p><p>相同点：</p><p>都只匹配一次</p><p>不同点：</p><ul><li>search 是在要匹配的字符串中 包含正则表达式的内容就可以</li><li>match 必须第一位就开始匹配 否则匹配失败</li></ul></li></ul><h3 id="_3、findall-函数-返回列表" tabindex="-1"><a class="header-anchor" href="#_3、findall-函数-返回列表"><span>3、findall()函数（返回列表）</span></a></h3><ul><li><p>原型</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>def findall(pattern, string, flags=0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>功能</p><p>扫描整个字符串 string，并返回所有匹配的 pattern 模式结果的字符串列表</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>示例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>myStr <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;
&lt;A href=&quot;http://www.taobao.com&quot;&gt;淘宝&lt;/A&gt;
&lt;a href=&quot;http://www.id97.com&quot;&gt;电
影网站&lt;/a&gt;
&lt;i&gt;我是倾斜1&lt;/i&gt;
&lt;i&gt;我是倾斜2&lt;/i&gt;
&lt;em&gt;我是倾斜2&lt;/em&gt;
&quot;&quot;&quot;</span>
<span class="token comment"># html里是不区分大小写</span>
<span class="token comment"># （1）给正则里面匹配的 加上圆括号 会将括号里面的内容进行 单独的返回</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&quot;(&lt;a href=\\&quot;http://www\\.(.*?)\\.com\\&quot;&gt;(.*?)&lt;/a&gt;)&quot;</span><span class="token punctuation">,</span>myStr<span class="token punctuation">)</span> <span class="token comment">#[(&#39;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#39;, &#39;baidu&#39;, &#39;百度&#39;)]</span>

<span class="token comment"># 括号的区别</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&quot;&lt;a href=\\&quot;http://www\\..*?\\.com\\&quot;&gt;.*?&lt;/a&gt;&quot;</span><span class="token punctuation">,</span>myStr<span class="token punctuation">)</span> <span class="token comment">#[&#39;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#39;]</span>

<span class="token comment">#(2) 不区分大小写的匹配</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&quot;&lt;a href=\\&quot;http://www\\..*?\\.com\\&quot;&gt;.*?&lt;/a&gt;&quot;</span><span class="token punctuation">,</span>myStr<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token comment">#[&#39;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#39;, &#39;&lt;A href=&quot;http://www.taobao.com&quot;&gt;淘宝&lt;/A&gt;&#39;]</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&quot;&lt;[aA] href=\\&quot;http://www\\..*?\\.com\\&quot;&gt;.*?&lt;/[aA]&gt;&quot;</span><span class="token punctuation">,</span>myStr<span class="token punctuation">)</span> <span class="token comment">#[&#39;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#39;]</span>
<span class="token comment"># (3) 使.支持换行匹配</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&quot;&lt;a href=&quot;</span>http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span><span class="token punctuation">.</span>?<span class="token punctuation">.</span>com<span class="token string">&quot;&gt;.?&lt;/a&gt;&quot;</span><span class="token punctuation">,</span>myStr<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span> <span class="token comment">#</span>
<span class="token comment"># (4) 支持换行 支持不区分大小写匹配</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&quot;&lt;a href=&quot;</span>http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span><span class="token punctuation">.</span>?<span class="token punctuation">.</span>com<span class="token string">&quot;&gt;.?&lt;/a&gt;&quot;</span><span class="token punctuation">,</span>myStr<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token operator">|</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token comment">#</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4、finditer-函数" tabindex="-1"><a class="header-anchor" href="#_4、finditer-函数"><span>4、finditer()函数</span></a></h3><ul><li><p>原型</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>def finditer(pattern, string, flags=0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>功能</p><p>与 findall()类似，返回一个迭代器</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>代码</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

res <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">&#39;\\w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12hsakda1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5、split-函数" tabindex="-1"><a class="header-anchor" href="#_5、split-函数"><span>5、split()函数</span></a></h3><ul><li><p>作用：切割字符串</p></li><li><p>原型：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>def split(patter, string, maxsplit=0, flags=0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>参数</p><p>pattern 正则表达式</p><p>string 要拆分的字符串</p><p>maxsplit 最大拆分次数 默认拆分全部</p><p>flags 修正符</p></li><li><p>示例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re
myStr <span class="token operator">=</span> <span class="token string">&quot;asdas\\rd&amp;a\\ts12d\\n*a3sd@a_1sd&quot;</span>
<span class="token comment">#通过特殊字符 对其进行拆分 成列表</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;[^a-z]&quot;</span><span class="token punctuation">,</span>myStr<span class="token punctuation">)</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\W&quot;</span><span class="token punctuation">,</span>myStr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_6、修正符" tabindex="-1"><a class="header-anchor" href="#_6、修正符"><span>6、修正符</span></a></h3><ul><li><p>作用</p><p>对正则进行修正</p></li><li><p>使用</p><p>search/match/findall/finditer 等函数 flags 参数的使用</p></li><li><p>修正符</p><p>re.I 不区分大小写匹配</p><p>re.S 使.可以匹配换行符 匹配任意字符</p></li><li><p>使用</p><p>re.I</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;[a-z]&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;AaBb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;[a-z]&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;AaBb&#39;</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>re.S</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;&lt;b&gt;.*?&lt;/b&gt;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&lt;b&gt;b标签&lt;/b&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;&lt;b&gt;.*?&lt;/b&gt;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&lt;b&gt;b标\\n签&lt;/b&gt;&#39;</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="四、正则高级" tabindex="-1"><a class="header-anchor" href="#四、正则高级"><span>四、正则高级</span></a></h2><h3 id="_1、分组-起名称" tabindex="-1"><a class="header-anchor" href="#_1、分组-起名称"><span>1、分组&amp;起名称</span></a></h3><ul><li><p>概念</p><p>处理简单的判断是否匹配之外，正则表达式还有提取子串的功能，用()表示的就是要提取的分组</p></li><li><p>代码</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#给当前匹配到的结果起别名</span>
s <span class="token operator">=</span> <span class="token string">&#39;3G4HFD567&#39;</span>
re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&quot;(?P&lt;value&gt;\\d+)&quot;</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>说明</p><ul><li>正则表达式中定义了组，就可以在 Match 对象上用 group()方法提取出子串来</li><li>group(0)永远是原始字符串，group(1)、group(2)……表示第 1、2、……个子串</li></ul></li></ul><h3 id="_2、编译" tabindex="-1"><a class="header-anchor" href="#_2、编译"><span>2、编译</span></a></h3><ul><li><p>概念</p><p>当在 python 中使用正则表达式时，re 模块会做两件事，一件是编译正则表达式，如果表达式的字符串本身不合法，会报错。另一件是用编译好的正则表达式提取匹配字符串</p></li><li><p>编译优点</p><p>如果一个正则表达式要使用几千遍，每一次都会编译，出于效率的考虑进行正则表达式的编译，就不需要每次都编译了，节省了编译的时间，从而提升效率</p></li><li><p>compile()函数</p><ul><li><p>原型</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>def compile(pattern, flags=0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>作用</p><p>将 pattern 模式编译成正则对象</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>flags</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>re.I</td><td>是匹配对大小写不敏感</td></tr><tr><td>re.S</td><td>使.匹配包括换行符在内的所有字符</td></tr></tbody></table></li><li><p>返回值</p><p>编译好的正则对象</p></li><li><p>示例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

re_phone <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&quot;(0\\d{2,3}-\\d{7,8})&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re_phone<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>re_phone<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>编译后其他方法的使用</p><p>原型</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>def match(self, string, pos=0, endpos=-1)
def search(self, string, pos=0, endpos=-1)
def findall(self, string, pos=0, endpos=-1)
def finditer(self, string, pos=0, endpos=-1)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>string</td><td>待匹配的字符串</td></tr><tr><td>pos</td><td>从 string 字符串 pos 下标开始</td></tr><tr><td>endpos</td><td>结束下标</td></tr></tbody></table><p>示例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&quot;lucky&#39;s phone is 010-88888888&quot;</span>
s2 <span class="token operator">=</span> <span class="token string">&quot;kaige&#39;s phone is 010-99999999&quot;</span>
ret1 <span class="token operator">=</span> re_phone<span class="token punctuation">.</span>search<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ret1<span class="token punctuation">,</span> ret1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ret2 <span class="token operator">=</span> re_phone<span class="token punctuation">.</span>search<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ret2<span class="token punctuation">,</span> ret2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3、贪婪与非贪婪" tabindex="-1"><a class="header-anchor" href="#_3、贪婪与非贪婪"><span>3、贪婪与非贪婪</span></a></h3><ul><li><p>贪婪模式</p><p>贪婪概念：匹配尽可能多的字符</p><ul><li>.+ 匹配换行符以外的字符至少一次</li><li>.* 匹配换行符以外的字符任意次</li></ul><p>实例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;b&gt;.+&lt;/b&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;b&gt;&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&#39;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;b&gt;.*&lt;/b&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>非贪婪模式</p><p>非贪婪概念：尽可能少的匹配称为非贪婪匹配，*?、+?即可</p></li><li><p>.+? 匹配换行符以外的字符至少一次 拒绝贪婪</p><ul><li>.*? 匹配换行符以外的字符任意次 拒绝贪婪</li></ul><p>实例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;b&gt;.+?&lt;/b&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&#39;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;b&gt;.*?&lt;/b&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,31),l=[p];function i(o,c){return s(),a("div",null,l)}const d=n(e,[["render",i],["__file","正则表达式.html.vue"]]),k=JSON.parse('{"path":"/python/spider/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"title":"正则表达式","icon":"gears","order":4,"category":["python"],"tag":["正则表达式"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"正则基础 1、为什么使用正则 需求 判断一个字符串是否是手机号 解决 编写一个函数，给函数一个字符串，如果是手机号则返回 True，否则返回 False 代码 注意 如果使用正则会让这个问题变得简单 2、正则与 re 模块简介 概述： 正则表达式，又称规则表达式 正则表达式(regular expression)描述了一种字符串匹配的模式（patter...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/python/spider/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:description","content":"正则基础 1、为什么使用正则 需求 判断一个字符串是否是手机号 解决 编写一个函数，给函数一个字符串，如果是手机号则返回 True，否则返回 False 代码 注意 如果使用正则会让这个问题变得简单 2、正则与 re 模块简介 概述： 正则表达式，又称规则表达式 正则表达式(regular expression)描述了一种字符串匹配的模式（patter..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-20T09:01:53.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"正则表达式"}],["meta",{"property":"article:modified_time","content":"2025-01-20T09:01:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-20T09:01:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"正则基础","slug":"正则基础","link":"#正则基础","children":[{"level":3,"title":"1、为什么使用正则","slug":"_1、为什么使用正则","link":"#_1、为什么使用正则","children":[]},{"level":3,"title":"2、正则与 re 模块简介","slug":"_2、正则与-re-模块简介","link":"#_2、正则与-re-模块简介","children":[]}]},{"level":2,"title":"二、正则表达式","slug":"二、正则表达式","link":"#二、正则表达式","children":[{"level":3,"title":"1、匹配单个字符与数字","slug":"_1、匹配单个字符与数字","link":"#_1、匹配单个字符与数字","children":[]},{"level":3,"title":"2、匹配锚字符","slug":"_2、匹配锚字符","link":"#_2、匹配锚字符","children":[]},{"level":3,"title":"3、findall()函数（返回列表）","slug":"_3、findall-函数-返回列表","link":"#_3、findall-函数-返回列表","children":[]},{"level":3,"title":"4、finditer()函数","slug":"_4、finditer-函数","link":"#_4、finditer-函数","children":[]},{"level":3,"title":"5、split()函数","slug":"_5、split-函数","link":"#_5、split-函数","children":[]},{"level":3,"title":"6、修正符","slug":"_6、修正符","link":"#_6、修正符","children":[]}]},{"level":2,"title":"四、正则高级","slug":"四、正则高级","link":"#四、正则高级","children":[{"level":3,"title":"1、分组&起名称","slug":"_1、分组-起名称","link":"#_1、分组-起名称","children":[]},{"level":3,"title":"2、编译","slug":"_2、编译","link":"#_2、编译","children":[]},{"level":3,"title":"3、贪婪与非贪婪","slug":"_3、贪婪与非贪婪","link":"#_3、贪婪与非贪婪","children":[]}]}],"git":{"createdTime":1737363713000,"updatedTime":1737363713000,"contributors":[{"name":"garry","email":"Garryg@ecinnovations.com","commits":1}]},"readingTime":{"minutes":6.8,"words":2040},"filePathRelative":"python/spider/正则表达式.md","localizedDate":"2025年1月20日","excerpt":"<h2>正则基础</h2>\\n<h3>1、为什么使用正则</h3>\\n<ul>\\n<li>\\n<p>需求</p>\\n<p>判断一个字符串是否是手机号</p>\\n</li>\\n<li>\\n<p>解决</p>\\n<p>编写一个函数，给函数一个字符串，如果是手机号则返回 True，否则返回 False</p>\\n</li>\\n<li>\\n<p>代码</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">def</span> <span class=\\"token function\\">isPhone</span><span class=\\"token punctuation\\">(</span>phone<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token comment\\"># 长度为11</span>\\n    <span class=\\"token comment\\"># 全部都是数字字符</span>\\n    <span class=\\"token comment\\"># 以1开头</span>\\n    <span class=\\"token keyword\\">pass</span>\\n\\n<span class=\\"token keyword\\">if</span> isPhone<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"13812345678\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"是手机号\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"不是手机号\\"</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div></li>\\n<li>\\n<p>注意</p>\\n<p>如果使用正则会让这个问题变得简单</p>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
