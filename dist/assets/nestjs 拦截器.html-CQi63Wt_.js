import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,e as s,b as t,d as e}from"./app-tdQwJvOh.js";const l={},r={id:"响应拦截器",tabindex:"-1"},u={class:"header-anchor",href:"#响应拦截器"},d={href:"https://so.csdn.net/so/search?q=%E6%8B%A6%E6%88%AA%E5%99%A8&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},k={href:"https://so.csdn.net/so/search?q=%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},m=n("ul",null,[n("li",null,[s("在函数执行之前/之后绑定"),n("strong",null,"额外的逻辑")]),n("li",null,"转换从函数返回的结果"),n("li",null,[n("strong",null,"转换"),s("从函数抛出的异常")]),n("li",null,"扩展基本函数行为"),n("li",null,"根据所选条件完全重写函数 (例如, 缓存目的)")],-1),v={href:"https://so.csdn.net/so/search?q=Nestjs&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},b=e(`<figure><img src="https://i-blog.csdnimg.cn/blog_migrate/5713a5d0ef28c5b0ca9d9425ad818346.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们想给他返回一个标准的 json 格式 就要给我们的数据做一个全局 format</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>

  data<span class="token punctuation">,</span> <span class="token comment">//数据</span>

  status<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>

  message<span class="token operator">:</span><span class="token string">&quot;成功&quot;</span><span class="token punctuation">,</span>

  success<span class="token operator">:</span><span class="token boolean">true</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建 common 文件夹 创建 response.ts</p><figure><img src="https://i-blog.csdnimg.cn/blog_migrate/505b75c7fee9eba2ef03ab35b402bcbc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Nest Js 配合 Rxjs 格式化数据</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> NestInterceptor<span class="token punctuation">,</span> CallHandler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs/operators&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">data<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Response<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">NestInterceptor</span> <span class="token punctuation">{</span>
  <span class="token function">intercept</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token operator">:</span> CallHandler<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>data<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
      <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          data<span class="token punctuation">,</span>

          status<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>

          success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

          message<span class="token operator">:</span> <span class="token string">&quot;牛逼&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 main.ts 注册</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span><span class="token function">useGlobalInterceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),g={id:"全局异常拦截器",tabindex:"-1"},h={class:"header-anchor",href:"#全局异常拦截器"},f={href:"https://so.csdn.net/so/search?q=%E6%8B%A6%E6%88%AA%E5%99%A8&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>common 下面新建 filter.ts</p><figure><img src="https://i-blog.csdnimg.cn/blog_migrate/76d8545d0c3e82fa5ef7bdf32c0f120c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>让我们创建一个异常过滤器，它负责捕获作为<code>HttpException</code>类实例的异常，并为它们设置自定义响应逻辑。为此，我们需要访问底层平台  <code>Request</code>和  <code>Response</code>。我们将访问<code>Request</code>对象，以便提取原始  <code>url</code>并将其包含在日志信息中。我们将使用  <code>Response.json()</code>方法，使用  <code>Response</code>对象直接控制发送的响应。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  ExceptionFilter<span class="token punctuation">,</span>
  Catch<span class="token punctuation">,</span>
  ArgumentsHost<span class="token punctuation">,</span>
  HttpException<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Request<span class="token punctuation">,</span> Response <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Catch</span></span><span class="token punctuation">(</span>HttpException<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HttpFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionFilter</span> <span class="token punctuation">{</span>
  <span class="token function">catch</span><span class="token punctuation">(</span>exception<span class="token operator">:</span> HttpException<span class="token punctuation">,</span> host<span class="token operator">:</span> ArgumentsHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> request <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span>Request<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> response <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getResponse</span><span class="token generic class-name"><span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> status <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      data<span class="token operator">:</span> exception<span class="token punctuation">.</span>message<span class="token punctuation">,</span>

      time<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

      success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

      path<span class="token operator">:</span> request<span class="token punctuation">.</span>url<span class="token punctuation">,</span>

      status<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册全局异常过滤器</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span><span class="token function">useGlobalFilters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6);function _(x,E){const a=o("ExternalLinkIcon");return c(),i("div",null,[n("h2",r,[n("a",u,[n("span",null,[n("a",d,[s("响应拦截器"),t(a)])])])]),n("p",null,[s("拦截器具有一系列有用的功能，这些功能受"),n("a",k,[s("面向切面编程"),t(a)]),s("（AOP）技术的启发。它们可以：")]),m,n("p",null,[s("我们现在没有给我们的"),n("a",v,[s("Nestjs"),t(a)]),s(" 规范返回给前端的格式现在比较乱")]),b,n("h2",g,[n("a",h,[n("span",null,[s("全局异常"),n("a",f,[s("拦截器"),t(a)])])])]),y])}const w=p(l,[["render",_],["__file","nestjs 拦截器.html.vue"]]),q=JSON.parse('{"path":"/node/nestjs/nestjs%20%E6%8B%A6%E6%88%AA%E5%99%A8.html","title":"nestjs 拦截器","lang":"zh-CN","frontmatter":{"title":"nestjs 拦截器","icon":"gears","order":4,"category":["node"],"tag":["nestjs"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"响应拦截器 拦截器具有一系列有用的功能，这些功能受面向切面编程（AOP）技术的启发。它们可以： 在函数执行之前/之后绑定额外的逻辑 转换从函数返回的结果 转换从函数抛出的异常 扩展基本函数行为 根据所选条件完全重写函数 (例如, 缓存目的) 我们现在没有给我们的Nestjs 规范返回给前端的格式现在比较乱 我们想给他返回一个标准的 json 格式 就要...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/node/nestjs/nestjs%20%E6%8B%A6%E6%88%AA%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"nestjs 拦截器"}],["meta",{"property":"og:description","content":"响应拦截器 拦截器具有一系列有用的功能，这些功能受面向切面编程（AOP）技术的启发。它们可以： 在函数执行之前/之后绑定额外的逻辑 转换从函数返回的结果 转换从函数抛出的异常 扩展基本函数行为 根据所选条件完全重写函数 (例如, 缓存目的) 我们现在没有给我们的Nestjs 规范返回给前端的格式现在比较乱 我们想给他返回一个标准的 json 格式 就要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i-blog.csdnimg.cn/blog_migrate/5713a5d0ef28c5b0ca9d9425ad818346.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-13T07:14:15.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"nestjs"}],["meta",{"property":"article:modified_time","content":"2025-01-13T07:14:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nestjs 拦截器\\",\\"image\\":[\\"https://i-blog.csdnimg.cn/blog_migrate/5713a5d0ef28c5b0ca9d9425ad818346.png\\",\\"https://i-blog.csdnimg.cn/blog_migrate/505b75c7fee9eba2ef03ab35b402bcbc.png\\",\\"https://i-blog.csdnimg.cn/blog_migrate/76d8545d0c3e82fa5ef7bdf32c0f120c.png\\"],\\"dateModified\\":\\"2025-01-13T07:14:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"响应拦截器","slug":"响应拦截器","link":"#响应拦截器","children":[]},{"level":2,"title":"全局异常拦截器","slug":"全局异常拦截器","link":"#全局异常拦截器","children":[]}],"git":{"createdTime":1736415588000,"updatedTime":1736752455000,"contributors":[{"name":"garry","email":"Garryg@ecinnovations.com","commits":2}]},"readingTime":{"minutes":1.76,"words":529},"filePathRelative":"node/nestjs/nestjs 拦截器.md","localizedDate":"2025年1月9日","excerpt":"<h2><a class=\\"header-anchor\\" href=\\"#响应拦截器\\"><span></span></a><a href=\\"https://so.csdn.net/so/search?q=%E6%8B%A6%E6%88%AA%E5%99%A8&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">响应拦截器</a></h2>\\n<p>拦截器具有一系列有用的功能，这些功能受<a href=\\"https://so.csdn.net/so/search?q=%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">面向切面编程</a>（AOP）技术的启发。它们可以：</p>","autoDesc":true}');export{w as comp,q as data};
