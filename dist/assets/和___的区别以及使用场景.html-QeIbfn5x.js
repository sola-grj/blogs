import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as t}from"./app-Ba2CBXJF.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h2 id="等于操作符" tabindex="-1"><a class="header-anchor" href="#等于操作符"><span>等于操作符</span></a></h2><p><code>==</code>等于操作符用两个等号表示，如果操作数相等 则返回<code>true</code>，在比较过程中，会先进行类型转换，再确定操作数是否相等，遵循以下规则：</p><h3 id="_1-如果任一操作数是布尔值-则将其转换成数值-在进行比较" tabindex="-1"><a class="header-anchor" href="#_1-如果任一操作数是布尔值-则将其转换成数值-在进行比较"><span>1.如果任一操作数是布尔值，则将其转换成数值，在进行比较</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-如果一操作数是字符串-另一个操作数是数值则将其转换成数值-在进行比较" tabindex="-1"><a class="header-anchor" href="#_2-如果一操作数是字符串-另一个操作数是数值则将其转换成数值-在进行比较"><span>2.如果一操作数是字符串，另一个操作数是数值则将其转换成数值，在进行比较</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;55&quot;</span> <span class="token operator">==</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-如果一个操作数是对象-另一个操作数不是-则调用对象的valueof方法取得其原始值-再根据前面的规则进行比较" tabindex="-1"><a class="header-anchor" href="#_3-如果一个操作数是对象-另一个操作数不是-则调用对象的valueof方法取得其原始值-再根据前面的规则进行比较"><span>3.如果一个操作数是对象，另一个操作数不是，则调用对象的<code>valueOf</code>方法取得其原始值，再根据前面的规则进行比较</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function-variable function">valueOf</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-null和undefined相等" tabindex="-1"><a class="header-anchor" href="#_4-null和undefined相等"><span>4.<code>null</code>和<code>undefined</code>相等</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-如果有任一操作数是nan-则相等操作符返回false" tabindex="-1"><a class="header-anchor" href="#_5-如果有任一操作数是nan-则相等操作符返回false"><span>5.如果有任一操作数是<code>NaN</code>，则相等操作符返回<code>false</code></span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-如果两个操作数都是对象-则比较它们是不是同一个-对象。如果两个操作数都指向同一个对象-则相等" tabindex="-1"><a class="header-anchor" href="#_6-如果两个操作数都是对象-则比较它们是不是同一个-对象。如果两个操作数都指向同一个对象-则相等"><span>6.如果两个操作数都是对象，则比较它们是不是同一个 对象。如果两个操作数都指向同一个对象，则相等</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span>obj1 <span class="token operator">==</span> obj2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结：</p><ul><li>两个都为简单类型，字符串和布尔值都会转换为数值，再比较</li><li>简单类型与引用类型比较，对象转化成原始类型的值，再比较</li><li>两个都为引用类型，则比较 它们是否指向同一个对象</li><li><code>null</code> 和 <code>undefined</code> 相等</li><li>存在 <code>NaN</code> 则返回 <code>false</code></li></ul><h2 id="全等操作符" tabindex="-1"><a class="header-anchor" href="#全等操作符"><span>全等操作符</span></a></h2><p>全等操作符由3个等号<code>===</code>表示，只有两个操作数在不转换的前提下相等才返回<code>true</code>。即类型相同，值也相同</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;55&quot;</span> <span class="token operator">===</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">55</span> <span class="token operator">===</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>undefined</code>和<code>null</code>自身严格相等</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h2><ul><li>相等操作符<code>==</code>会做类型转换，再进行值的比较，全等运算符不会做类型转换</li><li><code>null</code>和<code>undefined</code>比较，相等操作符为<code>true</code>，全等为<code>false</code></li></ul><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>相等运算符隐藏的类型转换，会带来一些反直觉的结果</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span> <span class="token comment">// false</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// true</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span> <span class="token comment">// true</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&#39;false&#39;</span> <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span> <span class="token comment">// true</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment">// false</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">// true</span>
<span class="token string">&#39; \\t\\r\\n&#39;</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但在比较<code>null</code>的时候，我们一般使用相等操作符</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>
<span class="token punctuation">}</span>
<span class="token comment">// 等同于下面的写法</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> obj<span class="token punctuation">.</span>x <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了在比较对象属性为<code>null</code>或者<code>undefined</code>的情况下，可以使用相等操作符，其他情况一律使用全等操作符</p>`,29)]))}const i=s(p,[["render",o],["__file","和___的区别以及使用场景.html.vue"]]),d=JSON.parse('{"path":"/web/js/%E5%92%8C___%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html","title":"==和===的区别以及使用场景","lang":"zh-CN","frontmatter":{"title":"==和===的区别以及使用场景","icon":"gears","order":4,"category":["js"],"tag":["js"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"等于操作符 ==等于操作符用两个等号表示，如果操作数相等 则返回true，在比较过程中，会先进行类型转换，再确定操作数是否相等，遵循以下规则： 1.如果任一操作数是布尔值，则将其转换成数值，在进行比较 2.如果一操作数是字符串，另一个操作数是数值则将其转换成数值，在进行比较 3.如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf方法取得...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/web/js/%E5%92%8C___%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"==和===的区别以及使用场景"}],["meta",{"property":"og:description","content":"等于操作符 ==等于操作符用两个等号表示，如果操作数相等 则返回true，在比较过程中，会先进行类型转换，再确定操作数是否相等，遵循以下规则： 1.如果任一操作数是布尔值，则将其转换成数值，在进行比较 2.如果一操作数是字符串，另一个操作数是数值则将其转换成数值，在进行比较 3.如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf方法取得..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-09T09:33:16.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:modified_time","content":"2024-07-09T09:33:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"==和===的区别以及使用场景\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-09T09:33:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"等于操作符","slug":"等于操作符","link":"#等于操作符","children":[{"level":3,"title":"1.如果任一操作数是布尔值，则将其转换成数值，在进行比较","slug":"_1-如果任一操作数是布尔值-则将其转换成数值-在进行比较","link":"#_1-如果任一操作数是布尔值-则将其转换成数值-在进行比较","children":[]},{"level":3,"title":"2.如果一操作数是字符串，另一个操作数是数值则将其转换成数值，在进行比较","slug":"_2-如果一操作数是字符串-另一个操作数是数值则将其转换成数值-在进行比较","link":"#_2-如果一操作数是字符串-另一个操作数是数值则将其转换成数值-在进行比较","children":[]},{"level":3,"title":"3.如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf方法取得其原始值，再根据前面的规则进行比较","slug":"_3-如果一个操作数是对象-另一个操作数不是-则调用对象的valueof方法取得其原始值-再根据前面的规则进行比较","link":"#_3-如果一个操作数是对象-另一个操作数不是-则调用对象的valueof方法取得其原始值-再根据前面的规则进行比较","children":[]},{"level":3,"title":"4.null和undefined相等","slug":"_4-null和undefined相等","link":"#_4-null和undefined相等","children":[]},{"level":3,"title":"5.如果有任一操作数是NaN，则相等操作符返回false","slug":"_5-如果有任一操作数是nan-则相等操作符返回false","link":"#_5-如果有任一操作数是nan-则相等操作符返回false","children":[]},{"level":3,"title":"6.如果两个操作数都是对象，则比较它们是不是同一个 对象。如果两个操作数都指向同一个对象，则相等","slug":"_6-如果两个操作数都是对象-则比较它们是不是同一个-对象。如果两个操作数都指向同一个对象-则相等","link":"#_6-如果两个操作数都是对象-则比较它们是不是同一个-对象。如果两个操作数都指向同一个对象-则相等","children":[]}]},{"level":2,"title":"全等操作符","slug":"全等操作符","link":"#全等操作符","children":[]},{"level":2,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1720517596000,"updatedTime":1720517596000,"contributors":[{"name":"sola-grj","email":"1131631886@qq.com","commits":1}]},"readingTime":{"minutes":2.3,"words":689},"filePathRelative":"web/js/==和===的区别以及使用场景.md","localizedDate":"2024年7月9日","excerpt":"<h2>等于操作符</h2>\\n<p><code>==</code>等于操作符用两个等号表示，如果操作数相等 则返回<code>true</code>，在比较过程中，会先进行类型转换，再确定操作数是否相等，遵循以下规则：</p>\\n<h3>1.如果任一操作数是布尔值，则将其转换成数值，在进行比较</h3>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> result1 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\n</code></pre></div>","autoDesc":true}');export{i as comp,d as data};
