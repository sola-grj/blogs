import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-tdQwJvOh.js";const e="/blogs/assets/images/web/html/1.png",p={},o=t(`<h2 id="dom" tabindex="-1"><a class="header-anchor" href="#dom"><span>DOM</span></a></h2><ul><li>文档对象模型</li><li>DOM就是把<code>文档</code>当作一个<code>对象</code>来看待</li><li>DOM的顶级对象是<code>document</code></li><li>DOM主要学习的是操作页面元素</li><li>DOM是 W3C标准规范</li></ul><h2 id="dom基本操作" tabindex="-1"><a class="header-anchor" href="#dom基本操作"><span>Dom基本操作</span></a></h2><h3 id="创建节点" tabindex="-1"><a class="header-anchor" href="#创建节点"><span>创建节点</span></a></h3><ul><li><p>createElement 创建新元素，接收一个参数，即要创建元素的标签名</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> divEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>createTextNode 创建一个文本节点</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> textEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>createDocumentFragment 创建一个文档碎片，它表示一种轻量级文档，主要用来存储临时节点，然后把文档内容一次性添加到DOM中</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当把一个<code>DocumentFragment</code>节点插入到文档树中，插入的不是<code>DocumentFragment</code>本身，而是它的所有子孙节点</p></li></ul><h3 id="查询节点" tabindex="-1"><a class="header-anchor" href="#查询节点"><span>查询节点</span></a></h3><ul><li><p>querySelector 传入任何有效的<code>css</code>选择器，即可选中单个<code>DOM</code>元素（首个）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.element&#39;</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#element&#39;</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;[name=&quot;username&quot;]&#39;</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div + p &gt; span&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果页面上没有指定的元素，返回<code>null</code></p></li><li><p>querySelectorAll 返回一个包含节点子树内所有与之相配的<code>Element</code>节点列表，如果没有匹配的没则返回一个空节点列表</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> notLive <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法返回的是一个<code>NodeList</code>的静态实例，它是一个静态的“快照”，而非“实时”的查询</p></li><li><p>其他获取DOM的方法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;id属性值&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;class属性值&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;标签名&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">&#39;name属性值&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token operator">/</span>element<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;CSS选择器&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
document<span class="token operator">/</span>element<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;CSS选择器&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span> <span class="token comment">// 获取页面中的HTML标签</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span class="token comment">// 获取页面中的BODY标签</span>
document<span class="token punctuation">.</span>all<span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取页面中所有 元素节点的对象集合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>除此之外，每个<code>DOM</code>元素还有<code>parentNode</code>、<code>childNodes</code>、<code>firstChild</code>、<code>lastChild</code>、<code>nextSibling</code>、<code>previousSibling</code>属性，关系如下图所示</p><figure><img src="`+e+`" alt="DOM节点关系" tabindex="0" loading="lazy"><figcaption>DOM节点关系</figcaption></figure><h3 id="更新节点" tabindex="-1"><a class="header-anchor" href="#更新节点"><span>更新节点</span></a></h3><ul><li><p>innerHTML 不但可以修改<code>DOM</code>节点的文本内容，还可以直接通过<code>HTML</code>片段修改<code>DOM</code>节点内部的子树</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// &lt;p id=&quot;p&quot;&gt;...&lt;/p &gt;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置文本为abc:</span>
p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;ABC&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &lt;p id=&quot;p&quot;&gt;ABC&lt;/p &gt;</span>
<span class="token comment">// 设置HTML:</span>
p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;ABC &lt;span style=&quot;color:red&quot;&gt;RED&lt;/span&gt; XYZ&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;p&gt;...&lt;/p &gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>innerText、textContent 自动对字符串进行<code>HTML</code>编码，保证无法设置任何<code>HTML</code>标签</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// &lt;p id=&quot;p-id&quot;&gt;...&lt;/p &gt;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;p-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置文本</span>
p<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;&lt;script&gt;alert(&quot;Hi&quot;)&lt;/script&gt;&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// HTML 被自动编译，无法设置一个&lt;script&gt;节点 :</span>
<span class="token comment">// &lt;p id=&quot;p-id&quot;&gt;&amp;lt;script&amp;gt;alert(&quot;Hi&quot;)&amp;lt;/script&amp;gt;&lt;/p &gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者区别在于读取属性时，<code>innerText</code>不返回隐藏元素的文本，而<code>textContent</code>返回所有文本</p></li><li><p>style DOM节点的style属性对应所有的CSS，可以直接获取或设置。遇到<code>-</code>需要转化为驼峰命名</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// &lt;p id=&quot;p-id&quot;&gt;...&lt;/p &gt;</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;p-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// CSS:</span>
p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">&#39;20px&#39;</span><span class="token punctuation">;</span> <span class="token comment">// </span>
p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>paddingTop <span class="token operator">=</span> <span class="token string">&#39;2em&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="添加节点" tabindex="-1"><a class="header-anchor" href="#添加节点"><span>添加节点</span></a></h3><ul><li><p>innerHTML 如果这个DOM节点是空的，那么就可以直接使用innerHTML添加节点</p></li><li><p>appendChild 把一个子节点添加到父节点的最后一个节点</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>python<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scheme<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Scheme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> js <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span>
	js<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;JavaScript&quot;</span>
	<span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>python<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scheme<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Scheme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--添加元素 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态添加新的节点</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">const</span> haskell <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
haskell<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&#39;haskell&#39;</span><span class="token punctuation">;</span>
haskell<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;Haskell&#39;</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>haskell<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>insertBefore 把子节点插入到指定的位置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 子节点会插入到referenceElment之前</span>
parentElement<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newElement<span class="token punctuation">,</span> referenceElement<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>setAttribute 在指定元素中添加一个属性节点，如果元素中已有该属性改变属性值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第一个参数是属性名，第二个是属性值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点"><span>删除节点</span></a></h3><ul><li><p>删除一个节点，首先要获得该节点本身以及它的父节点，然后调用父节点的<code>removeChild</code>把自己删除掉</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 拿到待删除的节点</span>
<span class="token keyword">const</span> self <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;to-be-removed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 拿到父节点:</span>
<span class="token keyword">const</span> parent <span class="token operator">=</span> self<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>
<span class="token comment">// 删除:</span>
<span class="token keyword">const</span> removed <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>
removed <span class="token operator">===</span> self<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,15),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(p,[["render",l],["__file","DOM基本使用.html.vue"]]),m=JSON.parse('{"path":"/web/html/DOM%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html","title":"DOM基本使用","lang":"zh-CN","frontmatter":{"title":"DOM基本使用","icon":"HTML","order":4,"category":["HTML"],"tag":["HTML"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"DOM 文档对象模型 DOM就是把文档当作一个对象来看待 DOM的顶级对象是document DOM主要学习的是操作页面元素 DOM是 W3C标准规范 Dom基本操作 创建节点 createElement 创建新元素，接收一个参数，即要创建元素的标签名 createTextNode 创建一个文本节点 createDocumentFragment 创建一...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/web/html/DOM%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"DOM基本使用"}],["meta",{"property":"og:description","content":"DOM 文档对象模型 DOM就是把文档当作一个对象来看待 DOM的顶级对象是document DOM主要学习的是操作页面元素 DOM是 W3C标准规范 Dom基本操作 创建节点 createElement 创建新元素，接收一个参数，即要创建元素的标签名 createTextNode 创建一个文本节点 createDocumentFragment 创建一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blogs/assets/images/web/html/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-05T10:07:55.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"HTML"}],["meta",{"property":"article:modified_time","content":"2024-07-05T10:07:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DOM基本使用\\",\\"image\\":[\\"https://mister-hope.github.io/blogs/assets/images/web/html/1.png\\"],\\"dateModified\\":\\"2024-07-05T10:07:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"DOM","slug":"dom","link":"#dom","children":[]},{"level":2,"title":"Dom基本操作","slug":"dom基本操作","link":"#dom基本操作","children":[{"level":3,"title":"创建节点","slug":"创建节点","link":"#创建节点","children":[]},{"level":3,"title":"查询节点","slug":"查询节点","link":"#查询节点","children":[]},{"level":3,"title":"更新节点","slug":"更新节点","link":"#更新节点","children":[]},{"level":3,"title":"添加节点","slug":"添加节点","link":"#添加节点","children":[]},{"level":3,"title":"删除节点","slug":"删除节点","link":"#删除节点","children":[]}]}],"git":{"createdTime":1720174075000,"updatedTime":1720174075000,"contributors":[{"name":"sola-grj","email":"1131631886@qq.com","commits":1}]},"readingTime":{"minutes":3.36,"words":1008},"filePathRelative":"web/html/DOM基本使用.md","localizedDate":"2024年7月5日","excerpt":"<h2>DOM</h2>\\n<ul>\\n<li>文档对象模型</li>\\n<li>DOM就是把<code>文档</code>当作一个<code>对象</code>来看待</li>\\n<li>DOM的顶级对象是<code>document</code></li>\\n<li>DOM主要学习的是操作页面元素</li>\\n<li>DOM是 W3C标准规范</li>\\n</ul>\\n<h2>Dom基本操作</h2>\\n<h3>创建节点</h3>\\n<ul>\\n<li>\\n<p>createElement 创建新元素，接收一个参数，即要创建元素的标签名</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> divEl <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createElement</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"div\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n<li>\\n<p>createTextNode 创建一个文本节点</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> textEl <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createTextNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"content\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n<li>\\n<p>createDocumentFragment 创建一个文档碎片，它表示一种轻量级文档，主要用来存储临时节点，然后把文档内容一次性添加到DOM中</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> fragment <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createDocumentFragment</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div><p>当把一个<code>DocumentFragment</code>节点插入到文档树中，插入的不是<code>DocumentFragment</code>本身，而是它的所有子孙节点</p>\\n</li>\\n</ul>","autoDesc":true}');export{k as comp,m as data};
