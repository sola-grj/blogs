import{_ as n,a as s}from"./2-8oaqdsJi.js";import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as p,d as e}from"./app-B4aR5uwP.js";const o={},l=e(`<h1 id="js知识相关" tabindex="-1"><a class="header-anchor" href="#js知识相关"><span>JS知识相关</span></a></h1><h2 id="_1-基础总结" tabindex="-1"><a class="header-anchor" href="#_1-基础总结"><span>1.基础总结</span></a></h2><h3 id="_1-数据类型" tabindex="-1"><a class="header-anchor" href="#_1-数据类型"><span>1.数据类型</span></a></h3><h4 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span><strong>基本数据类型</strong></span></a></h4><ol><li><h5 id="string-任意字符串" tabindex="-1"><a class="header-anchor" href="#string-任意字符串"><span>string：任意字符串</span></a></h5><p>字符串是不可变的，意思是一旦被创建，他们的值就不能变了</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;sola&#39;</span>
name <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">&#39;-grl&#39;</span> <span class="token comment">// 先销毁在重建</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h5 id="number-任意数值" tabindex="-1"><a class="header-anchor" href="#number-任意数值"><span>number：任意数值</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> intNum <span class="token operator">=</span> <span class="token number">55</span> <span class="token comment">// 10进制的55</span>
<span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">070</span> <span class="token comment">// 8进制的56</span>
<span class="token keyword">let</span> hexNum1 <span class="token operator">=</span> <span class="token number">0xA</span> <span class="token comment">//16进制的10</span>

<span class="token comment">// 浮点类型</span>
<span class="token keyword">let</span> floatNum1 <span class="token operator">=</span> <span class="token number">1.1</span>
<span class="token keyword">let</span> floatNum2 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> floatNum3 <span class="token operator">=</span> <span class="token number">.1</span><span class="token punctuation">;</span> <span class="token comment">// 有效，但不推荐</span>
<span class="token keyword">let</span> floatNum <span class="token operator">=</span> <span class="token number">3.125e7</span><span class="token punctuation">;</span> <span class="token comment">// 科学计数法 等于31250000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在数值类型中，存在一个特殊数值<strong>NaN</strong>,意为“不是数值”，用于表示本来要返回数值的操作失败了（而不是抛出错误）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">/</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h5 id="boolean-true、false" tabindex="-1"><a class="header-anchor" href="#boolean-true、false"><span>Boolean：true、false</span></a></h5><p><strong>Boolean</strong>类型有两个值：<strong>true</strong>和<strong>false</strong></p><p>通过Boolean可以将其他类型的数据转化为布尔值</p><table><thead><tr><th>数据类型</th><th>转换为true</th><th>转换为false</th></tr></thead><tbody><tr><td>String</td><td>非空字符串</td><td>&quot;&quot;</td></tr><tr><td>Number</td><td>非零数值（包括无穷值）</td><td>0、NaN</td></tr><tr><td>Object</td><td>任意对象</td><td>null</td></tr><tr><td>Undefined</td><td>N/A（不存在）</td><td>undefined</td></tr></tbody></table></li><li><h5 id="null-null" tabindex="-1"><a class="header-anchor" href="#null-null"><span>null：null</span></a></h5><p><strong>Null</strong>类型同样也只有一个值，即<strong>Null</strong>，逻辑上来说，null值表示一个空对象，这也是给<strong>typeof</strong>传一个<strong>null</strong>会返回<strong>object</strong>的原因</p></li><li><h5 id="undefined-undefined" tabindex="-1"><a class="header-anchor" href="#undefined-undefined"><span>undefined：undefined</span></a></h5><p>undefined类型只有一个值，即特殊的<strong>undefined</strong>，当使用<strong>var</strong>或者<strong>let</strong>声明了变量，但没有初始化的时候，就相当于给变量赋予了undefined</p></li><li><h5 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol"><span>symbol</span></a></h5><p>Symbol是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> genericSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> otherGenericSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>genericSymbol <span class="token operator">==</span> otherGenericSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">let</span> fooSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> otherFooSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooSymbol <span class="token operator">==</span> otherFooSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h5 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint"><span>bigInt</span></a></h5><p><code>BigInt</code>是一种新的数据类型，用于当整数值大于<code>Number</code>数据类型支持的范围时。这种数据类型允许我们安全地对大整数执行算术操作，表示高分辨率的时间戳，使用大整数id，等等，而不需要使用库。</p><p>重要的是要记住，不能使用<code>Number</code>和<code>BigInt</code>操作数的混合执行算术运算，需要通过显式转换其中的一种类型。 此外，出于兼容性原因，不允许在<code>BigInt</code>上使用一元加号（<code>+</code>）运算符。</p><p>JS 中的<code>Number</code>类型只能安全地表示<code>-9007199254740991 (-(2^53-1))</code> 和<code>9007199254740991(2^53-1)</code>之间的整数，任何超出此范围的整数值都可能失去精度。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9999999999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// → 10000000000000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用BigInt，应用程序不再需要变通方法或库来安全地表示<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.Min_SAFE_INTEGER</code>之外的整数。 现在可以在标准JS中执行对大整数的算术运算，而不会有精度损失的风险。</p><p>要创建<code>BigInt</code>，只需在整数的末尾追加n即可。比较:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9007199254740995n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// → 9007199254740995n</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9007199254740995</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// → 9007199254740996</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，可以调用<code>BigInt()</code>构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&quot;9007199254740995&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// → 9007199254740995n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h4 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型"><span><strong>引用类型</strong></span></a></h4><ol><li><h5 id="object-任意对象" tabindex="-1"><a class="header-anchor" href="#object-任意对象"><span>object：任意对象</span></a></h5><p>创建object常用方式为对象字面量表示法，属性名可以是字符串或者数值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;sola&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token number">5</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h5 id="function-特别对象-可以执行" tabindex="-1"><a class="header-anchor" href="#function-特别对象-可以执行"><span>function：特别对象（可以执行）</span></a></h5><p>函数实际上是对象，每个函数都是<code>Function</code>类型的实例，而<code>Function</code>也有属性和方法，跟其他引用类型一样</p><p>函数存在三种常见的表达式</p><ul><li><p>函数声明</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数表达式</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>箭头函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><h5 id="array-特别对象-内部数据有序-数据下标" tabindex="-1"><a class="header-anchor" href="#array-特别对象-内部数据有序-数据下标"><span>array：特别对象（内部数据有序/数据下标）</span></a></h5><p>数组是一组有序的数据，但跟其它语言不同的是，数组中的每个槽位可以存储任意类型的数据，并且，数组也是动态大小的，会随着数据添加而自动增长</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h5 id="其他引用类型" tabindex="-1"><a class="header-anchor" href="#其他引用类型"><span>其他引用类型</span></a></h5><p>除了上述说的三种之外，还包括<code>Date</code>、<code>RegExp</code>、<code>Map</code>、<code>Set</code>等</p></li></ol><h4 id="判断" tabindex="-1"><a class="header-anchor" href="#判断"><span>判断：</span></a></h4><ul><li>typeof：数值、字符串、布尔值、undefined、function。 <ul><li>不能区别的：null、object，object和array</li></ul></li><li>instanceof：判断对象的具体类型</li><li>===：null/undefined</li><li>object.prototype.toString.call()</li></ul><h4 id="存储区别" tabindex="-1"><a class="header-anchor" href="#存储区别"><span>存储区别</span></a></h4><ul><li><p>基本类型存储在栈中</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 赋值操作</span>
b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+n+`" alt="基本类型" tabindex="0" loading="lazy"><figcaption>基本类型</figcaption></figure></li><li><p>引用类型存储在堆中</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Xxx&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xxx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+s+`" alt="基本类型" tabindex="0" loading="lazy"><figcaption>基本类型</figcaption></figure></li></ul><h4 id="相关问题" tabindex="-1"><a class="header-anchor" href="#相关问题"><span>相关问题：</span></a></h4><p>1.undefined与null的区别？</p><ul><li>undefined定义了未赋值，null定义且赋值了，且值为null</li></ul><p>2.什么时候给对象赋值为null？</p><ul><li>初始赋值，表明将要赋值为对象</li><li>结束前赋值，让对象成为垃圾对象（被垃圾回收器回收）</li></ul><p>3.严格区分变量类型与数据类型？</p><ul><li>数据类型： <ul><li>基本类型</li><li>对象类型</li></ul></li><li>变量类型 <ul><li>基本类型 ：保存的都是基本类型的数据</li><li>引用数据类型：保存的都是地址值</li></ul></li></ul><h3 id="_2-数据、变量与内存" tabindex="-1"><a class="header-anchor" href="#_2-数据、变量与内存"><span>2.数据、变量与内存</span></a></h3><h4 id="_1-什么是数据" tabindex="-1"><a class="header-anchor" href="#_1-什么是数据"><span>1.什么是数据？</span></a></h4><ul><li>存储在内存中代表特定信息的东东，本质上是0101二进制</li><li>数据的特点：可传递、可运算</li><li>一切皆数据，函数也是数据</li><li>内存中所有操作的目标是：数据 <ul><li>算术运算</li><li>逻辑运算</li><li>赋值运算</li><li>运行函数</li></ul></li></ul><h4 id="_2-什么是内存" tabindex="-1"><a class="header-anchor" href="#_2-什么是内存"><span>2.什么是内存？</span></a></h4><ul><li>内存条通电以后产生的可存储数据的空间（临时的）</li><li>产生和死亡：内存条（集成电路板）——通电——产生一定容量的存储空间——存储各种数据——断电——内存全部消失</li><li>分配内存：声明变量和函数或创建对象时，JS引擎 会自动分配一定大小的内存来存放对应的数据</li><li>释放内存：清空内存中的数据，标识内存可以再分配使用（内存不释放就不能复用） <ul><li>自动释放：栈空间的局部变量</li><li>垃圾回调器回调：堆空间的垃圾对象</li></ul></li><li>一块内存包含两个数据： <ol><li>内部存储的数据（一般数据/地址数据）</li><li>内存地址值数据</li></ol></li></ul><ul><li>内存分类 <ul><li>栈：全局变量、局部变量</li><li>堆：对象</li></ul></li></ul><h4 id="_3-什么是变量" tabindex="-1"><a class="header-anchor" href="#_3-什么是变量"><span>3.什么是变量？</span></a></h4><ul><li>可变化的量，由变量名和变量值组成 ，每个变量对应一块内存</li><li>变量名用来查找对应的内存，变量值就是内存中保存的数值数据</li></ul><h4 id="_4-内存-数据-变量三者之间的关系" tabindex="-1"><a class="header-anchor" href="#_4-内存-数据-变量三者之间的关系"><span>4.内存，数据，变量三者之间的关系</span></a></h4><ul><li>内存是用来存储数据的空间</li><li>变量是内存的标识，我们通过变量查找到内存</li></ul><h4 id="相关问题-1" tabindex="-1"><a class="header-anchor" href="#相关问题-1"><span>相关问题</span></a></h4><p>5.在js调用函数的时候传递变量参数时，传递的时引用还是传递？ ——值</p><ul><li><pre><code>理解一：都是值（基本/地址值）传递
</code></pre></li><li><pre><code>理解二：可能是值传递，也可能是引用传递（地址值）
</code></pre></li></ul><p>6.JS引擎如何内存管理</p><ul><li><pre><code>1.内存生命周期
*     分配小内存空间，得到使用权
*     存储数据，可以反复进行操作
*     释放小内存空间
</code></pre></li><li><pre><code>2.释放内存
*     局部对象：函数执行完自动释放
*     对象：成为垃圾对象==》垃圾回收器回收
</code></pre></li></ul><h3 id="_3-对象" tabindex="-1"><a class="header-anchor" href="#_3-对象"><span>3.对象</span></a></h3><h4 id="什么是对象" tabindex="-1"><a class="header-anchor" href="#什么是对象"><span>什么是对象？</span></a></h4><ul><li>可以存储多个数据，多个数据的封装体</li><li>用来保存多个数据的容器</li></ul><h4 id="为什么要用对象" tabindex="-1"><a class="header-anchor" href="#为什么要用对象"><span>为什么要用对象？</span></a></h4><ul><li>统一管理多个数据</li></ul><h4 id="对象的组成" tabindex="-1"><a class="header-anchor" href="#对象的组成"><span>对象的组成</span></a></h4><ul><li>属性：属性名 + 属性值 组成</li><li>方法：一种特别的属性（属性值是函数）</li></ul><h4 id="如何访问内部数据" tabindex="-1"><a class="header-anchor" href="#如何访问内部数据"><span>如何访问内部数据</span></a></h4><ul><li>.属性名</li><li>[&#39;属性名&#39;]</li></ul><h4 id="什么时候必须使用-属性名-的方式" tabindex="-1"><a class="header-anchor" href="#什么时候必须使用-属性名-的方式"><span>什么时候必须使用[&#39;属性名&#39;]的方式？</span></a></h4><ul><li>1.属性名包含特殊字符串：- 空格等</li><li>2.变量名不确定</li></ul><h3 id="_4-函数" tabindex="-1"><a class="header-anchor" href="#_4-函数"><span>4.函数</span></a></h3><p>什么是函数？</p><ul><li>实现特定功能的n条语句的封装体</li><li>只有函数是可以执行的，其他类型 的数据不能执行</li></ul><p>为什么用函数？</p><ul><li>提高代码复用</li><li>便于阅读交流</li></ul><p>如何定义函数？</p><ul><li>函数声明 function test(){}</li><li>表达式 var a = function test(){}</li><li>二者区别 ：变量提升</li></ul><p>如何调用？</p><ul><li>test() 直接调用</li><li>obj.test()</li><li>new test()</li><li>test.call/apply(obj) 临时让test成为obj的方法进行调用</li></ul><p>什么函数才是回调函数？</p><ul><li>1.你定义的</li><li>2.你没有调用</li><li>3.但是他最终执行了(在某个时刻，某个条件下)</li></ul><p>常见的回调函数</p><ul><li>dom事件回调——发生事件的dom元素</li><li>定时器回调函数——window</li><li>ajax请求回调</li><li>生命周期回调</li></ul><h3 id="_5-iife" tabindex="-1"><a class="header-anchor" href="#_5-iife"><span>5.IIFE</span></a></h3><p>理解</p><ul><li>全称：Immediately-Invoked Function Expression</li></ul><p>作用</p><ul><li>隐藏实现</li><li>不会污染外部命名空间</li><li>用它来编写jS模块</li></ul><h3 id="_6-函数中的this" tabindex="-1"><a class="header-anchor" href="#_6-函数中的this"><span>6.函数中的this</span></a></h3><p>this是什么？</p><ul><li>任何函数本质上都是通过某个对象来调用的，如果没有直接指定就是window</li><li>所有函数内部都有一个变量this</li><li>它的值是调用当前函数的当前对象</li></ul><p>如何确定 this 的值</p><ul><li>test() window</li><li>p.test() p</li><li>new test() 新创建的对象</li><li>p.call(obj) obj</li></ul><h2 id="_2-函数高级" tabindex="-1"><a class="header-anchor" href="#_2-函数高级"><span>2.函数高级</span></a></h2><h3 id="_1-原型与原型链" tabindex="-1"><a class="header-anchor" href="#_1-原型与原型链"><span>1.原型与原型链</span></a></h3><h4 id="_1-原型" tabindex="-1"><a class="header-anchor" href="#_1-原型"><span>1.原型</span></a></h4><p>函数的prototype属性</p><ul><li>每个函数都有一个prototype属性，它默认指向一个Object空对象（即成为：原型对象）</li><li>原型对象中有一个属性：constructor，它指向函数对象</li></ul><p>给原型对象添加属性（一般都是方法）</p><ul><li>作用：函数的所有实例对象自动拥有原型中的属性 （方法）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token class-name">Test</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Test<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-显示原型与隐式原型" tabindex="-1"><a class="header-anchor" href="#_2-显示原型与隐式原型"><span>2.显示原型与隐式原型</span></a></h4><p>1.每个函数function都有一个prototype 即显式原型</p><p>2.每个实例对象都有一个<code>__protp__</code>,可称为隐式原型</p><p>3.对象的隐式原型的值为其对应构造函数的显式原型的值</p><p>4.总结</p><ul><li>函数的prototype属性：在定义函数时自动添加的，默认值是一个 空Object对象</li><li>对象的<code>__proto__</code>属性：在创建对象时自动添加的，默认值为构造函数的prototype属性值</li><li>程序员可以直接操作显式原型，但不能直接从操作隐式原型（ES6之前）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> fn<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-原型链" tabindex="-1"><a class="header-anchor" href="#_3-原型链"><span>3.原型链</span></a></h4><p>1.原型链</p><ul><li>访问一个对象的属性时 <ul><li>先在自身的属性中查找，找到返回</li><li>如果没有，再沿着<code>__proto__</code>这条链向上查找，找到返回</li><li>如果最终没找到，返回undefined</li><li>别名 ：隐式原型链</li><li>作用：查找对象的属性（方法）</li></ul></li><li>函数的显式原型指向的对象默认是空Object实例对象 （但Object不满足）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">test1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fn<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fn<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// fn.test3()</span>

<span class="token comment">// 函数的显式原型指向的对象默认是空Object实例对象 （但Object不满足）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 所有函数都是Function实例（包含Function）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// Object的原型对象是原型链的尽头</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object object]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-原型链属性问题" tabindex="-1"><a class="header-anchor" href="#_4-原型链属性问题"><span>4.原型链属性问题</span></a></h4><p>1.读取对象的属性值时：会自动到原型链中查找</p><p>2.设置对象的属性值时：不会查找原型链，如果当前对象中没有此属性，直接添加此属性并设置其值</p><p>3.方法一般定义在原型中，属性一般通过构造函数定义在对象本身上</p><h4 id="_5-原型链面试题" tabindex="-1"><a class="header-anchor" href="#_5-原型链面试题"><span>5.原型链面试题</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// test1</span>
<span class="token comment">/*
* 首先，实例对象b默认的隐式原型指向源构造函数的显式原型，因此 b.n === 1
* 此时，构造函数的原型链上并没有m属性，因此是undefined
* 这时，又将构造函数的原型链给了一个新的指向，此时有了新的n、m属性
* 因此 c.m c.n均可以获取到对应的值
* */</span>
<span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>n<span class="token punctuation">,</span> b<span class="token punctuation">.</span>m<span class="token punctuation">,</span> c<span class="token punctuation">.</span>n<span class="token punctuation">,</span> c<span class="token punctuation">.</span>m<span class="token punctuation">)</span> <span class="token comment">// 1 undefined 2 3</span>

<span class="token comment">// test2</span>
<span class="token comment">/*
* f的实例对象的隐式原型指向其构造函数F的显式原型，而构造函数F的显式原型又指向了空Object对象
* 空Object对象的隐式原型指向了Obejct 的显式原型，因此 f.a()可以获取到
* 但此时 Object的显式原型对象上并没有 b 方法，因此f.b 为undefined，undefined加括号执行会报错
* 而F作为Function的实例对象，它的隐式原型指向构造函数Function的显式原型
* Function的显式原型，沿着隐式原型找到了重点Object ，因此 F.a() F.b()都可以获取到
*
* */</span>
<span class="token keyword">var</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bbb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">F</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">F</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-执行上下文与执行上下文栈" tabindex="-1"><a class="header-anchor" href="#_2-执行上下文与执行上下文栈"><span>2.执行上下文与执行上下文栈</span></a></h3><h4 id="_1-变量提升与函数提升" tabindex="-1"><a class="header-anchor" href="#_1-变量提升与函数提升"><span>1.变量提升与函数提升</span></a></h4><p>1.变量声明提升</p><ul><li>通过var定义（声明）的变量，在定义语句之前就可以访问到</li><li>值：undefined</li></ul><p>2.函数声明提升</p><ul><li>通过function声明的函数，在之前 就可以调用</li><li>值：函数定义对象</li></ul><p>3.问题：变量提升和函数提升是如何产生的？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 面试题</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span>
<span class="token punctuation">}</span>
<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 函数提升</span>
<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-执行上下文" tabindex="-1"><a class="header-anchor" href="#_2-执行上下文"><span>2.执行上下文</span></a></h4><p>1.代码分类</p><ul><li>全局代码</li><li>局部代码（函数）</li></ul><p>2.全局执行上下文</p><ul><li>在执行全局代码前window确定为全局执行上下文</li><li>对全局数据进行预处理 <ul><li>var定义的全局变量==》undefined，添加window的属性</li><li>function声明的全局函数==》赋值（fun），添加window的方法</li><li>this==》赋值（window）</li></ul></li><li>开始执行全局代码</li></ul><p>3.函数执行上下文</p><ul><li>在调用函数，准备执行函数体之前 ，创建对应的函数执行上下文对象</li><li>对局部数据进行预处理 <ul><li>形参变量==》赋值（实参）==》添加执行上下文的属性</li><li>arguments==》赋值（实参列表），添加为执行上下文的属性</li><li>var定义的局部变量==》undefined，添加为执行上下文的属性</li><li>function声明的属性 ==》赋值（fun），添加执行上下文的方法</li><li>this===》赋值（调用函数的对象）</li></ul></li><li>开始执行 函数体代码</li></ul><h4 id="_3-执行上下文栈" tabindex="-1"><a class="header-anchor" href="#_3-执行上下文栈"><span>3.执行上下文栈</span></a></h4><p>1.在全局代码执行前，JS引擎 就会创建一个栈来存储管理所有的执行上下文</p><p>2.在全局执行上下文（window）确定后，将其添加到栈中（压栈）</p><p>3.在 函数执行上下文创建后，将其添加到栈中（压栈）</p><p>4.在当前函数执行完后，将栈顶对象移除（出栈）</p><p>5.当所有的代码执行完后，栈中只剩下window</p><h4 id="_4-执行上下文面试题" tabindex="-1"><a class="header-anchor" href="#_4-执行上下文面试题"><span>4.执行上下文面试题</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*
* 依次输出：
* gb undefined
* fb 1
* fb 2
* fb 3
* fb 3
* fb 2
* fb 1
* ge 1
* 共有五个执行上下文
*
* */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;global  begin&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo() begin:&#39;</span><span class="token operator">+</span>  i<span class="token punctuation">)</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo() end&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;global end:&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>

<span class="token comment">// test 1 先执行变量提升、在执行函数提升</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> a
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;function&#39;</span>
<span class="token comment">// test 2</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>b <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">1</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token comment">// test 3</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 报错 c is not a function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-作用域与作用域链" tabindex="-1"><a class="header-anchor" href="#_3-作用域与作用域链"><span>3.作用域与作用域链</span></a></h3><p>理解：就是一块地盘，一个代码段所在的区域，他是静态的（相对于上下文对象）在编写代码时 ，就确定了 分类：全局作用域、函数作用域 作用：隔离变量，不同作用域下同名变量不会有冲突</p><h4 id="作用域与执行上下文区别" tabindex="-1"><a class="header-anchor" href="#作用域与执行上下文区别"><span>作用域与执行上下文区别</span></a></h4><ul><li>区别一 ： <ul><li>全局作用域外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了，而不是在函数调用时</li><li>全局执行上下文环境是在全局作用域确定之后，JS代码马上执行之前创建</li><li>函数执行上下文是在调用函数时，函数体 代码执行之前创建</li></ul></li><li>区别二： <ul><li>作用域 是静态的，只要函数定义好了就一直存在，且不再变化</li><li>执行上下文是动态的，调用函数时创建。函数调用结束 时就会自动释放</li></ul></li><li>联系： <ul><li>执行上下文从属于所在的作用域</li><li>全局上下文环境 ==》全局作用域</li><li>函数上下文环境 ==》对应 的函数作用域</li></ul></li></ul><h4 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链"><span>作用域链</span></a></h4><ul><li><p>多个上下级关系的作用域形成的链，它的方向是从下向上的（从内到外）</p></li><li><p>查找变量时就是沿着作用域链来查找的</p></li><li><p>查找一个变量的查找规则</p><p>1.在当前作用域下的执行上下文中查找对应的属性，如果有直接返回，否则进入 2</p><p>2.在上一级作用域下的执行上下文中查找对应的属性，如果有直接返回，否则进入 3</p><p>3.再次执行 2的相同操作，直到全局作用域，如果还找不到就抛出异常</p></li></ul><h4 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span>面试题</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// test 1</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span>
  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">show</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token comment">// 10</span>

<span class="token comment">// test 2</span>
<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// fn</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fn2</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// fn2 is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-闭包" tabindex="-1"><a class="header-anchor" href="#_4-闭包"><span>4.闭包</span></a></h3><h4 id="_1-引入" tabindex="-1"><a class="header-anchor" href="#_1-引入"><span>1.引入</span></a></h4><p>需求：分别输出对应按钮的索引，并绑定点击事件（循环绑定）</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>测试一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>测试二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>测试三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">button</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// 遍历加监听 这种方式 i 为全局变量，导致无法实现</span>
  <span class="token comment">// for (var i = 0,length = btns.length; i &lt; length; i++) {</span>
  <span class="token comment">//   var btn = btns[i]</span>
  <span class="token comment">//   btn.onclick = function () {</span>
  <span class="token comment">//     alert(\`第 \${i + 1} 个按钮被点击了\`)</span>
  <span class="token comment">//   }</span>
  <span class="token comment">// }</span>

  <span class="token comment">// 解决方式一：将每个btn的索引存储到btn对象上</span>
  <span class="token comment">// for (var i = 0,length = btns.length; i &lt; length; i++) {</span>
  <span class="token comment">//   var btn = btns[i]</span>
  <span class="token comment">//   btn.index = i</span>
  <span class="token comment">//   btn.onclick = function () {</span>
  <span class="token comment">//     alert(\`第 \${this.index + 1} 个按钮被点击了\`)</span>
  <span class="token comment">//   }</span>
  <span class="token comment">// }</span>

  <span class="token comment">// 闭包</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">=</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> btn <span class="token operator">=</span> btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 个按钮被点击了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-理解闭包" tabindex="-1"><a class="header-anchor" href="#_2-理解闭包"><span>2.理解闭包</span></a></h4><p>1.如何产生闭包？</p><ul><li>当一个嵌套的内部（子）函数引用了 嵌套外部（父）函数的变量（函数）时，就产生了闭包</li></ul><p>2.闭包到底是什么？</p><ul><li>使用chrome调试查看</li><li>注意：闭包存在于嵌套的内部函数中</li></ul><p>3.产生闭包的条件</p><ul><li>函数嵌套</li><li>内部函数引用了外部函数的数据（变量/函数 ）</li><li>外部函数调用</li></ul><h4 id="_3-常见的闭包" tabindex="-1"><a class="header-anchor" href="#_3-常见的闭包"><span>3.常见的闭包</span></a></h4><p>1.将函数作为另外一个函数的返回值</p><p>2.将函数作为实参传递给另一个函数调用</p><h4 id="_4-闭包的作用" tabindex="-1"><a class="header-anchor" href="#_4-闭包的作用"><span>4.闭包的作用</span></a></h4><p>1.使函数内部的变量，在函数执行完之后，仍然存活在能存中（延长了局部变量的生命周期）</p><p>2.让函数外部可以操作（读写）到函数内部的数据 （变量/函数）</p><p>问题：</p><p>1.函数执行完 后，函数内部声明的局部变量是否还存在 一般不存在，存在于闭包中的变量才存在</p><p>2.在函数外部能直接访问函数内部的局部变量吗？ 不能，通过闭包可以让外部操作</p><h4 id="_5-闭包的生命周期" tabindex="-1"><a class="header-anchor" href="#_5-闭包的生命周期"><span>5.闭包的生命周期</span></a></h4><p>产生：在嵌套内部函数定义执行完成时就产生了（不是在调用） 死亡：在嵌套内部函数成为垃圾对象时</p><h4 id="_6-闭包的缺点及解决" tabindex="-1"><a class="header-anchor" href="#_6-闭包的缺点及解决"><span>6.闭包的缺点及解决</span></a></h4><p>1.缺点</p><ul><li>函数执行完后，函数内的局部变量没有释放，占用内存时间会变长</li><li>容易造成内存泄漏</li><li>解决： <ul><li>能不用闭包就不用</li><li>及时释放 *</li></ul></li></ul><p>2.内存溢出</p><ul><li>一种程序运行出现的错误</li><li>当程序运行需要的内存超过了剩余的内存时，就会抛出内存溢出的而错误</li></ul><p>3.内存泄漏</p><ul><li>占用的内存没有及时释放</li><li>内存泄露积累多了就容易导致内存溢出</li></ul><p>4.常见的内存泄漏：</p><ul><li>意外的全局变量</li><li>没有及时清理的定时器或回调函数</li><li>闭包</li></ul><h4 id="_7-闭包面试题" tabindex="-1"><a class="header-anchor" href="#_7-闭包面试题"><span>7.闭包面试题</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// test 1</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;this Window&quot;</span>
<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;My object&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getNameFunction</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// this window</span>

<span class="token comment">// test 2</span>
<span class="token keyword">var</span> name2 <span class="token operator">=</span> <span class="token string">&quot;this Window&quot;</span>
<span class="token keyword">var</span> object2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name2</span><span class="token operator">:</span><span class="token string">&#39;My object&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getNameFunction</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> that<span class="token punctuation">.</span>name2
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">alert</span><span class="token punctuation">(</span>object2<span class="token punctuation">.</span><span class="token function">getNameFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// My object</span>

<span class="token comment">//  test 3</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">fun</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined 0 0 0</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// undefined 0 1 2</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// undefined 0 1 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-对象高级" tabindex="-1"><a class="header-anchor" href="#_3-对象高级"><span>3.对象高级</span></a></h2><h3 id="_1-对象创建模式" tabindex="-1"><a class="header-anchor" href="#_1-对象创建模式"><span>1.对象创建模式</span></a></h3><p>方法一：object构造函数模式</p><ul><li>套路：先创建 空 Object对象，在动态添加属性/方法</li><li>使用场景：起始时不确定对象内部数据</li><li>问题：语句太多</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;sola&#39;</span>
p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span>
p<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：对象字面量模式</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;sola&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法三：工厂模式</p><ul><li>套路：通过工厂函数动态创建对象并返回</li><li>适用场景：需要创建多个对象</li><li>问题：对象没有一个具体的类型，都是object类型</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span>  obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span>name<span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span>age<span class="token punctuation">,</span>
    <span class="token function-variable function">setName</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>

<span class="token comment">// 创建两个人</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#39;sola&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#39;piggy&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式四：自定义构造函数模式</p><ul><li>套路：自定义构造函数，通过new创建对象</li><li>适用场景：需要创建多个类型确定的对象</li><li>问题：每个对象都有相同的数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;sola&#39;</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-继承模式" tabindex="-1"><a class="header-anchor" href="#_2-继承模式"><span>2.继承模式</span></a></h3><p>1.原型链继承</p><ol><li>定义父类型构造函数</li><li>给父类型的原型添加方法</li><li>定义子类型的构造函数</li><li>创建父类型的对象赋值给子类型的原型</li><li>将子类型原型的构造属性设置为子类型</li><li>给子类型原型添加方法</li><li>创建子类型对象：可以调用父类型的方法</li></ol><p>关键：子类型的原型指向父类型的一个实例对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类型</span>
<span class="token keyword">function</span> <span class="token function">Supper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>supProp <span class="token operator">=</span> <span class="token string">&#39;Supper property&#39;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Supper</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSupperProp</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>supProp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 子类型</span>
<span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subProp  <span class="token operator">=</span> <span class="token string">&#39;Sub property&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类型的原型为父类型的一个实例对象</span>
<span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//  让子类型的原型constructor指向子类型</span>
<span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub

<span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSubProp</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subProp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.构造函数继承</p><ol><li>定义父类型构造函数</li><li>定义子类型构造函数</li><li>在子类型的构造函数中调用父类型构造函数</li></ol><p>关键：在子类型构造函数中通过call()调用父类型构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.组合式继承</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token comment">// 得到属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price
<span class="token punctuation">}</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//  为了能看到夫类型的方法</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student <span class="token comment">// 修正constructor</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setPrice</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-线程机制与事件机制" tabindex="-1"><a class="header-anchor" href="#_4-线程机制与事件机制"><span>4.线程机制与事件机制</span></a></h2><h3 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程"><span>进程与线程</span></a></h3><p>进程</p><ul><li>程序的一次执行，它占有一片独有的内存空间</li><li>可以通过Windows任务管理器来查看进程</li></ul><p>线程</p><ul><li>是进程内的一个独立单元</li><li>是程序执行的一个完整流程</li><li>是CPU最小的调度单元</li></ul><p>相关知识</p><ul><li>应用程序必须运行在某个进程的某个线程上</li><li>一个进程中至少有一个运行的线程：主线程，进程启动后自动创建</li><li>一个进程中也可以同时运行多个线程，我们会说程序是多线程运行的</li><li>一个进程内的数据可以供其中的多个线程共享</li><li>多个进程间 的数据是不能直接共享的</li><li>线程池 ：保存多个线程对象的容器，实现线程对象的反复利用</li></ul><p>相关问题</p><ul><li>何为多进程？多线程？ <ul><li>多进程运行：一个应用程序可以同时启动多个实例运行</li><li>多线程：在一个进程内，同时有多个线程运行</li></ul></li><li>比较单线程与多线程 <ul><li>多线程： <ul><li>优点 <ul><li>能有效提升CPU的使用率</li><li>创建多线程开销</li></ul></li><li>缺点 <ul><li>线程间切换开销</li><li>死锁与状态同步问题</li></ul></li></ul></li><li>单线程 <ul><li>优点：顺序编程、简单易懂</li><li>缺点：效率低</li></ul></li></ul></li><li>JS是单线程 还是多线程 <ul><li>单线程</li><li>但是使用H5中的Web Workers可以实现多线程运行</li></ul></li><li>浏览器运行是单线程还是多线程 <ul><li>多线程运行的</li></ul></li><li>浏览器运行是单进程还是多进程 <ul><li>多进程 <ul><li>chrome</li><li>新版IE</li></ul></li><li>单进程 <ul><li>firefox</li><li>老板IE</li></ul></li></ul></li></ul><h3 id="浏览器内核" tabindex="-1"><a class="header-anchor" href="#浏览器内核"><span>浏览器内核</span></a></h3><p>支持浏览器运行的最核心的程序</p><p>不同的浏览器可能不一样</p><ul><li>Chrome，Safari：webkit</li><li>Firefox：Gecko</li><li>IE：Trident</li><li>360，搜狗等国内浏览器：Trident+ webkit</li></ul><p>内核由很多模块组成</p><ul><li>js引擎模块：负责js程序的编译与运行</li><li>html，css文档解析模块：负责页面文本的解析</li><li>DOM/CSS模块 ：负责 dom/css在内存中的相关处理</li><li>布局和 渲染模块：负责页面的布局和 效果的绘制（内存中 的对象）</li><li>...</li><li>定时器模块 ：负责定时器的管理</li><li>事件相应模块：负责事件的管理</li><li>网络请求模块 ：负责ajax 的请求</li></ul><h3 id="定时器引发的思考" tabindex="-1"><a class="header-anchor" href="#定时器引发的思考"><span>定时器引发的思考</span></a></h3><p>1.定时器真的是定时执行吗？</p><ul><li>定时器并不能保证真正定时执行</li><li>一般会延迟一丁点（可以接受），也有可能延迟很久（不能接受）</li></ul><p>2.定时器的回调函数是在分线程执行的吗？</p><ul><li>在主线程执行的，js是单线程的</li></ul><p>3.定时器是如何实现的？</p><ul><li>事件循环模型</li></ul><h3 id="js是单线程执行的" tabindex="-1"><a class="header-anchor" href="#js是单线程执行的"><span>JS是单线程执行的</span></a></h3><p>1.如何证明JS是单线程执行的？</p><ul><li>settimeout的回调函数是在主线程执行的</li><li>定时器的回调函数只有在运行栈中的全部执行完后才有可能执行</li></ul><p>2.为什么js要用单线程模式，而不采用多线程模式</p><ul><li>Javascript的单线程与他的用途有关</li><li>作为浏览器脚本语言，Javascript的主要用途是与用户交互，以及操作dom</li><li>这决定了它只能是单线程，否则会带来复杂的同步问题</li></ul><p>3.代码的分类</p><ul><li>初始化代码</li><li>回调代码</li></ul><p>4.JS引擎执行代码的基本流程</p><ul><li>先执行初始化代码：包含一些特别的代码 <ul><li>设置定时器</li><li>绑定监听</li><li>发送ajax请求</li></ul></li><li>后面在某个时刻才会执行回调代码</li></ul><h3 id="浏览器的事件循环模型" tabindex="-1"><a class="header-anchor" href="#浏览器的事件循环模型"><span>浏览器的事件循环模型</span></a></h3><p>1.所有代码分类</p><ul><li>初始化执行代码（同步代码）：包含绑定DOM事件监听，设置定时器，发送ajax请求的代码</li><li>回调执行代码（异步代码）：处理回调逻辑</li></ul><p>2.JS引擎执行代码的基本流程</p><ul><li>初始化代码 ==&gt; 回调代码</li></ul><p>3.模型的两个重要组成部分</p><ul><li>事件管理模块（定时器/DOM事件/Ajax）</li><li>回调队列</li></ul><p>4.模型的运转流程</p><ul><li>执行初始化代码，将事件回调函数交给对应模块管理</li><li>当事件发生时，管理模块会将回调函数及其数据添加到回调队列中</li><li>只有当初始化代码执行完成后（可能需要一定时间），才会遍历读取回调队列中的回调函数执行</li></ul><p>5.相关重要概念</p><p>1.执行栈</p><ul><li>execution stack 所有代码都是在此空间中执行的</li></ul><p>2.浏览器内核</p><ul><li>browser core <ul><li>JS引擎模块</li><li>其他模块</li></ul></li></ul><p>3.任务队列 同一个callback队列</p><p>4.消息队列 同一个callback队列</p><p>5.事件队列 同一个callback队列</p><p>6.事件轮询 event loop</p><ul><li>从任务队列中循环取出回调函数放入执行栈中处理（一个一个）</li></ul><p>7.事件驱动模型</p><p>8.请求响应模型</p><h3 id="h5-web-workers" tabindex="-1"><a class="header-anchor" href="#h5-web-workers"><span>H5 Web Workers</span></a></h3><p>1.H5规范提供了js分线程的实现，取名为 Web Workers。我们可以将一些 大计算量的代码交由web worker运行而不冻结用户界面。但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变 javascript单线程的本质</p><p>2.相关API</p><ul><li>Worker：构造函数，加载分线程执行的js文件</li><li>Worker.prototype.onmessage 用于接收另一个线程的回调函数</li><li>Worker.prototype.postMessage 向另一个线程发消息</li></ul><p>3.不足</p><ul><li>worker内代码不能操作DOM（更新UI）</li><li>不能跨域加载JS</li><li>不是每个浏览器都支持这个新特性</li></ul><p>JS主线程</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>数值<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>计算<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

  <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> number <span class="token operator">=</span> input<span class="token punctuation">.</span>value
    <span class="token comment">// 创建一个worker对象</span>
    <span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;worker.js&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 接收worker传过来的数据</span>
    worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 向worker发送消息</span>
    worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分线程worker.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> <span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> number <span class="token operator">=</span> event<span class="token punctuation">.</span>data
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">分线程接收到主线程发送的数据：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// 计算</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>
  <span class="token function">postMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">分线程向主线程返回的数据：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,243),c=[l];function i(u,r){return t(),p("div",null,c)}const m=a(o,[["render",i],["__file","js知识相关.html.vue"]]),b=JSON.parse(`{"path":"/web/js/js%E7%9F%A5%E8%AF%86%E7%9B%B8%E5%85%B3.html","title":"JS知识相关","lang":"zh-CN","frontmatter":{"title":"JS知识相关","icon":"gears","order":4,"category":["web"],"tag":["js"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"JS知识相关 1.基础总结 1.数据类型 基本数据类型 string：任意字符串 字符串是不可变的，意思是一旦被创建，他们的值就不能变了 number：任意数值 在数值类型中，存在一个特殊数值NaN,意为“不是数值”，用于表示本来要返回数值的操作失败了（而不是抛出错误） Boolean：true、false Boolean类型有两个值：true和fal...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/web/js/js%E7%9F%A5%E8%AF%86%E7%9B%B8%E5%85%B3.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"JS知识相关"}],["meta",{"property":"og:description","content":"JS知识相关 1.基础总结 1.数据类型 基本数据类型 string：任意字符串 字符串是不可变的，意思是一旦被创建，他们的值就不能变了 number：任意数值 在数值类型中，存在一个特殊数值NaN,意为“不是数值”，用于表示本来要返回数值的操作失败了（而不是抛出错误） Boolean：true、false Boolean类型有两个值：true和fal..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blogs/assets/images/web/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-05T10:07:55.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:modified_time","content":"2024-07-05T10:07:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS知识相关\\",\\"image\\":[\\"https://mister-hope.github.io/blogs/assets/images/web/1.png\\",\\"https://mister-hope.github.io/blogs/assets/images/web/2.png\\"],\\"dateModified\\":\\"2024-07-05T10:07:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1.基础总结","slug":"_1-基础总结","link":"#_1-基础总结","children":[{"level":3,"title":"1.数据类型","slug":"_1-数据类型","link":"#_1-数据类型","children":[]},{"level":3,"title":"2.数据、变量与内存","slug":"_2-数据、变量与内存","link":"#_2-数据、变量与内存","children":[]},{"level":3,"title":"3.对象","slug":"_3-对象","link":"#_3-对象","children":[]},{"level":3,"title":"4.函数","slug":"_4-函数","link":"#_4-函数","children":[]},{"level":3,"title":"5.IIFE","slug":"_5-iife","link":"#_5-iife","children":[]},{"level":3,"title":"6.函数中的this","slug":"_6-函数中的this","link":"#_6-函数中的this","children":[]}]},{"level":2,"title":"2.函数高级","slug":"_2-函数高级","link":"#_2-函数高级","children":[{"level":3,"title":"1.原型与原型链","slug":"_1-原型与原型链","link":"#_1-原型与原型链","children":[]},{"level":3,"title":"2.执行上下文与执行上下文栈","slug":"_2-执行上下文与执行上下文栈","link":"#_2-执行上下文与执行上下文栈","children":[]},{"level":3,"title":"3.作用域与作用域链","slug":"_3-作用域与作用域链","link":"#_3-作用域与作用域链","children":[]},{"level":3,"title":"4.闭包","slug":"_4-闭包","link":"#_4-闭包","children":[]}]},{"level":2,"title":"3.对象高级","slug":"_3-对象高级","link":"#_3-对象高级","children":[{"level":3,"title":"1.对象创建模式","slug":"_1-对象创建模式","link":"#_1-对象创建模式","children":[]},{"level":3,"title":"2.继承模式","slug":"_2-继承模式","link":"#_2-继承模式","children":[]}]},{"level":2,"title":"4.线程机制与事件机制","slug":"_4-线程机制与事件机制","link":"#_4-线程机制与事件机制","children":[{"level":3,"title":"进程与线程","slug":"进程与线程","link":"#进程与线程","children":[]},{"level":3,"title":"浏览器内核","slug":"浏览器内核","link":"#浏览器内核","children":[]},{"level":3,"title":"定时器引发的思考","slug":"定时器引发的思考","link":"#定时器引发的思考","children":[]},{"level":3,"title":"JS是单线程执行的","slug":"js是单线程执行的","link":"#js是单线程执行的","children":[]},{"level":3,"title":"浏览器的事件循环模型","slug":"浏览器的事件循环模型","link":"#浏览器的事件循环模型","children":[]},{"level":3,"title":"H5 Web Workers","slug":"h5-web-workers","link":"#h5-web-workers","children":[]}]}],"git":{"createdTime":1719915536000,"updatedTime":1720174075000,"contributors":[{"name":"sola-grj","email":"1131631886@qq.com","commits":2}]},"readingTime":{"minutes":24.45,"words":7336},"filePathRelative":"web/js/js知识相关.md","localizedDate":"2024年7月2日","excerpt":"\\n<h2>1.基础总结</h2>\\n<h3>1.数据类型</h3>\\n<h4><strong>基本数据类型</strong></h4>\\n<ol>\\n<li>\\n<h5>string：任意字符串</h5>\\n<p>字符串是不可变的，意思是一旦被创建，他们的值就不能变了</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'sola'</span>\\nname <span class=\\"token operator\\">=</span> name <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'-grl'</span> <span class=\\"token comment\\">// 先销毁在重建</span>\\n</code></pre></div></li>\\n<li>\\n<h5>number：任意数值</h5>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> intNum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">55</span> <span class=\\"token comment\\">// 10进制的55</span>\\n<span class=\\"token keyword\\">let</span> num1 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">070</span> <span class=\\"token comment\\">// 8进制的56</span>\\n<span class=\\"token keyword\\">let</span> hexNum1 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0xA</span> <span class=\\"token comment\\">//16进制的10</span>\\n\\n<span class=\\"token comment\\">// 浮点类型</span>\\n<span class=\\"token keyword\\">let</span> floatNum1 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1.1</span>\\n<span class=\\"token keyword\\">let</span> floatNum2 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0.1</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> floatNum3 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">.1</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 有效，但不推荐</span>\\n<span class=\\"token keyword\\">let</span> floatNum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3.125e7</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 科学计数法 等于31250000</span>\\n</code></pre></div><p>在数值类型中，存在一个特殊数值<strong>NaN</strong>,意为“不是数值”，用于表示本来要返回数值的操作失败了（而不是抛出错误）</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//NaN</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">0</span><span class=\\"token operator\\">/</span><span class=\\"token operator\\">+</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//NaN</span>\\n</code></pre></div></li>\\n<li>\\n<h5>Boolean：true、false</h5>\\n<p><strong>Boolean</strong>类型有两个值：<strong>true</strong>和<strong>false</strong></p>\\n<p>通过Boolean可以将其他类型的数据转化为布尔值</p>\\n<table>\\n<thead>\\n<tr>\\n<th>数据类型</th>\\n<th>转换为true</th>\\n<th>转换为false</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>String</td>\\n<td>非空字符串</td>\\n<td>\\"\\"</td>\\n</tr>\\n<tr>\\n<td>Number</td>\\n<td>非零数值（包括无穷值）</td>\\n<td>0、NaN</td>\\n</tr>\\n<tr>\\n<td>Object</td>\\n<td>任意对象</td>\\n<td>null</td>\\n</tr>\\n<tr>\\n<td>Undefined</td>\\n<td>N/A（不存在）</td>\\n<td>undefined</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n<li>\\n<h5>null：null</h5>\\n<p><strong>Null</strong>类型同样也只有一个值，即<strong>Null</strong>，逻辑上来说，null值表示一个空对象，这也是给<strong>typeof</strong>传一个<strong>null</strong>会返回<strong>object</strong>的原因</p>\\n</li>\\n<li>\\n<h5>undefined：undefined</h5>\\n<p>undefined类型只有一个值，即特殊的<strong>undefined</strong>，当使用<strong>var</strong>或者<strong>let</strong>声明了变量，但没有初始化的时候，就相当于给变量赋予了undefined</p>\\n</li>\\n<li>\\n<h5>symbol</h5>\\n<p>Symbol是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> genericSymbol <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Symbol</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> otherGenericSymbol <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Symbol</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>genericSymbol <span class=\\"token operator\\">==</span> otherGenericSymbol<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// false</span>\\n<span class=\\"token keyword\\">let</span> fooSymbol <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Symbol</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> otherFooSymbol <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Symbol</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>fooSymbol <span class=\\"token operator\\">==</span> otherFooSymbol<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// false</span>\\n</code></pre></div></li>\\n<li>\\n<h5>bigInt</h5>\\n<p><code>BigInt</code>是一种新的数据类型，用于当整数值大于<code>Number</code>数据类型支持的范围时。这种数据类型允许我们安全地对大整数执行算术操作，表示高分辨率的时间戳，使用大整数id，等等，而不需要使用库。</p>\\n<p>重要的是要记住，不能使用<code>Number</code>和<code>BigInt</code>操作数的混合执行算术运算，需要通过显式转换其中的一种类型。 此外，出于兼容性原因，不允许在<code>BigInt</code>上使用一元加号（<code>+</code>）运算符。</p>\\n<p>JS 中的<code>Number</code>类型只能安全地表示<code>-9007199254740991 (-(2^53-1))</code> 和<code>9007199254740991(2^53-1)</code>之间的整数，任何超出此范围的整数值都可能失去精度。</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">9999999999999999</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">// → 10000000000000000</span>\\n</code></pre></div><p>使用BigInt，应用程序不再需要变通方法或库来安全地表示<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.Min_SAFE_INTEGER</code>之外的整数。 现在可以在标准JS中执行对大整数的算术运算，而不会有精度损失的风险。</p>\\n<p>要创建<code>BigInt</code>，只需在整数的末尾追加n即可。比较:</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">9007199254740995n</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">// → 9007199254740995n</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">9007199254740995</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>     <span class=\\"token comment\\">// → 9007199254740996</span>\\n</code></pre></div><p>或者，可以调用<code>BigInt()</code>构造函数</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token function\\">BigInt</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"9007199254740995\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">// → 9007199254740995n</span>\\n</code></pre></div></li>\\n</ol>","autoDesc":true}`);export{m as comp,b as data};
