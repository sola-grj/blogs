import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as l,c as i,a as n,e as p,b as o,d as s}from"./app-tdQwJvOh.js";const c={},u=s(`<h1 id="beautifulsoup" tabindex="-1"><a class="header-anchor" href="#beautifulsoup"><span>beautifulsoup</span></a></h1><h2 id="一、beautifulsoup-的简单使用" tabindex="-1"><a class="header-anchor" href="#一、beautifulsoup-的简单使用"><span>一、beautifulsoup 的简单使用</span></a></h2><p>简单来说，Beautiful Soup 是 python 的一个库，最主要的功能是从网页抓取数据。官方解释如下：</p><p>Beautiful Soup 提供一些简单的、python 式的函数用来处理导航、搜索、修改分析树等功能。 它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。</p><h3 id="_1、安装" tabindex="-1"><a class="header-anchor" href="#_1、安装"><span>1、安装</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pip install beautifulsoup4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-1-解析器" tabindex="-1"><a class="header-anchor" href="#_1-1-解析器"><span><strong>1.1 解析器</strong></span></a></h4><p>Beautiful Soup 支持 Python 标准库中的 HTML 解析器,还支持一些第三方的解析器，如果我们不安装它，则 Python 会使用 Python 默认的解析器，lxml 解析器更加强大，速度更快，推荐安装。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>pip install lxml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-2-解析器对比" tabindex="-1"><a class="header-anchor" href="#_1-2-解析器对比"><span>1.2 解析器对比</span></a></h4>`,10),d={href:"http://beautifulsoup.readthedocs.io/zh_CN/latest/",target:"_blank",rel:"noopener noreferrer"},r=s(`<h3 id="_2、快速开始" tabindex="-1"><a class="header-anchor" href="#_2、快速开始"><span>2、快速开始</span></a></h3><p>下面的一段 HTML 代码将作为例子被多次用到.这是 <em>爱丽丝梦游仙境的</em> 的一段内容(以后内容中简称为 <em>爱丽丝</em> 的文档):</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/p&gt;

&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were
&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,
&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and
&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;
and they lived at the bottom of a well.&lt;/p&gt;

&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 BeautifulSoup 解析这段代码,能够得到一个 <code>BeautifulSoup</code> 的对象,并能按照标准的缩进格式的结构输出:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># html进行美化</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配代码</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>
   The Dormouse&#39;s story
  <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;title&quot;</span><span class="token operator">&gt;</span>
   <span class="token operator">&lt;</span>b<span class="token operator">&gt;</span>
    The Dormouse&#39;s story
   <span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;story&quot;</span><span class="token operator">&gt;</span>
   Once upon a time there were three little sisters<span class="token punctuation">;</span> <span class="token keyword">and</span> their names were
   <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;sister&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;http://example.com/elsie&quot;</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;link1&quot;</span><span class="token operator">&gt;</span>
    Elsie
   <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
   <span class="token punctuation">,</span>
   <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;sister&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;http://example.com/lacie&quot;</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;link2&quot;</span><span class="token operator">&gt;</span>
    Lacie
   <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
   <span class="token keyword">and</span>
   <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;sister&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;http://example.com/tillie&quot;</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;link3&quot;</span><span class="token operator">&gt;</span>
    Tillie
   <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
   <span class="token punctuation">;</span>
<span class="token keyword">and</span> they lived at the bottom of a well<span class="token punctuation">.</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;story&quot;</span><span class="token operator">&gt;</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几个简单的浏览结构化数据的方法:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>title  <span class="token comment"># 获取标签title</span>
<span class="token comment"># &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>

soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>name   <span class="token comment"># 获取标签名称</span>
<span class="token comment"># &#39;title&#39;</span>

soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string   <span class="token comment"># 获取标签title内的内容</span>
<span class="token comment"># &#39;The Dormouse&#39;s story&#39;</span>

soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>parent  <span class="token comment"># 获取父级标签</span>

soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name  <span class="token comment"># 获取父级标签名称</span>
<span class="token comment"># &#39;head&#39;</span>

soup<span class="token punctuation">.</span>p
<span class="token comment"># &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/p&gt;</span>

soup<span class="token punctuation">.</span>p<span class="token punctuation">[</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 获取p的class属性值</span>
<span class="token comment"># &#39;title&#39;</span>

soup<span class="token punctuation">.</span>a
<span class="token comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span>

soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span>
<span class="token comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span>
<span class="token comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span>

soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;link3&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取id为link3的标签</span>
<span class="token comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从文档中找到所有&lt;a&gt;标签的链接:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> link <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># http://example.com/elsie</span>
    <span class="token comment"># http://example.com/lacie</span>
    <span class="token comment"># http://example.com/tillie</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从文档中获取所有文字内容:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3、如何使用" tabindex="-1"><a class="header-anchor" href="#_3、如何使用"><span>3、如何使用</span></a></h3><p>将一段文档传入 BeautifulSoup 的构造方法,就能得到一个文档的对象, 可以传入一段字符串或一个文件句柄.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">&quot;&lt;html&gt;data&lt;/html&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后,Beautiful Soup 选择最合适的解析器来解析这段文档,如果手动指定解析器那么 Beautiful Soup 会选择指定的解析器来解析文档。</p><h2 id="二、beautifulsoup-的遍历文档树" tabindex="-1"><a class="header-anchor" href="#二、beautifulsoup-的遍历文档树"><span>二、beautifulsoup 的遍历文档树</span></a></h2><p>还拿”爱丽丝梦游仙境”的文档来做例子:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;
&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/p&gt;

&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were
&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,
&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and
&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;
and they lived at the bottom of a well.&lt;/p&gt;

&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;
&quot;&quot;&quot;</span>

<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token comment"># lxml和html.parser解析的有时候会根据html是否完整而有解析不同的问题，需要注意</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">&#39;html.parser&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这段例子来演示怎样从文档的一段内容找到另一段内容</p><h3 id="_1、子节点" tabindex="-1"><a class="header-anchor" href="#_1、子节点"><span>1、子节点</span></a></h3><p>一个 Tag 可能包含多个字符串或其它的 Tag,这些都是这个 Tag 的子节点.Beautiful Soup 提供了许多操作和遍历子节点的属性.</p><p>注意: Beautiful Soup 中字符串节点不支持这些属性,因为字符串没有子节点。</p><h4 id="_1-1-contents" tabindex="-1"><a class="header-anchor" href="#_1-1-contents"><span>1.1 .contents</span></a></h4><p>tag 的 <code>.contents</code> 属性可以将 tag 的子节点以列表的方式输出:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>head_tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>head
head_tag
<span class="token comment"># &lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;</span>

head_tag<span class="token punctuation">.</span>contents
<span class="token punctuation">[</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>The Dormouse&#39;s story<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token punctuation">]</span>

title_tag <span class="token operator">=</span> head_tag<span class="token punctuation">.</span>contents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
title_tag
<span class="token comment"># &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>
title_tag<span class="token punctuation">.</span>contents
<span class="token comment"># [u&#39;The Dormouse&#39;s story&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串没有 <code>.contents</code> 属性,因为字符串没有子节点:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>text <span class="token operator">=</span> title_tag<span class="token punctuation">.</span>contents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
text<span class="token punctuation">.</span>contents
<span class="token comment"># AttributeError: &#39;NavigableString&#39; object has no attribute &#39;contents&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、-节点内容" tabindex="-1"><a class="header-anchor" href="#_2、-节点内容"><span>2、 节点内容</span></a></h3><h4 id="_2-1-string" tabindex="-1"><a class="header-anchor" href="#_2-1-string"><span>2.1 .string</span></a></h4><p>如果 tag 只有一个 <code>NavigableString</code> 类型子节点,那么这个 tag 可以使用 <code>.string</code> 得到子节点。如果一个 tag 仅有一个子节点,那么这个 tag 也可以使用 <code>.string</code> 方法,输出结果与当前唯一子节点的 <code>.string</code> 结果相同。</p><p>通俗点说就是：如果一个标签里面没有标签了，那么 .string 就会返回标签里面的内容。如果标签里面只有唯一的一个标签了，那么 .string 也会返回最里面的内容。例如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span> <span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
<span class="token comment">#The Dormouse&#39;s story</span>
<span class="token comment"># &lt;title&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/title&gt;</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
<span class="token comment">#The Dormouse&#39;s story</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 tag 包含了多个子节点,tag 就无法确定，string 方法应该调用哪个子节点的内容, .string 的输出结果是 None</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span> <span class="token punctuation">(</span>soup<span class="token punctuation">.</span>html<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
<span class="token comment">#None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-text" tabindex="-1"><a class="header-anchor" href="#_2-2-text"><span>2.2 .text</span></a></h4><p>如果 tag 包含了多个子节点, text 则会返回内部所有文本内容</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>print (soup.html.text)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong></p><p>strings 和 text 都可以返回所有文本内容</p><p>区别：text 返回内容为字符串类型 strings 为生成器 generator</p><h3 id="_3、-多个内容" tabindex="-1"><a class="header-anchor" href="#_3、-多个内容"><span>3、 <strong>多个内容</strong></span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>.strings .stripped_strings 属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-1-strings" tabindex="-1"><a class="header-anchor" href="#_3-1-strings"><span>3.1**.strings**</span></a></h4><p>获取多个内容，不过需要遍历获取，比如下面的例子：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> string <span class="token keyword">in</span> soup<span class="token punctuation">.</span>strings<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token triple-quoted-string string">&#39;&#39;&#39;
  &#39;\\n&#39;
&quot;The Dormouse&#39;s story&quot;
&#39;\\n&#39;
&#39;\\n&#39;
&quot;The Dormouse&#39;s story&quot;
&#39;\\n&#39;
&#39;Once upon a time there were three little sisters; and their names were\\n&#39;
&#39;Elsie&#39;
&#39;,\\n&#39;
&#39;Lacie&#39;
&#39; and\\n&#39;
&#39;Tillie&#39;
&#39;;\\nand they lived at the bottom of a well.&#39;
&#39;\\n&#39;
&#39;...&#39;
&#39;\\n&#39;

&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-stripped-strings" tabindex="-1"><a class="header-anchor" href="#_3-2-stripped-strings"><span>3.2 <strong>.stripped_strings</strong></span></a></h4><p>输出的字符串中可能包含了很多空格或空行,使用 <code>.stripped_strings</code> 可以去除多余空白内容</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> string <span class="token keyword">in</span> soup<span class="token punctuation">.</span>stripped_strings<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token triple-quoted-string string">&#39;&#39;&#39;

&quot;The Dormouse&#39;s story&quot;
&quot;The Dormouse&#39;s story&quot;
&#39;Once upon a time there were three little sisters; and their names were&#39;
&#39;Elsie&#39;
&#39;,&#39;
&#39;Lacie&#39;
&#39;and&#39;
&#39;Tillie&#39;
&#39;;\\nand they lived at the bottom of a well.&#39;
&#39;...&#39;

&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、-父节点" tabindex="-1"><a class="header-anchor" href="#_4、-父节点"><span>4、 父节点</span></a></h3><p>继续分析文档树,每个 tag 或字符串都有父节点:被包含在某个 tag 中</p><h4 id="_4-1-parent" tabindex="-1"><a class="header-anchor" href="#_4-1-parent"><span>4.1 .parent</span></a></h4><p>通过 <code>.parent</code> 属性来获取某个元素的父节点.在例子“爱丽丝”的文档中,&lt;head&gt;标签是&lt;title&gt;标签的父节点:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>title_tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>title
title_tag
<span class="token comment"># &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>
title_tag<span class="token punctuation">.</span>parent
<span class="token comment"># &lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文档的顶层节点比如&lt;html&gt;的父节点是 <code>BeautifulSoup</code> 对象:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>html_tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>html
<span class="token builtin">type</span><span class="token punctuation">(</span>html_tag<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;bs4.BeautifulSoup&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、beautifulsoup-的搜索文档树" tabindex="-1"><a class="header-anchor" href="#三、beautifulsoup-的搜索文档树"><span>三、beautifulsoup 的搜索文档树</span></a></h2><h3 id="_1、find-all" tabindex="-1"><a class="header-anchor" href="#_1、find-all"><span>1、find_all</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>find_all<span class="token punctuation">(</span> name <span class="token punctuation">,</span> attrs <span class="token punctuation">,</span> recursive <span class="token punctuation">,</span> string <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>find_all()</code> 方法搜索当前 tag 的所有 tag 子节点,并判断是否符合过滤器的条件:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;]</span>

soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/p&gt;]</span>

soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span>
<span class="token comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span>
<span class="token comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span>

soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;link2&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span>

<span class="token keyword">import</span> re
<span class="token comment"># 模糊查询 包含sisters的就可以</span>
soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>string<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;sisters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Once upon a time there were three little sisters; and their names were\\n&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有几个方法很相似,还有几个方法是新的,参数中的 <code>string</code> 和 <code>id</code> 是什么含义? 为什么 <code>find_all(&quot;p&quot;, &quot;title&quot;)</code> 返回的是 CSS Class 为”title”的&lt;p&gt;标签? 我们来仔细看一下 <code>find_all()</code> 的参数.</p><h4 id="_1-1-name-参数" tabindex="-1"><a class="header-anchor" href="#_1-1-name-参数"><span>1.1 name 参数</span></a></h4><p><code>name</code> 参数可以查找所有名字为 <code>name</code> 的 tag,字符串对象会被自动忽略掉.</p><p>简单的用法如下:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>搜索 <code>name</code> 参数的值可以使任一类型的 过滤器 ,字符串,正则表达式,列表,方法或是 <code>True</code> .</p><p><strong>&lt;1&gt; 传字符串</strong></p><p>最简单的过滤器是字符串.在搜索方法中传入一个字符串参数,Beautiful Soup 会查找与字符串完整匹配的内容,下面的例子用于查找文档中所有的<code>&lt;b&gt;</code>标签</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>&lt;2&gt; 传正则表达式</strong></p><p>如果传入正则表达式作为参数,Beautiful Soup 会通过正则表达式的 <code>match()</code> 来匹配内容.下面例子中找出所有以 b 开头的标签,这表示&lt;body&gt;和&lt;b&gt;标签都应该被找到</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re
<span class="token keyword">for</span> tag <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;^b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token comment"># body</span>
<span class="token comment"># b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>&lt;3&gt; 传列表</strong></p><p>如果传入列表参数,Beautiful Soup 会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有&lt;a&gt;标签和&lt;b&gt;标签</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;,</span>
<span class="token comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span>
<span class="token comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span>
<span class="token comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-keyword-参数" tabindex="-1"><a class="header-anchor" href="#_1-2-keyword-参数"><span>1.2 <strong>keyword 参数</strong></span></a></h4><p>如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字 tag 的属性来搜索,如果包含一个名字为 <code>id</code> 的参数,Beautiful Soup 会搜索每个 tag 的”id”属性.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;link2&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span>

<span class="token keyword">import</span> re
<span class="token comment"># 超链接包含elsie标签</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;elsie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]</span>
<span class="token comment"># 以The作为开头的字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;^The&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [&quot;The Dormouse&#39;s story&quot;, &quot;The Dormouse&#39;s story&quot;]</span>
<span class="token comment"># class选择器包含st的节点</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;st&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>搜索指定名字的属性时可以使用的参数值包括 字符串 , 正则表达式 , 列表, True .</p><p>下面的例子在文档树中查找所有包含 <code>id</code> 属性的 tag,无论 <code>id</code> 的值是什么:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span>
<span class="token comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span>
<span class="token comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用多个指定名字的参数可以同时过滤 tag 的多个属性:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;elsie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;link1&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;three&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们想用 class 过滤，不过 class 是 python 的关键词，这怎么办？加个下划线就可以</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">&quot;sister&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,
&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,
&lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;
]

&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>find_all()</code> 方法的 <code>attrs</code> 参数定义一个字典参数来搜索包含特殊属性的 tag:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>data_soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;data-foo&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;div data-foo=&quot;value&quot;&gt;foo!&lt;/div&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：如何查看条件 id 和 class 同时存在时的写法</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">&quot;story&quot;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;story&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-text-参数" tabindex="-1"><a class="header-anchor" href="#_1-3-text-参数"><span>1.3 <strong>text 参数</strong></span></a></h4><p>通过 <code>text</code> 参数可以搜搜文档中的字符串内容.与 <code>name</code> 参数的可选值一样, <code>text</code> 参数接受 字符串 , 正则表达式 , 列表, True</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">&quot;Elsie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [&#39;Elsie&#39;]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;Tillie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Elsie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lacie&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [&#39;Elsie&#39;, &#39;Lacie&#39;, &#39;Tillie&#39;]</span>

<span class="token comment"># 只要包含Dormouse就可以</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;Dormouse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [&quot;The Dormouse&#39;s story&quot;, &quot;The Dormouse&#39;s story&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-limit-参数" tabindex="-1"><a class="header-anchor" href="#_1-4-limit-参数"><span>1.4 <strong>limit 参数</strong></span></a></h4><p><code>find_all()</code> 方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用 <code>limit</code> 参数限制返回结果的数量.效果与 SQL 中的 limit 关键字类似,当搜索到的结果数量达到 <code>limit</code> 的限制时,就停止搜索返回结果.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,
&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、find" tabindex="-1"><a class="header-anchor" href="#_2、find"><span>2、find()</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>find<span class="token punctuation">(</span> name <span class="token punctuation">,</span> attrs <span class="token punctuation">,</span> recursive <span class="token punctuation">,</span> string <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>find_all()</code> 方法将返回文档中符合条件的所有 tag,尽管有时候我们只想得到一个结果.比如文档中只有一个&lt;body&gt;标签,那么使用 <code>find_all()</code> 方法来查找&lt;body&gt;标签就不太合适, 使用 <code>find_all</code> 方法并设置 <code>limit=1</code> 参数不如直接使用 <code>find()</code> 方法.下面两行代码是等价的:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> limit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;]</span>

soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>唯一的区别是 <code>find_all()</code> 方法的返回结果是值包含一个元素的列表,而 <code>find()</code> 方法直接返回结果.</p><p><code>find_all()</code> 方法没有找到目标是返回空列表, <code>find()</code> 方法找不到目标时,返回 <code>None</code> .</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;nosuchtag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>soup.head.title</code> 是 tag 的名字 方法的简写.这个简写的原理就是多次调用当前 tag 的 <code>find()</code> 方法:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title
<span class="token comment"># &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>

soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、beautifulsoup-的-css-选择器" tabindex="-1"><a class="header-anchor" href="#四、beautifulsoup-的-css-选择器"><span>四、beautifulsoup 的 css 选择器</span></a></h2><p>我们在写 CSS 时，标签名不加任何修饰，类名前加点，id 名前加 #，在这里我们也可以利用类似的方法来筛选元素，用到的方法是 **soup.select()，**返回类型是 <strong>list</strong></p><h3 id="_1、通过标签名查找" tabindex="-1"><a class="header-anchor" href="#_1、通过标签名查找"><span>1、通过标签名查找</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#[&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#[&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、通过类名查找" tabindex="-1"><a class="header-anchor" href="#_2、通过类名查找"><span>2、通过类名查找</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&quot;.sister&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,
&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,
&lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]

&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、id-名查找" tabindex="-1"><a class="header-anchor" href="#_3、id-名查找"><span>3、id 名查找</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&quot;#link1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、组合查找" tabindex="-1"><a class="header-anchor" href="#_4、组合查找"><span>4、组合查找</span></a></h3><p>组合查找即和写 class 文件时，标签名与类名、id 名进行的组合原理是一样的，例如查找 p 标签中，id 等于 link1 的内容，二者需要用空格分开</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&quot;p #link2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接子标签查找</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&quot;p &gt; #link2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查找既有 class 也有 id 选择器的标签</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>a_string = soup.select(&quot;.story#test&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查找有多个 class 选择器的标签</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>a_string = soup.select(&quot;.story.test&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查找有多个 class 选择器和一个 id 选择器的标签</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>a_string = soup.select(&quot;.story.test#book&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5、属性查找" tabindex="-1"><a class="header-anchor" href="#_5、属性查找"><span>5、属性查找</span></a></h3><p>查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&quot;a[href=&#39;http://example.com/tillie&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>select 方法返回的结果都是列表形式，可以遍历形式输出，然后用 get_text() 方法来获取它的内容：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> title <span class="token keyword">in</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span>title<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
Elsie
Lacie
Tillie
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,130);function m(v,k){const a=e("ExternalLinkIcon");return l(),i("div",null,[u,n("p",null,[n("a",d,[p("官网文档"),o(a)])]),r])}const h=t(c,[["render",m],["__file","bs4解析.html.vue"]]),q=JSON.parse('{"path":"/python/spider/bs4%E8%A7%A3%E6%9E%90.html","title":"bs4解析","lang":"zh-CN","frontmatter":{"title":"bs4解析","icon":"gears","order":4,"category":["python"],"tag":["正则表达式"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"beautifulsoup 一、beautifulsoup 的简单使用 简单来说，Beautiful Soup 是 python 的一个库，最主要的功能是从网页抓取数据。官方解释如下： Beautiful Soup 提供一些简单的、python 式的函数用来处理导航、搜索、修改分析树等功能。 它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/python/spider/bs4%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"bs4解析"}],["meta",{"property":"og:description","content":"beautifulsoup 一、beautifulsoup 的简单使用 简单来说，Beautiful Soup 是 python 的一个库，最主要的功能是从网页抓取数据。官方解释如下： Beautiful Soup 提供一些简单的、python 式的函数用来处理导航、搜索、修改分析树等功能。 它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-20T09:01:53.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"正则表达式"}],["meta",{"property":"article:modified_time","content":"2025-01-20T09:01:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"bs4解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-20T09:01:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、beautifulsoup 的简单使用","slug":"一、beautifulsoup-的简单使用","link":"#一、beautifulsoup-的简单使用","children":[{"level":3,"title":"1、安装","slug":"_1、安装","link":"#_1、安装","children":[]},{"level":3,"title":"2、快速开始","slug":"_2、快速开始","link":"#_2、快速开始","children":[]},{"level":3,"title":"3、如何使用","slug":"_3、如何使用","link":"#_3、如何使用","children":[]}]},{"level":2,"title":"二、beautifulsoup 的遍历文档树","slug":"二、beautifulsoup-的遍历文档树","link":"#二、beautifulsoup-的遍历文档树","children":[{"level":3,"title":"1、子节点","slug":"_1、子节点","link":"#_1、子节点","children":[]},{"level":3,"title":"2、 节点内容","slug":"_2、-节点内容","link":"#_2、-节点内容","children":[]},{"level":3,"title":"3、 多个内容","slug":"_3、-多个内容","link":"#_3、-多个内容","children":[]},{"level":3,"title":"4、 父节点","slug":"_4、-父节点","link":"#_4、-父节点","children":[]}]},{"level":2,"title":"三、beautifulsoup 的搜索文档树","slug":"三、beautifulsoup-的搜索文档树","link":"#三、beautifulsoup-的搜索文档树","children":[{"level":3,"title":"1、find_all","slug":"_1、find-all","link":"#_1、find-all","children":[]},{"level":3,"title":"2、find()","slug":"_2、find","link":"#_2、find","children":[]}]},{"level":2,"title":"四、beautifulsoup 的 css 选择器","slug":"四、beautifulsoup-的-css-选择器","link":"#四、beautifulsoup-的-css-选择器","children":[{"level":3,"title":"1、通过标签名查找","slug":"_1、通过标签名查找","link":"#_1、通过标签名查找","children":[]},{"level":3,"title":"2、通过类名查找","slug":"_2、通过类名查找","link":"#_2、通过类名查找","children":[]},{"level":3,"title":"3、id 名查找","slug":"_3、id-名查找","link":"#_3、id-名查找","children":[]},{"level":3,"title":"4、组合查找","slug":"_4、组合查找","link":"#_4、组合查找","children":[]},{"level":3,"title":"5、属性查找","slug":"_5、属性查找","link":"#_5、属性查找","children":[]}]}],"git":{"createdTime":1737363713000,"updatedTime":1737363713000,"contributors":[{"name":"garry","email":"Garryg@ecinnovations.com","commits":1}]},"readingTime":{"minutes":11.86,"words":3558},"filePathRelative":"python/spider/bs4解析.md","localizedDate":"2025年1月20日","excerpt":"\\n<h2>一、beautifulsoup 的简单使用</h2>\\n<p>简单来说，Beautiful Soup 是 python 的一个库，最主要的功能是从网页抓取数据。官方解释如下：</p>\\n<p>Beautiful Soup 提供一些简单的、python 式的函数用来处理导航、搜索、修改分析树等功能。\\n它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。</p>\\n<h3>1、安装</h3>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>pip install beautifulsoup4\\n</code></pre></div>","autoDesc":true}');export{h as comp,q as data};
