import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,d as e}from"./app-tdQwJvOh.js";const t="/blogs/assets/images/node/nestjs/58.png",o="/blogs/assets/images/node/nestjs/59.png",p="/blogs/assets/images/node/nestjs/60.png",i="/blogs/assets/images/node/nestjs/61.png",c={},r=e(`<h4 id="_1-orm-框架-typeorm" tabindex="-1"><a class="header-anchor" href="#_1-orm-框架-typeorm"><span>1.ORM 框架（typeOrm）</span></a></h4><p>typeOrm  是  <code>TypeScript</code>  中最成熟的对象关系映射器( <code>ORM</code> )。因为它是用  <code>TypeScript</code>  编写的，所以可以很好地与  <code>Nest</code>  框架集成</p><p>安装依赖</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code>npm install --save @nestjs/typeorm typeorm mysql2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果使用的是 vsCode 安装数据库可视化工具</p><figure><img src="`+t+'" alt="数据库" tabindex="0" loading="lazy"><figcaption>数据库</figcaption></figure><p>在 app.module.ts 注册</p><figure><img src="'+o+`" alt="数据库" tabindex="0" loading="lazy"><figcaption>数据库</figcaption></figure><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>

type<span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span> <span class="token comment">//数据库类型</span>

username<span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token comment">//账号</span>

password<span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> <span class="token comment">//密码</span>

host<span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> <span class="token comment">//host</span>

port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> <span class="token comment">//</span>

database<span class="token operator">:</span> <span class="token string">&quot;portal&quot;</span><span class="token punctuation">,</span> <span class="token comment">//库名</span>

entities<span class="token operator">:</span> <span class="token punctuation">[</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/**/*.entity{.ts,.js}&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//实体文件</span>

synchronize<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//synchronize字段代表是否自动将实体类同步到数据库</span>

retryDelay<span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token comment">//重试连接数据库间隔</span>

retryAttempts<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token comment">//重试连接数据库的次数</span>

autoLoadEntities<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//如果为true,将自动加载实体 forFeature()方法注册的每个实体都将自动添加到配置对象的实体数组中</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义实体</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> PrimaryGeneratedColumn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Guard</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryGeneratedColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="数据库" tabindex="0" loading="lazy"><figcaption>数据库</figcaption></figure><p>关联实体</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code> TypeOrmModule.<span class="token function">forFeature</span><span class="token punctuation">(</span>[Guard]<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="数据库" tabindex="0" loading="lazy"><figcaption>数据库</figcaption></figure>',15),l=[r];function d(u,m){return n(),a("div",null,l)}const k=s(c,[["render",d],["__file","nestjs 连接数据库.html.vue"]]),b=JSON.parse('{"path":"/node/nestjs/nestjs%20%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.html","title":"nestjs 连接数据库","lang":"zh-CN","frontmatter":{"title":"nestjs 连接数据库","icon":"gears","order":4,"category":["node"],"tag":["nestjs"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"1.ORM 框架（typeOrm） typeOrm 是 TypeScript 中最成熟的对象关系映射器( ORM )。因为它是用 TypeScript 编写的，所以可以很好地与 Nest 框架集成 安装依赖 如果使用的是 vsCode 安装数据库可视化工具 数据库数据库 在 app.module.ts 注册 数据库数据库 定义实体 数据库数据库 关联实...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/node/nestjs/nestjs%20%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"nestjs 连接数据库"}],["meta",{"property":"og:description","content":"1.ORM 框架（typeOrm） typeOrm 是 TypeScript 中最成熟的对象关系映射器( ORM )。因为它是用 TypeScript 编写的，所以可以很好地与 Nest 框架集成 安装依赖 如果使用的是 vsCode 安装数据库可视化工具 数据库数据库 在 app.module.ts 注册 数据库数据库 定义实体 数据库数据库 关联实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blogs/assets/images/node/nestjs/58.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-13T07:14:15.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"nestjs"}],["meta",{"property":"article:modified_time","content":"2025-01-13T07:14:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nestjs 连接数据库\\",\\"image\\":[\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/58.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/59.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/60.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/61.png\\"],\\"dateModified\\":\\"2025-01-13T07:14:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1736752455000,"updatedTime":1736752455000,"contributors":[{"name":"garry","email":"Garryg@ecinnovations.com","commits":1}]},"readingTime":{"minutes":0.96,"words":287},"filePathRelative":"node/nestjs/nestjs 连接数据库.md","localizedDate":"2025年1月13日","excerpt":"<h4>1.ORM 框架（typeOrm）</h4>\\n<p>typeOrm&nbsp; 是 &nbsp;<code>TypeScript</code>&nbsp; 中最成熟的对象关系映射器(&nbsp;<code>ORM</code>&nbsp;)。因为它是用 &nbsp;<code>TypeScript</code>&nbsp; 编写的，所以可以很好地与 &nbsp;<code>Nest</code>&nbsp; 框架集成</p>\\n<p>安装依赖</p>\\n<div class=\\"language-scss\\" data-ext=\\"scss\\" data-title=\\"scss\\"><pre class=\\"language-scss\\"><code>npm install --save @nestjs/typeorm typeorm mysql2\\n</code></pre></div>","autoDesc":true}');export{k as comp,b as data};
