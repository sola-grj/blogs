import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c as p,a as n,e as s,b as c,d as l}from"./app-tdQwJvOh.js";const i="/blogs/assets/images/node/nestjs/42.png",r="/blogs/assets/images/node/nestjs/43.png",u={},d=n("h4",{id:"守卫-guard",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#守卫-guard"},[n("span",null,"守卫（guard）")])],-1),k={href:"https://so.csdn.net/so/search?q=%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"Express",-1),v=n("code",null,"token",-1),g=n("code",null,"request",-1),b=l(`<p><strong>tips  守卫在每个中间件之后执行，但在任何拦截器或管道之前执行。</strong></p><h4 id="创建一个守卫" tabindex="-1"><a class="header-anchor" href="#创建一个守卫"><span>创建一个守卫</span></a></h4><div class="language-less line-numbers-mode" data-ext="less" data-title="less"><pre class="language-less"><code>nest g gu [name]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>守卫要求实现函数   给定参数 context<strong>执行上下文</strong> 要求返回布尔值 <img src="`+i+'" alt="管道" loading="lazy"></p><h4 id="controller-使用守卫" tabindex="-1"><a class="header-anchor" href="#controller-使用守卫"><span>Controller 使用守卫</span></a></h4><ul><li>使用 UseGuards  控制守卫 <img src="'+r+`" alt="管道" loading="lazy"></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Post<span class="token punctuation">,</span> Body<span class="token punctuation">,</span> Patch<span class="token punctuation">,</span> Param<span class="token punctuation">,</span> Delete <span class="token punctuation">,</span>UseGuards<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;guard&#39;</span><span class="token punctuation">)</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">UseGuards</span></span><span class="token punctuation">(</span>RoleGuard<span class="token punctuation">)</span>

xxxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局守卫" tabindex="-1"><a class="header-anchor" href="#全局守卫"><span>全局守卫</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span><span class="token function">useGlobalGuards</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoleGuard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="针对角色控制守卫" tabindex="-1"><a class="header-anchor" href="#针对角色控制守卫"><span>针对角色控制守卫</span></a></h4><p>SetMetadata 装饰器</p><p>第一个参数为 key，第二个参数自定义我们的例子是数组存放的权限</p><p>guard  使用   Reflector 反射读取 setMetaData 的值 去做判断这边例子是从 url 判断有没有 admin 权限</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CanActivate<span class="token punctuation">,</span> ExecutionContext<span class="token punctuation">,</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Reflector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RoleGuard</span> <span class="token keyword">implements</span> <span class="token class-name">CanActivate</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> Reflector<span class="token operator">:</span> Reflector<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">canActivate</span><span class="token punctuation">(</span>
    context<span class="token operator">:</span> ExecutionContext
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Observable<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> admin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Reflector<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> request <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span>Request<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>role <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function h(y,f){const a=e("ExternalLinkIcon");return o(),p("div",null,[d,n("p",null,[s("守卫有一个单独的责任。它们根据运行时出现的某些条件（例如权限，角色，"),n("a",k,[s("访问控制列表"),c(a)]),s("等）来确定给定的请求是否由路由处理程序处理。这通常称为授权。在传统的  "),m,s("  应用程序中，通常由中间件处理授权(以及认证)。中间件是身份验证的良好选择，因为诸如  "),v,s("  验证或添加属性到  "),g,s("  对象上与特定路由(及其元数据)没有强关联。")]),b])}const E=t(u,[["render",h],["__file","nestjs 守卫.html.vue"]]),w=JSON.parse('{"path":"/node/nestjs/nestjs%20%E5%AE%88%E5%8D%AB.html","title":"nestjs 守卫","lang":"zh-CN","frontmatter":{"title":"nestjs 守卫","icon":"gears","order":4,"category":["node"],"tag":["nestjs"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"守卫（guard） 守卫有一个单独的责任。它们根据运行时出现的某些条件（例如权限，角色，访问控制列表等）来确定给定的请求是否由路由处理程序处理。这通常称为授权。在传统的 Express 应用程序中，通常由中间件处理授权(以及认证)。中间件是身份验证的良好选择，因为诸如 token 验证或添加属性到 request 对象上与特定路由(及其元数据)没有强关...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/node/nestjs/nestjs%20%E5%AE%88%E5%8D%AB.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"nestjs 守卫"}],["meta",{"property":"og:description","content":"守卫（guard） 守卫有一个单独的责任。它们根据运行时出现的某些条件（例如权限，角色，访问控制列表等）来确定给定的请求是否由路由处理程序处理。这通常称为授权。在传统的 Express 应用程序中，通常由中间件处理授权(以及认证)。中间件是身份验证的良好选择，因为诸如 token 验证或添加属性到 request 对象上与特定路由(及其元数据)没有强关..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blogs/assets/images/node/nestjs/42.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-13T07:14:15.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"nestjs"}],["meta",{"property":"article:modified_time","content":"2025-01-13T07:14:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nestjs 守卫\\",\\"image\\":[\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/42.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/43.png\\"],\\"dateModified\\":\\"2025-01-13T07:14:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1736752455000,"updatedTime":1736752455000,"contributors":[{"name":"garry","email":"Garryg@ecinnovations.com","commits":1}]},"readingTime":{"minutes":1.43,"words":429},"filePathRelative":"node/nestjs/nestjs 守卫.md","localizedDate":"2025年1月13日","excerpt":"<h4>守卫（guard）</h4>\\n<p>守卫有一个单独的责任。它们根据运行时出现的某些条件（例如权限，角色，<a href=\\"https://so.csdn.net/so/search?q=%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">访问控制列表</a>等）来确定给定的请求是否由路由处理程序处理。这通常称为授权。在传统的 &nbsp;<code>Express</code>&nbsp; 应用程序中，通常由中间件处理授权(以及认证)。中间件是身份验证的良好选择，因为诸如 &nbsp;<code>token</code>&nbsp; 验证或添加属性到 &nbsp;<code>request</code>&nbsp; 对象上与特定路由(及其元数据)没有强关联。</p>","autoDesc":true}');export{E as comp,w as data};
