import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as i,a as s,e as n,b as e,d as r}from"./app-tdQwJvOh.js";const c="/blogs/assets/images/node/nestjs/22.png",l="/blogs/assets/images/node/nestjs/23.png",u="/blogs/assets/images/node/nestjs/24.png",d="/blogs/assets/images/node/nestjs/25.png",g="/blogs/assets/images/node/nestjs/26.png",m="/blogs/assets/images/node/nestjs/27.png",k="/blogs/assets/images/node/nestjs/28.png",h="/blogs/assets/images/node/nestjs/29.png",b={},v=s("h4",{id:"模块-module",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#模块-module"},[s("span",null,"模块@Module")])],-1),f={href:"https://so.csdn.net/so/search?q=Nest&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},_=s("strong",null,"功能",-1),y=s("h4",{id:"_1-基本用法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-基本用法"},[s("span",null,"1.基本用法")])],-1),j={href:"https://so.csdn.net/so/search?q=CURD&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},x={href:"https://so.csdn.net/so/search?q=nestjs&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},N=r('<figure><img src="'+c+'" alt="模块引入" tabindex="0" loading="lazy"><figcaption>模块引入</figcaption></figure><h4 id="_2-共享模块" tabindex="-1"><a class="header-anchor" href="#_2-共享模块"><span>2.共享模块</span></a></h4><p>例如 user 的 Service 想暴露给 其他模块使用就可以使用 exports 导出该服务</p><figure><img src="'+l+'" alt="模块引入" tabindex="0" loading="lazy"><figcaption>模块引入</figcaption></figure><p>由于 App.modules 已经引入过该模块 就可以直接使用 user 模块的 Service</p><figure><img src="'+u+'" alt="模块引入" tabindex="0" loading="lazy"><figcaption>模块引入</figcaption></figure><figure><img src="'+d+'" alt="模块引入" tabindex="0" loading="lazy"><figcaption>模块引入</figcaption></figure><h4 id="_3-全局模块" tabindex="-1"><a class="header-anchor" href="#_3-全局模块"><span>3.全局模块</span></a></h4><p>@Global()</p><p>我们给 user 模块添加  @Global() 他便注册为全局模块</p><figure><img src="'+g+'" alt="全局模块" tabindex="0" loading="lazy"><figcaption>全局模块</figcaption></figure><p>在 user 模块使用无须在 module  import 导入</p><figure><img src="'+m+'" alt="全局模块" tabindex="0" loading="lazy"><figcaption>全局模块</figcaption></figure><h4 id="_4-动态模块" tabindex="-1"><a class="header-anchor" href="#_4-动态模块"><span>4.动态模块</span></a></h4><p>动态模块主要就是为了给模块传递参数 可以给该模块添加一个静态方法 用来接受参数</p><figure><img src="'+k+`" alt="全局模块" tabindex="0" loading="lazy"><figcaption>全局模块</figcaption></figure><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Module<span class="token punctuation">,</span> DynamicModule<span class="token punctuation">,</span> Global <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>
  path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Global</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ConfigModule</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">forRoot</span><span class="token punctuation">(</span>options<span class="token operator">:</span> Options<span class="token punctuation">)</span><span class="token operator">:</span> DynamicModule <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      module<span class="token operator">:</span> ConfigModule<span class="token punctuation">,</span>

      providers<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          provide<span class="token operator">:</span> <span class="token string">&quot;Config&quot;</span><span class="token punctuation">,</span>

          useValue<span class="token operator">:</span> <span class="token punctuation">{</span> baseApi<span class="token operator">:</span> <span class="token string">&quot;/api&quot;</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>path <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>

      exports<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          provide<span class="token operator">:</span> <span class="token string">&quot;Config&quot;</span><span class="token punctuation">,</span>

          useValue<span class="token operator">:</span> <span class="token punctuation">{</span> baseApi<span class="token operator">:</span> <span class="token string">&quot;/api&quot;</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>path <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+'" alt="全局模块" tabindex="0" loading="lazy"><figcaption>全局模块</figcaption></figure>',18);function q(z,C){const a=o("ExternalLinkIcon");return p(),i("div",null,[v,s("p",null,[n("每个 "),s("a",f,[n("Nest"),e(a)]),n(" 应用程序至少有一个模块，即根模块。根模块是 Nest 开始安排应用程序树的地方。事实上，根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的"),_]),y,s("p",null,[n("当我们使用 nest g res user 创建一个"),s("a",j,[n("CURD"),e(a)]),n(" 模板的时候 "),s("a",x,[n("nestjs"),e(a)]),n(" 会自动帮我们引入模块")]),N])}const A=t(b,[["render",q],["__file","nestjs 模块.html.vue"]]),D=JSON.parse('{"path":"/node/nestjs/nestjs%20%E6%A8%A1%E5%9D%97.html","title":"nestjs 模块","lang":"zh-CN","frontmatter":{"title":"nestjs 模块","icon":"gears","order":4,"category":["node"],"tag":["nestjs"],"navbar":true,"sidebar":true,"breadcrumb":true,"pageInfo":false,"contributors":true,"editLink":true,"lastUpdated":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":false,"description":"模块@Module 每个 Nest 应用程序至少有一个模块，即根模块。根模块是 Nest 开始安排应用程序树的地方。事实上，根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的功能 1.基本用法 当我们使用 nest g res user 创建一个CU...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/node/nestjs/nestjs%20%E6%A8%A1%E5%9D%97.html"}],["meta",{"property":"og:site_name","content":"孜然地球"}],["meta",{"property":"og:title","content":"nestjs 模块"}],["meta",{"property":"og:description","content":"模块@Module 每个 Nest 应用程序至少有一个模块，即根模块。根模块是 Nest 开始安排应用程序树的地方。事实上，根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的功能 1.基本用法 当我们使用 nest g res user 创建一个CU..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blogs/assets/images/node/nestjs/22.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-06T09:59:22.000Z"}],["meta",{"property":"article:author","content":"孜然地球"}],["meta",{"property":"article:tag","content":"nestjs"}],["meta",{"property":"article:modified_time","content":"2025-01-06T09:59:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nestjs 模块\\",\\"image\\":[\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/22.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/23.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/24.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/25.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/26.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/27.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/28.png\\",\\"https://mister-hope.github.io/blogs/assets/images/node/nestjs/29.png\\"],\\"dateModified\\":\\"2025-01-06T09:59:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孜然地球\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1736157562000,"updatedTime":1736157562000,"contributors":[{"name":"garry","email":"Garryg@ecinnovations.com","commits":1}]},"readingTime":{"minutes":1.38,"words":415},"filePathRelative":"node/nestjs/nestjs 模块.md","localizedDate":"2025年1月6日","excerpt":"<h4>模块@Module</h4>\\n<p>每个 <a href=\\"https://so.csdn.net/so/search?q=Nest&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Nest</a> 应用程序至少有一个模块，即根模块。根模块是 Nest 开始安排应用程序树的地方。事实上，根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的<strong>功能</strong></p>\\n<h4>1.基本用法</h4>","autoDesc":true}');export{A as comp,D as data};
