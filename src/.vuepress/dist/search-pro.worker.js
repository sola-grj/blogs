const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:n})=>n),bt=et(V(JSON.parse("{\"/\":{\"documentCount\":276,\"nextId\":276,\"documentIds\":{\"0\":\"0\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"3\",\"4\":\"3@0\",\"5\":\"4\",\"6\":\"4@0\",\"7\":\"5\",\"8\":\"5@0\",\"9\":\"6\",\"10\":\"6#_1-div上下布局\",\"11\":\"6#_2-div虚线边框\",\"12\":\"6#_3-flex布局\",\"13\":\"6#_1、flex-direction属性\",\"14\":\"6#_2、flex-wrap属性\",\"15\":\"6#_3、flex-flow\",\"16\":\"6#_4、justify-content属性\",\"17\":\"6#_5、align-items属性\",\"18\":\"6#_6、align-content属性\",\"19\":\"6#_4-项目的属性\",\"20\":\"6#_1、order属性\",\"21\":\"6#_2、flex-grow属性\",\"22\":\"6#_3、flex-shrink\",\"23\":\"6#_4、flex-basis属性\",\"24\":\"6#_5、flex属性\",\"25\":\"6#_6、align-self属性\",\"26\":\"6#_5-svg\",\"27\":\"6#svg基本形状\",\"28\":\"6#rect-矩形\",\"29\":\"6#circle-圆形\",\"30\":\"6#ellipse-椭圆\",\"31\":\"6#line-直线\",\"32\":\"6#polyline-折线\",\"33\":\"6#polygon-多边形\",\"34\":\"6#svg-path-路径\",\"35\":\"6#svg-基本形状路径转换原理\",\"36\":\"6#rect-to-path\",\"37\":\"6#circle-ellipse-to-path\",\"38\":\"6#line-to-path\",\"39\":\"6#polyline-polygon-to-path\",\"40\":\"6#svg流动虚线\",\"41\":\"6#svg沿路径移动特效\",\"42\":\"6@0\",\"43\":\"6@1\",\"44\":\"7\",\"45\":\"7@0\",\"46\":\"8\",\"47\":\"8#ecmasript-相关介绍\",\"48\":\"8#_1-1-什么是-ecma\",\"49\":\"8#_1-2-什么是-ecmascript\",\"50\":\"8#_1-3-什么是-ecma-262\",\"51\":\"8#_1-4-ecma-262-历史\",\"52\":\"8#es6\",\"53\":\"8#_1-let关键字\",\"54\":\"8#_2-const关键字\",\"55\":\"8#_3-变量的解构赋值\",\"56\":\"8#_4-模板字符串\",\"57\":\"8#_5-简化对象写法\",\"58\":\"8#_6-箭头函数\",\"59\":\"8#_7-函数参数的默认值\",\"60\":\"8#_8-rest参数\",\"61\":\"8#_9-spread扩展运算符\",\"62\":\"8#_10-symbol\",\"63\":\"8#_10-1基本使用\",\"64\":\"8#_10-2使用symbol的几种方式\",\"65\":\"8#_10-3symbol内置值\",\"66\":\"8#_11-迭代器\",\"67\":\"8#_12-生成器\",\"68\":\"8#_13-promise\",\"69\":\"8#_14-set集合\",\"70\":\"8#_15-map集合\",\"71\":\"8#_16-class类\",\"72\":\"8#_17-数值扩展\",\"73\":\"8#number-epsilon\",\"74\":\"8#二进制和八进制\",\"75\":\"8#number-isfinite-与-number-isnan\",\"76\":\"8#number-parseint-与-number-parsefloat\",\"77\":\"8#math-trunc\",\"78\":\"8#number-isinteger\",\"79\":\"8#_18-对象扩展\",\"80\":\"8#_19-模块化\",\"81\":\"8#_20-babel对es6模块化代码转换\",\"82\":\"8#_21-es6模块化引入npm包\",\"83\":\"8#es7\",\"84\":\"8#_1-array-prototype-includes\",\"85\":\"8#_2-指数操作符\",\"86\":\"8#es8\",\"87\":\"8#_1-async和await\",\"88\":\"8#_2-对象方法扩展\",\"89\":\"8#es9\",\"90\":\"8#_1-rest-参数与-spread-扩展运算符\",\"91\":\"8#_2-正则扩展-命名捕获分组\",\"92\":\"8#_3-正则扩展-反向断言\",\"93\":\"8#_4-正则扩展-dotall模式\",\"94\":\"8#es10\",\"95\":\"8#_1-object-fromentries\",\"96\":\"8#_2-trimstart和-trimend\",\"97\":\"8#_3-array-prototype-flat与flatmap\",\"98\":\"8#_4-symbol-prototype-description\",\"99\":\"8#es11\",\"100\":\"8#_1-string-prototype-matchall\",\"101\":\"8#_2-类的私有属性\",\"102\":\"8#_3-promise-allsettled\",\"103\":\"8#_4-可选链操作符\",\"104\":\"8#_5-动态import导入\",\"105\":\"8#_6-bigint\",\"106\":\"8#_7-globalthis对象\",\"107\":\"8@0\",\"108\":\"8@1\",\"109\":\"9\",\"110\":\"9@0\",\"111\":\"10\",\"112\":\"10#_1-基础总结\",\"113\":\"10#_1-数据类型\",\"114\":\"10#分类\",\"115\":\"10#判断\",\"116\":\"10#相关问题\",\"117\":\"10#_2-数据、变量与内存\",\"118\":\"10#_1-什么是数据\",\"119\":\"10#_2-什么是内存\",\"120\":\"10#_3-什么是变量\",\"121\":\"10#_4-内存-数据-变量三者之间的关系\",\"122\":\"10#相关问题-1\",\"123\":\"10#_3-对象\",\"124\":\"10#什么是对象\",\"125\":\"10#为什么要用对象\",\"126\":\"10#对象的组成\",\"127\":\"10#如何访问内部数据\",\"128\":\"10#什么时候必须使用-属性名-的方式\",\"129\":\"10#_4-函数\",\"130\":\"10#_5-iife\",\"131\":\"10#_6-函数中的this\",\"132\":\"10#_2-函数高级\",\"133\":\"10#_1-原型与原型链\",\"134\":\"10#_1-原型\",\"135\":\"10#_2-显示原型与隐式原型\",\"136\":\"10#_3-原型链\",\"137\":\"10#_4-原型链属性问题\",\"138\":\"10#_5-原型链面试题\",\"139\":\"10#_2-执行上下文与执行上下文栈\",\"140\":\"10#_1-变量提升与函数提升\",\"141\":\"10#_2-执行上下文\",\"142\":\"10#_3-执行上下文栈\",\"143\":\"10#_4-执行上下文面试题\",\"144\":\"10#_3-作用域与作用域链\",\"145\":\"10#作用域与执行上下文区别\",\"146\":\"10#作用域链\",\"147\":\"10#面试题\",\"148\":\"10#_4-闭包\",\"149\":\"10#_1-引入\",\"150\":\"10#_2-理解闭包\",\"151\":\"10#_3-常见的闭包\",\"152\":\"10#_4-闭包的作用\",\"153\":\"10#_5-闭包的生命周期\",\"154\":\"10#_6-闭包的缺点及解决\",\"155\":\"10#_7-闭包面试题\",\"156\":\"10#_3-对象高级\",\"157\":\"10#_1-对象创建模式\",\"158\":\"10#_2-继承模式\",\"159\":\"10#_4-线程机制与事件机制\",\"160\":\"10#进程与线程\",\"161\":\"10#浏览器内核\",\"162\":\"10#定时器引发的思考\",\"163\":\"10#js是单线程执行的\",\"164\":\"10#浏览器的事件循环模型\",\"165\":\"10#h5-web-workers\",\"166\":\"10@0\",\"167\":\"10@1\",\"168\":\"11\",\"169\":\"11@0\",\"170\":\"12\",\"171\":\"12@0\",\"172\":\"12@1\",\"173\":\"13\",\"174\":\"13@0\",\"175\":\"14\",\"176\":\"14@0\",\"177\":\"15\",\"178\":\"15#typescript中的基本类型\",\"179\":\"15#编译选项\",\"180\":\"15#自动编译文件\",\"181\":\"15#自动编译整个项目\",\"182\":\"15#include\",\"183\":\"15#exclude\",\"184\":\"15#extends\",\"185\":\"15#files\",\"186\":\"15#compileroptions\",\"187\":\"15#typescript打包\",\"188\":\"15#webpack整合\",\"189\":\"15#初始化项目\",\"190\":\"15#下载构建工具\",\"191\":\"15#配置webpack\",\"192\":\"15#配置ts编译选项\",\"193\":\"15#修改package-json配置\",\"194\":\"15#项目使用\",\"195\":\"15#babel\",\"196\":\"15#面向对象\",\"197\":\"15#定义类\",\"198\":\"15#构造函数\",\"199\":\"15#封装\",\"200\":\"15#属性存取器\",\"201\":\"15#静态属性\",\"202\":\"15#this\",\"203\":\"15#继承\",\"204\":\"15#重写\",\"205\":\"15#抽象类-abstract-class\",\"206\":\"15#接口-interface\",\"207\":\"15#属性的封装\",\"208\":\"15#泛型-generic\",\"209\":\"15#泛型函数\",\"210\":\"15#创建泛型函数\",\"211\":\"15#使用泛型函数\",\"212\":\"15#方式一-直接使用\",\"213\":\"15#方式二-指定类型\",\"214\":\"15#函数中声明多个泛型\",\"215\":\"15#泛型类\",\"216\":\"15#泛型继承\",\"217\":\"15@0\",\"218\":\"15@1\",\"219\":\"16\",\"220\":\"16@0\",\"221\":\"17\",\"222\":\"17@0\",\"223\":\"18\",\"224\":\"18#_1-1-webpack-是什么\",\"225\":\"18#_1-2-webpack-五个核心概念\",\"226\":\"18#_1-2-1-entry\",\"227\":\"18#_1-2-2-output\",\"228\":\"18#_1-2-3-loader\",\"229\":\"18#_1-2-4-plugins\",\"230\":\"18#_1-2-5-mode\",\"231\":\"18#_2-1-初始化配置\",\"232\":\"18#_2-2-编译打包应用\",\"233\":\"18#打包样式资源\",\"234\":\"18#打包-html-资源\",\"235\":\"18#打包图片资源\",\"236\":\"18#打包其他资源\",\"237\":\"18#devserver\",\"238\":\"18#提取-css-成单独文件\",\"239\":\"18#css-兼容性处理-webpack5\",\"240\":\"18#压缩-css\",\"241\":\"18#js-语法检查\",\"242\":\"18#js-兼容性处理\",\"243\":\"18#js-压缩\",\"244\":\"18#html-压缩\",\"245\":\"18#_5-1-开发环境性能优化配置\",\"246\":\"18#_5-1-1优化打包构建速度\",\"247\":\"18#_5-1-1-1hmr-模块热替换\",\"248\":\"18#_5-1-2优化代码调试\",\"249\":\"18#_5-1-2-1-source-map\",\"250\":\"18#_5-2-生产环境性能优化配置\",\"251\":\"18#_5-2-1-优化打包构建速度\",\"252\":\"18#_5-2-1-1-oneof\",\"253\":\"18#_5-2-1-2-babel缓存\",\"254\":\"18#_5-2-1-3-多进程打包\",\"255\":\"18#_5-2-1-4-externals\",\"256\":\"18#_5-2-1-5-dll\",\"257\":\"18#_5-2-2-优化代码运行的性能\",\"258\":\"18#_5-2-2-1-缓存-hash-chunkhash-contenthash\",\"259\":\"18#_5-2-2-2-tree-shaking\",\"260\":\"18#_5-2-2-3-code-split\",\"261\":\"18#_5-2-2-4-懒加载和预加载\",\"262\":\"18#_5-2-2-5-pwa\",\"263\":\"18#_6-1-entry\",\"264\":\"18#_6-2-output\",\"265\":\"18#_6-3-module\",\"266\":\"18#_6-4-resolve\",\"267\":\"18#_6-5-devserver\",\"268\":\"18#_6-6-optimization\",\"269\":\"18@0\",\"270\":\"18@1\",\"271\":\"19\",\"272\":\"19@0\",\"273\":\"20\",\"274\":\"20@0\",\"275\":\"21\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[1],\"2\":[null,null,1],\"3\":[1],\"4\":[null,null,1],\"5\":[1],\"6\":[null,null,1],\"7\":[1],\"8\":[null,null,1],\"9\":[1],\"10\":[2,10],\"11\":[2,6],\"12\":[2],\"13\":[3,10],\"14\":[3,20],\"15\":[3,13],\"16\":[3,22],\"17\":[3,19],\"18\":[3,28],\"19\":[2],\"20\":[2,8],\"21\":[3,19],\"22\":[3,21],\"23\":[3,16],\"24\":[2,20],\"25\":[3,19],\"26\":[2,22],\"27\":[1,14],\"28\":[1,44],\"29\":[1,21],\"30\":[1,23],\"31\":[1,21],\"32\":[1,37],\"33\":[1,39],\"34\":[3,41],\"35\":[2],\"36\":[3,58],\"37\":[4,31],\"38\":[3,23],\"39\":[4,28],\"40\":[1,79],\"41\":[1,41],\"42\":[null,null,1],\"43\":[null,null,1],\"44\":[1],\"45\":[null,null,1],\"46\":[1],\"47\":[1],\"48\":[1,15],\"49\":[1,8],\"50\":[1,16],\"51\":[1,76],\"52\":[1],\"53\":[2,8],\"54\":[2,8],\"55\":[2,48],\"56\":[2,32],\"57\":[2,21],\"58\":[2,49],\"59\":[2,36],\"60\":[2,27],\"61\":[2,35],\"62\":[2],\"63\":[2,45],\"64\":[2,36],\"65\":[2,65],\"66\":[2,90],\"67\":[2,90],\"68\":[2,123],\"69\":[2,76],\"70\":[2,64],\"71\":[2,118],\"72\":[2],\"73\":[2,10],\"74\":[1,8],\"75\":[5,7],\"76\":[5,10],\"77\":[2,3],\"78\":[2,67],\"79\":[2,61],\"80\":[2,81],\"81\":[2,54],\"82\":[2,12],\"83\":[1],\"84\":[4,18],\"85\":[2,11],\"86\":[1],\"87\":[2,137],\"88\":[2,45],\"89\":[1],\"90\":[5,56],\"91\":[3,44],\"92\":[3,28],\"93\":[3,54],\"94\":[1],\"95\":[3,23],\"96\":[3,13],\"97\":[4,33],\"98\":[4,12],\"99\":[1],\"100\":[4,40],\"101\":[2,35],\"102\":[3,26],\"103\":[2,25],\"104\":[2,25],\"105\":[2,27],\"106\":[2,3],\"107\":[null,null,1],\"108\":[null,null,1],\"109\":[1],\"110\":[null,null,1],\"111\":[1],\"112\":[2],\"113\":[2],\"114\":[2,22],\"115\":[2,17],\"116\":[2,21],\"117\":[3],\"118\":[3,13],\"119\":[3,33],\"120\":[3,5],\"121\":[4,3],\"122\":[1,29],\"123\":[2],\"124\":[2,3],\"125\":[2,1],\"126\":[1,9],\"127\":[1,2],\"128\":[4,5],\"129\":[2,41],\"130\":[2,10],\"131\":[2,15],\"132\":[2],\"133\":[2],\"134\":[2,25],\"135\":[2,34],\"136\":[2,45],\"137\":[2,11],\"138\":[2,54],\"139\":[2],\"140\":[2,29],\"141\":[2,39],\"142\":[2,20],\"143\":[2,38],\"144\":[2,13],\"145\":[1,27],\"146\":[1,16],\"147\":[1,20],\"148\":[2],\"149\":[2,57],\"150\":[2,22],\"151\":[2,4],\"152\":[2,20],\"153\":[2,5],\"154\":[2,23],\"155\":[2,31],\"156\":[2],\"157\":[2,50],\"158\":[2,53],\"159\":[2],\"160\":[1,52],\"161\":[1,36],\"162\":[1,14],\"163\":[1,25],\"164\":[1,56],\"165\":[3,92],\"166\":[null,null,1],\"167\":[null,null,1],\"168\":[1],\"169\":[null,null,1],\"170\":[1,18],\"171\":[null,null,1],\"172\":[null,null,1],\"173\":[1],\"174\":[null,null,1],\"175\":[1],\"176\":[null,null,1],\"177\":[1],\"178\":[1,148],\"179\":[1],\"180\":[1,11],\"181\":[1,13],\"182\":[1,10],\"183\":[1,14],\"184\":[1,8],\"185\":[1,15],\"186\":[1,105],\"187\":[1],\"188\":[1,6],\"189\":[1,7],\"190\":[1,25],\"191\":[1,53],\"192\":[1,10],\"193\":[2,18],\"194\":[1,7],\"195\":[1,55],\"196\":[1,12],\"197\":[1,33],\"198\":[1,28],\"199\":[1,56],\"200\":[1,30],\"201\":[1,25],\"202\":[1,2],\"203\":[1,26],\"204\":[1,31],\"205\":[4,19],\"206\":[3,38],\"207\":[1,45],\"208\":[3,20],\"209\":[1],\"210\":[1,13],\"211\":[1],\"212\":[3,5],\"213\":[3,4],\"214\":[1,17],\"215\":[1,9],\"216\":[1,17],\"217\":[null,null,1],\"218\":[null,null,1],\"219\":[1],\"220\":[null,null,1],\"221\":[1],\"222\":[null,null,1],\"223\":[1],\"224\":[3,18],\"225\":[4],\"226\":[3,7],\"227\":[3,9],\"228\":[4,10],\"229\":[4,7],\"230\":[4,31],\"231\":[3,22],\"232\":[2,94],\"233\":[1,63],\"234\":[3,48],\"235\":[1,108],\"236\":[1,53],\"237\":[1,129],\"238\":[3,46],\"239\":[4,79],\"240\":[2,83],\"241\":[2,67],\"242\":[2,94],\"243\":[2,1],\"244\":[2,179],\"245\":[3],\"246\":[3],\"247\":[5,90],\"248\":[3],\"249\":[5,70],\"250\":[3],\"251\":[4],\"252\":[4,93],\"253\":[4,38],\"254\":[5,53],\"255\":[5,50],\"256\":[4,83],\"257\":[3],\"258\":[8,36],\"259\":[4,22],\"260\":[5,73],\"261\":[4,32],\"262\":[3,63],\"263\":[3,30],\"264\":[3,29],\"265\":[3,31],\"266\":[3,21],\"267\":[3,46],\"268\":[2,72],\"269\":[null,null,1],\"270\":[null,null,1],\"271\":[1],\"272\":[null,null,1],\"273\":[1],\"274\":[null,null,1],\"275\":[1,3]},\"averageFieldLength\":[2.0756056162218326,31.99155929867234,0.6571405307579504],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"1\":{\"h\":\"AI\"},\"2\":{\"c\":[\"AI\"]},\"3\":{\"h\":\"database\"},\"4\":{\"c\":[\"database\"]},\"5\":{\"h\":\"python\"},\"6\":{\"c\":[\"python\"]},\"7\":{\"h\":\"Web\"},\"8\":{\"c\":[\"使用指南\"]},\"9\":{\"h\":\"CSS相关\"},\"10\":{\"h\":\"1.div上下布局\",\"t\":[\".zj { width: 100%; height: 40%; display: flex; flex-direction: column; } \"]},\"11\":{\"h\":\"2.div虚线边框\",\"t\":[\"border-top: 3px dashed #ffffff; \"]},\"12\":{\"h\":\"3.flex布局\"},\"13\":{\"h\":\"1、flex-direction属性\",\"t\":[\"flex-direction属性决定主轴的方向（即项目的排列方向）。\",\".box { flex-direction: row | row-reverse | column | column-reverse; } \"]},\"14\":{\"h\":\"2、flex-wrap属性\",\"t\":[\"默认情况下，项目都排在一条线（又称\\\"轴线\\\"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\",\".box{ flex-wrap: nowrap | wrap | wrap-reverse; } \",\"nowrap（默认）：不换行。\",\"wrap：换行，第一行在上方。\",\"wrap-reverse：换行，第一行在下方。\"]},\"15\":{\"h\":\"3、flex-flow\",\"t\":[\"flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\",\".box { flex-flow: <flex-direction> || <flex-wrap>; } \"]},\"16\":{\"h\":\"4、justify-content属性\",\"t\":[\"justify-content属性定义了项目在主轴上的对齐方式。\",\".box { justify-content: flex-start | flex-end | center | space-between | space-around; } \",\"flex-start（默认值）：左对齐\",\"flex-end：右对齐\",\"center： 居中\",\"space-between：两端对齐，项目之间的间隔都相等。\",\"space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\"]},\"17\":{\"h\":\"5、align-items属性\",\"t\":[\"align-items属性定义项目在交叉轴上如何对齐。\",\".box { align-items: flex-start | flex-end | center | baseline | stretch; } \",\"flex-start：交叉轴的起点对齐。\",\"flex-end：交叉轴的终点对齐。\",\"center：交叉轴的中点对齐。\",\"baseline: 项目的第一行文字的基线对齐。\",\"stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\"]},\"18\":{\"h\":\"6、align-content属性\",\"t\":[\"align-content属性定义了多根轴线（多行）的对齐方式。如果项目只有一根轴线，该属性不起作用。\",\".box { align-content: flex-start | flex-end | center | space-between | space-around | stretch; } \",\"flex-start：交叉轴的起点对齐。\",\"flex-end：与交叉轴的终点对齐。\",\"center：与交叉轴的中点对齐。\",\"space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\",\"space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\",\"stretch（默认值）：轴线占满整个交叉轴。\"]},\"19\":{\"h\":\"4.项目的属性\"},\"20\":{\"h\":\"1、order属性\",\"t\":[\"order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\",\".item { order: <integer>; } \"]},\"21\":{\"h\":\"2、flex-grow属性\",\"t\":[\"flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\",\"如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\",\".item { flex-grow: <number>; /* default 0 */ } \"]},\"22\":{\"h\":\"3、flex-shrink\",\"t\":[\"flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\",\"如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。 负值对该属性无效。\",\".item { flex-shrink: <number>; /* default 1 */ } \"]},\"23\":{\"h\":\"4、flex-basis属性\",\"t\":[\"flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\",\".item { flex-basis: <length>; | auto; /* default auto */ } \"]},\"24\":{\"h\":\"5、flex属性\",\"t\":[\"flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\",\"该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\",\".item { flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] } \"]},\"25\":{\"h\":\"6、align-self属性\",\"t\":[\"align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\",\".item { align-self: auto | flex-start | flex-end | center | baseline | stretch; } \"]},\"26\":{\"h\":\"5.svg\",\"t\":[\"前段时间研究 SVG 压缩优化，发现SVG预定义的 rect、circle、ellipse、line、polyline、polygon六种基本形状可通过path路径转换实现，这样可以在一定程度上减少代码量。不仅如此，我们常用的 SVG Path 动画(路径动画)，是以操作path中两个属性值stroke-dasharray和stroke-dashoffset来实现，基本形状转换为path路径，有利于实现路径动画。\"]},\"27\":{\"h\":\"SVG基本形状\",\"t\":[\"SVG 提供了rect、circle、ellipse、line、polyline、polygon六种基本形状用于图形绘制，这些形状可以直接用来绘制一些基本的形状，如矩形、椭圆等，而复杂图形的绘制则需要使用 path 路径来实现。\"]},\"28\":{\"h\":\"矩形\",\"t\":[\"<rect x=\\\"10\\\" y=\\\"10\\\" width=\\\"30\\\" height=\\\"30\\\"/> <rect x=\\\"60\\\" y=\\\"10\\\" rx=\\\"10\\\" ry=\\\"10\\\" width=\\\"30\\\" height=\\\"30\\\"/> \",\"SVG中rect元素用于绘制矩形、圆角矩形，含有6个基本属性用于控制矩形的形状以及坐标，具体如下：\",\"x：矩形左上角x位置, 默认值为 0\",\"y：矩形左上角y位置, 默认值为 0\",\"width：矩形的宽度, 不能为负值否则报错, 0 值不绘制\",\"height：矩形的高度, 不能为负值否则报错, 0 值不绘制\",\"rx：圆角x方向半径, 不能为负值否则报错\",\"ry：圆角y方向半径, 不能为负值否则报错\",\"这里需要注意，rx 和 ry 的还有如下规则：\",\"rx 和 ry 都没有设置, 则 rx = 0 ry = 0\",\"rx 和 ry 有一个值为0, 则相当于 rx = 0 ry = 0，圆角无效\",\"rx 和 ry 有一个被设置, 则全部取这个被设置的值\",\"rx 的最大值为 width 的一半, ry 的最大值为 height 的一半\"]},\"29\":{\"h\":\"圆形\",\"t\":[\"<circle cx=\\\"100\\\" cy=\\\"100\\\" r=\\\"50\\\" fill=\\\"#fff\\\"></circle> \",\"SVG中circle元素用于绘制圆形，含有3个基本属性用于控制圆形的坐标以及半径，具体如下：\",\"r：半径\",\"cx：圆心x位置, 默认为 0\",\"cy：圆心y位置, 默认为 0\"]},\"30\":{\"h\":\"椭圆\",\"t\":[\"<ellipse cx=\\\"75\\\" cy=\\\"75\\\" rx=\\\"20\\\" ry=\\\"5\\\"/> \",\"SVG中ellipse元素用于绘制椭圆，是circle元素更通用的形式，含有4个基本属性用于控制椭圆的形状以及坐标，具体如下：\",\"rx：椭圆x半径\",\"ry：椭圆y半径\",\"cx：圆心x位置, 默认为 0\",\"cy：圆心y位置, 默认为 0\"]},\"31\":{\"h\":\"直线\",\"t\":[\"<line x1=\\\"10\\\" x2=\\\"50\\\" y1=\\\"110\\\" y2=\\\"150\\\"/> \",\"line绘制直线。它取两个点的位置作为属性，指定这条线的起点和终点位置。\",\"x1：起点的x位置\",\"y1：起点的y位置\",\"x2：终点的x位置\",\"y2：终点的y位置\"]},\"32\":{\"h\":\"折线\",\"t\":[\"<polyline points=\\\"60 110, 65 120, 70 115, 75 130, 80 125, 85 140, 90 135, 95 150, 100 145\\\"/> \",\"polyline是一组连接在一起的直线。因为它可以有很多的点，折线的的所有点位置都放在一个points属性中：\",\"points` 点集数列，每个数字用空白、逗号、终止命令符或者换行符分隔开，每个点必须包含`2`个数字，一个是`x`坐标，一个是`y`坐标 如`0 0, 1 1, 2 2 \"]},\"33\":{\"h\":\"多边形\",\"t\":[\"<polygon points=\\\"50 160, 55 180, 70 180, 60 190, 65 205, 50 195, 35 205, 40 190, 30 180, 45 180\\\"/> \",\"polygon和折线很像，它们都是由连接一组点集的直线构成。不同的是，polygon的路径在最后一个点处自动回到第一个点。需要注意的是，矩形也是一种多边形，如果需要更多灵活性的话，你也可以用多边形创建一个矩形。\",\"points 点集数列，每个数字用空白、逗号、终止命令符或者换行符分隔开，每个点必须包含2个数字，一个是x坐标，一个是y坐标 如0 0, 1 1, 2 2， 路径绘制完闭合图形”\"]},\"34\":{\"h\":\"SVG path 路径\",\"t\":[\"SVG 的路径``功能非常强大，它不仅能创建基本形状，还能创建更多复杂的形状。<path>路径是由一些命令来控制的，每一个命令对应一个字母，并且区分大小写，大写主要表示绝对定位，小写表示相对定位。<path> 通过属性 d 来定义路径， d 是一系列命令的集合，主要有以下几个命令：\",\"img\",\"通常大部分形状，都可以通过指令M(m)、L(l)、H(h)、V(v)、A(a)来实现，注意特别要区分大小写，相对与绝对坐标情况，转换时推荐使用相对路径可减少代码量，例如：\",\"// 以下两个等价 d='M 10 10 20 20' // (10, 10) (20 20) 都是绝对坐标 d='M 10 10 L 20 20' // 以下两个等价 d='m 10 10 20 20' // (10, 10) 绝对坐标, (20 20) 相对坐标 d='M 10 10 l 20 20' \"]},\"35\":{\"h\":\"SVG 基本形状路径转换原理\"},\"36\":{\"h\":\"rect to path\",\"t\":[\"如下图所示，一个 rect 是由 4 个弧和 4 个线段构成；如果 rect 没有设置 rx 和 ry 则 rect 只是由 4 个线段构成。rect 转换为 path 只需要将 A ~ H 之间的弧和线段依次实现即可。\",\"img\",\"function rect2path(x, y, width, height, rx, ry) { /* * rx 和 ry 的规则是： * 1. 如果其中一个设置为 0 则圆角不生效 * 2. 如果有一个没有设置则取值为另一个 */ rx = rx || ry || 0; ry = ry || rx || 0; //非数值单位计算，如当宽度像100%则移除 if (isNaN(x - y + width - height + rx - ry)) return; rx = rx > width / 2 ? width / 2 : rx; ry = ry > height / 2 ? height / 2 : ry; //如果其中一个设置为 0 则圆角不生效 if(0 == rx || 0 == ry){ // var path = // 'M' + x + ' ' + y + // 'H' + (x + width) + 不推荐用绝对路径，相对路径节省代码量 // 'V' + (y + height) + // 'H' + x + // 'z'; var path = 'M' + x + ' ' + y + 'h' + width + 'v' + height + 'h' + -width + 'z'; }else{ var path = 'M' + x + ' ' + (y+ry) + 'a' + rx + ' ' + ry + ' 0 0 1 ' + rx + ' ' + (-ry) + 'h' + (width - rx - rx) + 'a' + rx + ' ' + ry + ' 0 0 1 ' + rx + ' ' + ry + 'v' + (height - ry -ry) + 'a' + rx + ' ' + ry + ' 0 0 1 ' + (-rx) + ' ' + ry + 'h' + (rx + rx -width) + 'a' + rx + ' ' + ry + ' 0 0 1 ' + (-rx) + ' ' + (-ry) + 'z'; } return path; } \"]},\"37\":{\"h\":\"circle/ellipse to path\",\"t\":[\"圆可视为是一种特殊的椭圆，即 rx 与 ry 相等的椭圆，所以可以放在一起讨论。 椭圆可以看成A点到C做180度顺时针画弧、C点到A做180度顺时针画弧即可：\",\"img\",\"function ellipse2path(cx, cy, rx, ry) { //非数值单位计算，如当宽度像100%则移除 if (isNaN(cx - cy + rx - ry)) return; var path = 'M' + (cx-rx) + ' ' + cy + 'a' + rx + ' ' + ry + ' 0 1 0 ' + 2*rx + ' 0' + 'a' + rx + ' ' + ry + ' 0 1 0 ' + (-2*rx) + ' 0' + 'z'; return path; } \"]},\"38\":{\"h\":\"line to path\",\"t\":[\"相对来说比较简单，如下：\",\"function line2path(x1, y1, x2, y2) { //非数值单位计算，如当宽度像100%则移除 if (isNaN(x1 - y1 + x2 - y2)) return; x1 = x1 || 0; y1 = y1 || 0; x2 = x2 || 0; y2 = y2 || 0; var path = 'M' + x1 + ' '+ y1 + 'L' + x2 + ' ' + y2; return path; } \"]},\"39\":{\"h\":\"polyline/polygon to path\",\"t\":[\"polyline折线、polygon多边形的转换为path比较类似，差别就是polygon多边形会闭合。\",\"// polygon折线转换 points = [x1, y1, x2, y2, x3, y3 ...]; function polyline2path (points) { var path = 'M' + points.slice(0,2).join(' ') + 'L' + points.slice(2).join(' '); return path; } // polygon多边形转换 points = [x1, y1, x2, y2, x3, y3 ...]; function polygon2path (points) { var path = 'M' + points.slice(0,2).join(' ') + 'L' + points.slice(2).join(' ') + 'z'; return path; } \"]},\"40\":{\"h\":\"SVG流动虚线\",\"t\":[\"<style> .water { stroke-dasharray: 1000; stroke-dashoffset: 1000; animation: run 10s linear infinite; } @keyframes run { from { stroke-dasharray: 10, 5; } to { stroke-dasharray: 20, 5;; } } </style> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"300px\\\" height=\\\"100px\\\"> <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"300\\\" height=\\\"100\\\" fill=\\\"yellow\\\" stroke-width=\\\"1\\\" stroke=\\\"red\\\" /> <circle cx=\\\"0\\\" cy=\\\"50\\\" r=\\\"15\\\" fill=\\\"blue\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"> <animateMotion path=\\\"M 1306 637.125 L 1306 581.75 \\\" dur=\\\"3s\\\" repeatCount=\\\"indefinite\\\" /> </circle> <g fill=\\\"none\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"> <path stroke-dasharray=\\\"5,5\\\" d=\\\"M5 20 l215 0\\\" class=\\\"water\\\"/> <path stroke-dasharray=\\\"10,10\\\" d=\\\"M5 40 l215 0\\\" /> <path stroke-dasharray=\\\"20,10,5,5,5,10\\\" d=\\\"M5 60 l215 0\\\" class=\\\"water\\\" /> </g> </svg> \"]},\"41\":{\"h\":\"SVG沿路径移动特效\",\"t\":[\"<svg viewBox=\\\"0 0 200 100\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path fill=\\\"none\\\" stroke=\\\"lightgrey\\\" d=\\\"M20,50 C20,-50 180,150 180,50 C180-50 20,150 20,50 z\\\" /> <circle r=\\\"5\\\" fill=\\\"red\\\"> <animateMotion dur=\\\"10s\\\" repeatCount=\\\"indefinite\\\" path=\\\"M20,50 C20,-50 180,150 180,50 C180-50 20,150 20,50 z\\\" /> </circle> </svg> \"]},\"42\":{\"c\":[\"web\"]},\"43\":{\"c\":[\"js\"]},\"44\":{\"h\":\"CSS\"},\"45\":{\"c\":[\"CSS\"]},\"46\":{\"h\":\"ECMA相关\"},\"47\":{\"h\":\"\"},\"48\":{\"h\":\"\",\"t\":[\"ECMA（European Computer Manufacturers Association）中文名称为欧洲计算机制\",\"造商协会，这个组织的目标是评估、开发和认可电信和计算机标准。1994 年后该\",\"组织改名为 Ecma 国际。\"]},\"49\":{\"h\":\"\",\"t\":[\"ECMAScript 是由 Ecma 国际通过 ECMA-262 标准化的脚本程序设计语言。\"]},\"50\":{\"h\":\"\",\"t\":[\"Ecma 国际制定了许多标准，而 ECMA-262 只是其中的一个，所有标准列表查看\",\"http://www.ecma-international.org/publications/standards/Standard.htm\"]},\"51\":{\"h\":\"\",\"t\":[\"ECMA-262（ECMAScript）历史版本查看网址\",\"http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm\",\"第 1 版\",\"1997 年 制定了语言的基本语法\",\"第 2 版\",\"1998 年 较小改动\",\"第 3 版\",\"1999 年 引入正则、异常处理、格式化输出等。IE 开始支持\",\"第 4 版\",\"2007 年 过于激进，未发布\",\"第 5 版\",\"2009 年 引入严格模式、JSON，扩展对象、数组、原型、字符串、日期方法\",\"第 6 版\",\"2015 年 模块化、面向对象语法、Promise、箭头函数、let、const、数组解构赋值等等\",\"第 7 版\",\"2016 年 幂运算符、数组扩展、Async/await 关键字\",\"第 8 版\",\"2017 年 Async/await、字符串扩展\",\"第 9 版\",\"2018 年 对象解构赋值、正则扩展\",\"第 10 版\",\"2019 年 扩展对象、数组方法 ES.next 动态指向下一个版本\",\"注：从ES6开始，每年发布一个版本，版本号比年份最后一位大1\"]},\"52\":{\"h\":\"ES6\"},\"53\":{\"h\":\"1.let关键字\",\"t\":[\"let 关键字用来声明变量，使用 let 声明的变量有几个特点：\",\"不允许重复声明\",\"块儿级作用域\",\"不存在变量提升\",\"不影响作用域链\"]},\"54\":{\"h\":\"2.const关键字\",\"t\":[\"const 关键字用来声明常量，const 声明有以下特点\",\"声明必须赋初始值\",\"标识符一般为大写\",\"不允许重复声明\",\"值不允许修改\",\"块儿级作用域\"]},\"55\":{\"h\":\"3.变量的解构赋值\",\"t\":[\"ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。\",\"//数组的解构赋值 const arr = ['张学友', '刘德华', '黎明', '郭富城']; let [zhang, liu, li, guo] = arr; //对象的解构赋值 const lin = { name: '林志颖', tags: ['车手', '歌手', '小旋风', '演员'] }; let {name, tags} = lin; //复杂解构 let wangfei = { name: '王菲', age: 18, songs: ['红豆', '流年', '暧昧', '传奇'], history: [ {name: '窦唯'}, {name: '李亚鹏'}, {name: '谢霆锋'} ] }; let {songs: [one, two, three], history: [first, second, third]} = wangfei; \"]},\"56\":{\"h\":\"4.模板字符串\",\"t\":[\"模板字符串（template string）是增强版的字符串，用反引号（`）标识，特点：\",\"字符串中可以出现换行符\",\"可以使用 ${xxx} 形式输出变量\",\"// 定义字符串 let str = `<ul> <li>沈腾</li> <li>玛丽</li> <li>魏翔</li> <li>艾伦</li> </ul>`; // 变量拼接 let star = '王宁'; let result = `${star}在前几年离开了开心麻花`; \"]},\"57\":{\"h\":\"5.简化对象写法\",\"t\":[\"ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。\",\"let name = 'sola'; let slogon = '永远18'; let improve = function () { console.log('可以提高你的技能'); } //属性和方法简写 let atguigu = { name, slogon, improve, change() { console.log('可以改变你') } }; \"]},\"58\":{\"h\":\"6.箭头函数\",\"t\":[\"ES6 允许使用「箭头」（=>）定义函数。\",\"箭头函数的注意点:\",\"如果形参只有一个，则小括号可以省略\",\"函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的执行结果\",\"箭头函数 this 指向声明时所在作用域下 this 的值\",\"箭头函数不能作为构造函数实例化\",\"不能使用 arguments\",\"/** * 1. 通用写法 */ let fn = (arg1, arg2, arg3) => { return arg1 + arg2 + arg3; } /** * 2. 省略小括号的情况 */ let fn2 = num => { return num * 10; }; /** * 3. 省略花括号的情况 */ let fn3 = score => score * 20; /** * 4. this 指向声明时所在作用域中 this 的值 */ let fn4 = () => { console.log(this); } let school = { name: '尚硅谷', getName(){ let fn5 = () => { console.log(this); } fn5(); } }; \"]},\"59\":{\"h\":\"7.函数参数的默认值\",\"t\":[\"//ES6 允许给函数参数赋值初始值 //1. 形参初始值 具有默认值的参数, 一般位置要靠后(潜规则) function add(a, b, c = 10) { return a + b + c; } let result = add(1, 2); console.log(result); // 13 //2. 与解构赋值结合 // 注意这里参数是一个对象 function connect({host = \\\"127.0.0.1\\\", username, password, port}) { console.log(host) console.log(username) console.log(password) console.log(port) } connect({ host: 'atguigu.com', username: 'root', password: 'root', port: 3306 }) \"]},\"60\":{\"h\":\"8.rest参数\",\"t\":[\"ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments\",\"/** * 作用与 arguments 类似 */ function add(...args){ console.log(args); } add(1,2,3,4,5); /** * rest 参数必须是最后一个形参 */ function minus(a,b,...args){ console.log(a,b,args); } minus(100,1,2,3,4,5,19); \",\"**注意：**rest参数非常适合不定个数参数函数的场景\"]},\"61\":{\"h\":\"9.spread扩展运算符\",\"t\":[\"扩展运算符（spread）也是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包。\",\"/** * 展开数组 */ let tfboys = ['德玛西亚之力','德玛西亚之翼','德玛西亚皇子']; function fn(){ console.log(arguments); } fn(...tfboys) /** * 展开对象 */ let skillOne = { q: '致命打击', }; let skillTwo = { w: '勇气' }; let skillThree = { e: '审判' }; let skillFour = { r: '德玛西亚正义' }; let gailun = {...skillOne, ...skillTwo,...skillThree,...skillFour}; \"]},\"62\":{\"h\":\"10.Symbol\"},\"63\":{\"h\":\"10.1基本使用\",\"t\":[\"ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是\",\"JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型。\",\"Symbol 特点\",\"Symbol 的值是唯一的，用来解决命名冲突的问题\",\"Symbol 值不能与其他数据进行运算\",\"Symbol 定义 的 对象属 性 不能 使 用 for…in 循 环遍 历 ，但 是可 以 使 用\",\"Reflect.ownKeys 来获取对象的所有键名\",\"//创建 Symbol let s1 = Symbol(); console.log(s1, typeof s1); //添加标识的 Symbol let s2 = Symbol('尚硅谷'); let s2_2 = Symbol('尚硅谷'); console.log(s2 === s2_2); //使用 Symbol for 定义 let s3 = Symbol.for('尚硅谷'); let s3_2 = Symbol.for('尚硅谷'); console.log(s3 === s3_2); \"]},\"64\":{\"h\":\"10.2使用Symbol的几种方式\",\"t\":[\"方式一\",\"// 向对象中添加方法 up down let game = { name: '俄罗斯方块', up: function () { }, down: function () { } }; // 我们要往game对象里面添加方法，但是怕game对象已经存在 // 同名方法，所以我们这时使用到了Symbol // 方式一 // 声明一个对象 let methods = { up: Symbol(), down: Symbol() }; game[methods.up] = function () { console.log(\\\"我可以快速上升\\\"); } game[methods.down] = function () { console.log(\\\"我可以快速下降!!\\\"); } game[methods.up](); game[methods.down](); \",\"方式二\",\"let youxi = { name: \\\"狼人杀\\\", [Symbol.for('say')]: function () { console.log(\\\"我可以发言\\\") }, [Symbol.for('zibao')]: function () { console.log('我可以自爆'); } } youxi[Symbol.for('say')](); youxi[Symbol.for('zibao')](); \",\"方式三\",\"let youxi2 = { name:\\\"狼人杀\\\", [Symbol('say')]:function () { console.log(\\\"我可以发言\\\") }, [Symbol('zibao')]:function () { console.log(\\\"我可以自爆\\\") } } youxi2[Reflect.ownKeys(youxi2)[1]](); youxi2[Reflect.ownKeys(youxi2)[2]](); \"]},\"65\":{\"h\":\"10.3Symbol内置值\",\"t\":[\"除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行。\",\"内置值\",\"描述\",\"Symbol.hasInstance\",\"当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法\",\"Symbol.isConcatSpreadable\",\"对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开\",\"Symbol.species\",\"创建衍生对象时，会使用该属性\",\"Symbol.match\",\"当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。\",\"Symbol.replace\",\"当该对象被 str.replace(myObject)方法调用时，会返回该方法的返回值。\",\"Symbol.search\",\"当该对象被 str.search (myObject)方法调用时，会返回该方法的返回值。\",\"Symbol.split\",\"当该对象被 str.split(myObject)方法调用时，会返回该方法的返回值\",\"Symbol.iterator\",\"对象进行 for...of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器\",\"Symbol.toPrimitive\",\"该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。\",\"Symbol. toStringTag\",\"在该对象上面调用 toString 方法时，返回该方法的返回值\",\"Symbol. unscopables\",\"该对象指定了使用 with 关键字时，哪些属性会被 with环境排除\"]},\"66\":{\"h\":\"11.迭代器\",\"t\":[\"遍历器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。\",\"ES6 创造了一种新的遍历命令 for...of 循环，Iterator 接口主要供 for...of 消费\",\"原生具备 iterator 接口的数据(可用 for of 遍历)\",\"a) Array\",\"b) Arguments\",\"c) Set\",\"d) Map\",\"e) String\",\"f) TypedArray\",\"g) NodeList\",\"工作原理\",\"a) 创建一个指针对象，指向当前数据结构的起始位置\",\"b) 第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员\",\"c) 接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员\",\"d) 每调用 next 方法返回一个包含 value 和 done 属性的对象\",\"// 声明一个数组 const xiyou = ['唐僧', '孙悟空', '猪八戒', '沙僧']; // 使用 for...of 遍历数组 for (let v of xiyou) { console.log(v); } let iterator = xiyou[Symbol.iterator](); // 调用对象的next方法 console.log(iterator.next()); console.log(iterator.next()); console.log(iterator.next()); console.log(iterator.next()); console.log(iterator.next()); // 重新初始化对象，指针也会重新回到最前面 let iterator1 = xiyou[Symbol.iterator](); console.log(iterator1.next()); \",\"自定义遍历对象\",\"const banji = { name: '终极一班', stus: [ 'a', 'b', 'c', 'd', ], [Symbol.iterator]() { let index = 0 let _this = this return { next: function () { console.log(this) if (index < _this.stus.length) { const result = {value: _this.stus[index], done: false} index++; return result } else { return {value: undefined, done: true} } } } } } // 遍历对象 for (let v of banji) { console.log(v); } \"]},\"67\":{\"h\":\"12.生成器\",\"t\":[\"生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同\",\"代码说明：\",\"的位置没有限制\",\"生成器函数返回的结果是迭代器对象，调用迭代器对象的 next 方法可以得到\",\"yield 语句后的值\",\"yield 相当于函数的暂停标记，也可以认为是函数的分隔符，每调用一次 next\",\"方法，执行一段代码\",\"next 方法可以传递实参，作为 yield 语句的返回值\",\"function * gen(){ yield '一只没有耳朵'; yield '一只没有尾巴'; return '真奇怪'; } let iterator = gen(); console.log(iterator.next()); console.log(iterator.next()); console.log(iterator.next()); \",\"生成器函数参数的传递\",\"function * gen(arg){ console.log(arg); let one = yield 111; console.log(one); let two = yield 222; console.log(two); let three = yield 333; console.log(three); } let iterator = gen(\\\"AAA\\\"); console.log(iterator.next()); // 会执行yield 111; // next()方法是可以传入参数的，传入的参数作为第一条(上一条)语句yield 111的返回 结果 console.log(iterator.next(\\\"BBB\\\")); // 会执行yield 222; console.log(iterator.next(\\\"CCC\\\")); // 会执行yield 333; console.log(iterator.next(\\\"DDD\\\")); // 继续往后走，未定义; \",\"生成器函数实例一\",\"// 异步编程 文件操作 网络操作（ajax，request） 数据库操作 // 需求：1s后控制台输出111 再过2s后控制台输出222 再过3s后控制台输出333 // 一种做法：回调地狱 // setTimeout(()=>{ // console.log(111); // setTimeout(()=>{ // console.log(222); // setTimeout(()=>{ // console.log(333); // },3000) // },2000) // },1000) // 另一种做法 function one(){ setTimeout(()=>{ console.log(111); iterator.next(); },1000) } function two(){ setTimeout(()=>{ console.log(222); iterator.next(); },1000) } function three(){ setTimeout(()=>{ console.log(333); iterator.next(); },1000) } function * gen(){ yield one(); yield two(); yield three(); } // 调用生成器函数 let iterator = gen(); iterator.next(); \",\"生成器函数实例二\",\"// 模拟获取: 用户数据 订单数据 商品数据 function getUsers(){ setTimeout(()=>{ let data = \\\"用户数据\\\"; // 第二次调用next，传入参数，作为第一个的返回值 iterator.next(data); // 这里将data传入 },1000); } function getOrders(){ setTimeout(()=>{ let data = \\\"订单数据\\\"; iterator.next(data); // 这里将data传入 },1000); } function getGoods(){ setTimeout(()=>{ let data = \\\"商品数据\\\"; iterator.next(data); // 这里将data传入 },1000); } function * gen(){ let users = yield getUsers(); console.log(users); let orders = yield getOrders(); console.log(orders); let goods = yield getGoods(); console.log(goods); // 这种操作有点秀啊！ } let iterator = gen(); iterator.next(); \"]},\"68\":{\"h\":\"13.Promise\",\"t\":[\"Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，用来封装异步操作 并可以获取其成功或失败的结果；\",\"Promise 构造函数: Promise (excutor) {}；\",\"Promise.prototype.then 方法；\",\"Promise.prototype.catch 方法；\",\"基本使用\",\"// 实例化 Promise 对象 // Promise 对象三种状态：初始化、成功、失败 const p = new Promise(function(resolve,reject){ setTimeout(function(){ // 成功 // let data = \\\"数据\\\"; // 调用resolve，这个Promise 对象的状态就会变成成功 // resolve(data); // 失败 let err = \\\"失败了！\\\"; reject(err); },1000); }); Promise封装读取文件： 一般写法： 运行结果： // 成功 // 调用 Promise 对象的then方法，两个参数为函数 p.then(function(value){ // 成功 console.log(value); }, function(season){ // 失败 console.log(season); }); \",\"Promise封装读取文件\",\"// 1、引入 fs 模块 const fs = require(\\\"fs\\\"); // 2、调用方法，读取文件 // fs.readFile(\\\"resources/text.txt\\\",(err,data)=>{ // // 如果失败则抛出错误 // if(err) throw err; // // 如果没有出错，则输出内容 // console.log(data.toString()); // }); // 3、使用Promise封装 const p = new Promise(function(resolve,data){ fs.readFile(\\\"resources/text.txt\\\",(err,data)=>{ // 判断如果失败 if(err) reject(err); // 如果成功 resolve(data); }); }); p.then(function(value){ console.log(value.toString()); },function(reason){ console.log(reason); // 读取失败 }) \",\"Promise封装ajax请求\",\"// 请求地址：https://api.apiopen.top/getJoke // 原生请求 // 1、创建对象 const xhr = new XMLHttpRequest(); // 2、初始化 xhr.open(\\\"GET\\\", \\\"https://api.apiopen.top/getJoke\\\"); // 3、发送 xhr.send(); // 4、绑定事件，处理响应结果 xhr.onreadystatechange = function () { // 判断状态 if (xhr.readyState == 4) { // 判断响应状态码 200-299 if (xhr.status >= 200 && xhr.status <= 299) { // 成功 console.log(xhr.response); } else { // 失败 console.error(xhr.status); } } } // Promise const p = new Promise(function (resolve, reason) { // 原生请求 // 1、创建对象 const xhr = new XMLHttpRequest(); // 2、初始化 xhr.open(\\\"GET\\\", \\\"https://api.apiopen.top/getJoke\\\"); // 3、发送 xhr.send(); // 4、绑定事件，处理响应结果 xhr.onreadystatechange = function () { // 判断状态 if (xhr.readyState == 4) { // 判断响应状态码 200-299 if (xhr.status >= 200 && xhr.status <= 299) { // 成功 resolve(xhr.response); } else { // 失败 reason(xhr.status); } } } }); p.then(function (value) { console.log(value.toString()); }, function (reason) { console.log(reason); // 读取失败 }) \",\"Promise解决回调地狱\",\"// 3、使用Promise实现 const p = new Promise((resolve, reject) => { fs.readFile(\\\"resources/text.txt\\\", (err, data) => { resolve(data); }); }); p.then(value => { return new Promise((resolve, reject) => { fs.readFile(\\\"resources/test1.txt\\\", (err, data) => { resolve([value, data]); }); }) }).then(value => { return new Promise((resolve, reject) => { fs.readFile(\\\"resources/test2.txt\\\", (err, data) => { // 存入数组 value.push(data); resolve(value); }); }) }).then(value => { console.log(value.join(\\\"\\\\r\\\\n\\\")); }) \",\"Promise对象的catch方法\",\"// Promise对象catch方法 const p = new Promise((resolve,reject)=>{ setTimeout(()=>{ // 设置p对象的状态为失败，并设置失败的值 reject(\\\"失败啦~！\\\"); },1000); }) // p.then(value=>{ // console.log(value); // },reason=>{ // console.warn(reason); // }); p.catch(reason=>{ console.warn(reason); }); \"]},\"69\":{\"h\":\"14.Set集合\",\"t\":[\"ES6 提供了新的数据结构 Set（集合）。它类似于数组，但成员的值都是唯一的，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历，集合的属性和方法：\",\"size 返回集合的元素个数；\",\"add 增加一个新元素，返回当前集合；\",\"delete 删除元素，返回 boolean 值；\",\"has 检测集合中是否包含某个元素，返回 boolean 值；\",\"clear 清空集合，返回 undefined；\",\"基本使用\",\"// Set集合 let s = new Set(); console.log(s,typeof s); let s1 = new Set([\\\"大哥\\\",\\\"二哥\\\",\\\"三哥\\\",\\\"四哥\\\",\\\"三哥\\\"]); console.log(s1); // 自动去重 // 1. size 返回集合的元素个数； console.log(s1.size); // 2. add 增加一个新元素，返回当前集合； s1.add(\\\"大姐\\\"); console.log(s1); // 3. delete 删除元素，返回 boolean 值； let result = s1.delete(\\\"三哥\\\"); console.log(result); console.log(s1); // 4. has 检测集合中是否包含某个元素，返回 boolean 值； let r1 = s1.has(\\\"二姐\\\"); console.log(r1); // 5. clear 清空集合，返回 undefined； s1.clear(); console.log(s1); \",\"Set实例\",\" // Set集合实践 let arr = [1, 2, 3, 4, 5, 4, 3, 2, 1]; // 数组去重 let s1 = new Set(arr); console.log(s1); // 交集 let arr2 = [3, 4, 5, 6, 5, 4, 3]; // 看来我需要学学数组的一些方法 let result = [...new Set(arr)].filter(item => new Set(arr2).has(item)); console.log(result); // 并集 // ... 为扩展运算符，将数组转化为逗号分隔的序列 let union = [...new Set([...arr, ...arr2])]; console.log(union); // 差集：比如集合1和集合2求差集，就是1里面有的，2里面没的 let result1 = [...new Set(arr)].filter(item => !(new Set(arr2).has(item))); console.log(result1); \"]},\"70\":{\"h\":\"15.Map集合\",\"t\":[\"ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类 型的值（包括对象）都可以当作键。Map 也实现了iterator 接口，所以可以使用『扩展运算符』和 『for…of…』进行遍历；\",\"Map 的属性和方法：\",\"size 返回 Map 的元素个数；\",\"set 增加一个新元素，返回当前 Map；\",\"get 返回键名对象的键值；\",\"has 检测 Map 中是否包含某个元素，返回 boolean 值；\",\"clear 清空集合，返回 undefined；\",\"代码实现\",\"// Map集合 // 创建一个空 map let m = new Map(); // 创建一个非空 map let m2 = new Map([ ['name', '尚硅谷'], ['slogon', '不断提高行业标准'] ]); // 1. size 返回 Map 的元素个数； console.log(m2.size); // 2. set 增加一个新元素，返回当前 Map； m.set(\\\"皇帝\\\", \\\"大哥\\\"); m.set(\\\"丞相\\\", \\\"二哥\\\"); console.log(m); // 3. get 返回键名对象的键值； console.log(m.get(\\\"皇帝\\\")); // 4. has 检测 Map 中是否包含某个元素，返回 boolean 值； console.log(m.has(\\\"皇帝\\\")); // 5. clear 清空集合，返回 undefined； m.clear(); console.log(m); \"]},\"71\":{\"h\":\"16.class类\",\"t\":[\"ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键 字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做 到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已；\",\"class 声明类；\",\"constructor 定义构造函数初始化；\",\"extends 继承父类；\",\"super 调用父级构造方法；\",\"static 定义静态方法和属性；\",\"父类方法可以重写；\",\"// 手机 ES5写法 // function Phone(brand,price){ // this.brand = brand; // this.price = price; // } // // 添加方法 // Phone.prototype.call = function(){ // console.log(\\\"我可以打电话！\\\"); // } // // 实例化对象 // let HuaWei = new Phone(\\\"华为\\\",5999); // HuaWei.call(); // console.log(HuaWei); // ES6写法 class Phone { // 构造方法，名字是固定的 constructor(brand, price) { this.brand = brand; this.price = price; } // 打电话，方法必须使用该方式写 call() { console.log(\\\"我可以打电话！\\\"); } } let HuaWei = new Phone(\\\"华为\\\", 5999); HuaWei.call(); console.log(HuaWei); \",\"class静态成员\",\"// class静态成员 // ES5写法 // function Phone(){} // Phone.name = \\\"手机\\\"; // Phone.change = function(){ // console.log(\\\"我可以改变世界！\\\"); // } // let nokia = new Phone(); // console.log(nokia.name); // undefined // // nokia.change(); // // 报错：Uncaught TypeError: nokia.change is not a function // Phone.prototype.color = \\\"黑色\\\"; // console.log(nokia.color); // 黑色 // console.log(Phone.name); // Phone.change(); // 注意：实例对象和函数对象的属性是不相通的 // ES6写法 class Phone { // 静态属性 static name = \\\"手机\\\"; static change() { console.log(\\\"我可以改变世界！\\\"); } } let nokia = new Phone(); console.log(nokia.name); console.log(Phone.name); Phone.change(); \",\"ES5构造函数实现继承\",\"// ES5构造函数继承 // 手机 function Phone(brand, price) { this.brand = brand; this.price = price; } Phone.prototype.call = function () { console.log(\\\"我可以打电话！\\\"); } // 智能手机 function SmartPhone(brand, price, color, size) { Phone.call(this, brand, price); this.color = color; this.size = size; } // 设置子级构造函数的原型 SmartPhone.prototype = new Phone; SmartPhone.prototype.constructor = SmartPhone; // 声明子类的方法 SmartPhone.prototype.photo = function () { console.log(\\\"我可以拍照！\\\"); } SmartPhone.prototype.game = function () { console.log(\\\"我可以玩游戏！\\\"); } const chuizi = new SmartPhone(\\\"锤子\\\", 2499, \\\"黑色\\\", \\\"5.5inch\\\"); console.log(chuizi); chuizi.call(); chuizi.photo(); chuizi.game(); \",\"ES6 class 类继承\",\"// ES6class类继承 class Phone { constructor(brand, price) { this.brand = brand; this.price = price; } call() { console.log(\\\"我可以打电话！\\\"); } } class SmartPhone extends Phone { // 构造函数 constructor(brand, price, color, size) { super(brand, price); // 调用父类构造函数 this.color = color; this.size = size; } photo() { console.log(\\\"我可以拍照！\\\"); } game() { console.log(\\\"我可以玩游戏！\\\"); } } const chuizi = new SmartPhone(\\\"小米\\\", 1999, \\\"黑色\\\", \\\"5.15inch\\\"); console.log(chuizi); chuizi.call(); chuizi.photo(); chuizi.game(); \",\"子类 对父类方法的重写\",\"// ES6class类继承 class Phone { constructor(brand, price) { this.brand = brand; this.price = price; } call() { console.log(\\\"我可以打电话！\\\"); } } class SmartPhone extends Phone { // 构造函数 constructor(brand, price, color, size) { super(brand, price); // 调用父类构造函数 this.color = color; this.size = size; } // 子类对父类方法重写 // 直接写，直接覆盖 // 注意：子类无法调用父类同名方法 call() { console.log(\\\"我可以进行视频通话！\\\"); } photo() { console.log(\\\"我可以拍照！\\\"); } game() { console.log(\\\"我可以玩游戏！\\\"); } } const chuizi = new SmartPhone(\\\"小米\\\", 1999, \\\"黑色\\\", \\\"5.15inch\\\"); console.log(chuizi); chuizi.call(); chuizi.photo(); chuizi.game(); \",\"class中的getter和setter\",\"// class中的getter和setter设置 class Phone { get price() { console.log(\\\"价格属性被读取了！\\\"); // 返回值 return 123; } set price(value) { console.log(\\\"价格属性被修改了！\\\"); } } // 实例化对象 let s = new Phone(); console.log(s.price); // 返回值 s.price = 2999; \"]},\"72\":{\"h\":\"17.数值扩展\"},\"73\":{\"h\":\"Number.EPSILON\",\"t\":[\"Number.EPSILON 是 JavaScript 表示的最小精度； EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16；\"]},\"74\":{\"h\":\"二进制和八进制\",\"t\":[\"ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示；\"]},\"75\":{\"h\":\"Number.isFinite() 与 Number.isNaN()\",\"t\":[\"Number.isFinite() 用来检查一个数值是否为有限的；\",\"Number.isNaN() 用来检查一个值是否为 NaN；\"]},\"76\":{\"h\":\"Number.parseInt() 与 Number.parseFloat()\",\"t\":[\"ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变；\"]},\"77\":{\"h\":\"Math.trunc\",\"t\":[\"用于去除一个数的小数部分，返回整数部分；\"]},\"78\":{\"h\":\"Number.isInteger\",\"t\":[\"Number.isInteger() 用来判断一个数值是否为整数；\",\"例子\",\"// 数值扩展 // 0. Number.EPSILON 是 JavaScript 表示的最小精度 // EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16 // function equal(a, b){ // return Math.abs(a-b) < Number.EPSILON; // } console.log(\\\"0、Number.EPSILON 是 JavaScript 表示的最小精度\\\"); // 箭头函数简化写法 equal = (a, b) => Math.abs(a - b) < Number.EPSILON; console.log(0.1 + 0.2); console.log(0.1 + 0.2 === 0.3); // false console.log(equal(0.1 + 0.2, 0.3)); // true // 1. 二进制和八进制 console.log(\\\"1、二进制和八进制\\\"); let b = 0b1010; let o = 0o777; let d = 100; let x = 0xff; console.log(x); // 2. Number.isFinite 检测一个数值是否为有限数 console.log(\\\"2、Number.isFinite 检测一个数值是否为有限数\\\"); console.log(Number.isFinite(100)); console.log(Number.isFinite(100 / 0)); console.log(Number.isFinite(Infinity)); // 3. Number.isNaN 检测一个数值是否为 NaN console.log(\\\"3. Number.isNaN 检测一个数值是否为 NaN\\\"); console.log(Number.isNaN(123)); // 4. Number.parseInt Number.parseFloat字符串转整数 console.log(\\\"4. Number.parseInt Number.parseFloat字符串转整数\\\"); console.log(Number.parseInt('5211314love')); console.log(Number.parseFloat('3.1415926神奇')); // 5. Number.isInteger 判断一个数是否为整数 console.log(\\\"5. Number.isInteger 判断一个数是否为整数\\\"); console.log(Number.isInteger(5)); console.log(Number.isInteger(2.5)); // 6. Math.trunc 将数字的小数部分抹掉 console.log(\\\"6. Math.trunc 将数字的小数部分抹掉 \\\"); console.log(Math.trunc(3.5)); // 7. Math.sign 判断一个数到底为正数 负数 还是零 console.log(\\\"7. Math.sign 判断一个数到底为正数 负数 还是零\\\"); console.log(Math.sign(100)); console.log(Math.sign(0)); console.log(Math.sign(-20000)); \"]},\"79\":{\"h\":\"18.对象扩展\",\"t\":[\"ES6 新增了一些 Object 对象的方法：\",\"Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）；\",\"Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象；\",\"proto、setPrototypeOf、 setPrototypeOf 可以直接设置对象的原型；\",\"例子\",\"// 对象扩展 // 1. Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）； console.log(Object.is(120, 120)); // === // 注意下面的区别 console.log(Object.is(NaN, NaN)); console.log(NaN === NaN); // NaN与任何数值做===比较都是false，跟他自己也如此！ // 2. Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象； const config1 = { host: \\\"localhost\\\", port: 3306, name: \\\"root\\\", pass: \\\"root\\\", test: \\\"test\\\" // 唯一存在 } const config2 = { host: \\\"http://zibo.com\\\", port: 300300600, name: \\\"root4444\\\", pass: \\\"root4444\\\", test2: \\\"test2\\\" } // 如果前边有后边没有会添加，如果前后都有，后面的会覆盖前面的 console.log(Object.assign(config1, config2)); // 3. __proto__、setPrototypeOf、 getPrototypeOf 可以直接设置对象的原型； const school = { name: \\\"尚硅谷\\\" } const cities = { xiaoqu: ['北京', '上海', '深圳'] } // 并不建议这么做 Object.setPrototypeOf(school, cities); console.log(Object.getPrototypeOf(school)); console.log(school); \"]},\"80\":{\"h\":\"19.模块化\",\"t\":[\"模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来；\",\"模块化的优势有以下几点：\",\"防止命名冲突；\",\"代码复用；\",\"高维护性；\",\"ES6 之前的模块化规范有：\",\"CommonJS => NodeJS、Browserify；\",\"AMD => requireJS；\",\"CMD => seaJS；\",\"模块功能主要由两个命令构成：export 和 import；\",\"export 命令用于规定模块的对外接口（导出模块）；\",\"import 命令用于输入其他模块提供的功能（导入模块）；\",\"基本使用\",\"export let school = \\\"尚硅谷\\\"; export function teach(){ console.log(\\\"我们可以教你开发技术！\\\"); } <!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title>模块化</title> </head> <body> <script type=\\\"module\\\"> // 引入m.js模块内容 import * as m from \\\"./js/m.js\\\"; console.log(m); console.log(m.school); m.teach(); </script> </body> </html> \",\"ES6暴露数据语法汇总\",\"逐个导出 模块\",\"// 分别暴露（导出） export let school = \\\"尚硅谷\\\"; export function teach(){ console.log(\\\"我们可以教你开发技术！\\\"); } \",\"统一导出模块\",\"// 统一暴露（导出） let school = \\\"尚硅谷\\\"; function findJob(){ console.log(\\\"我们可以帮你找到好工作！\\\"); } export {school,findJob} \",\"默认导出模块\",\"// 默认暴露（导出） export default{ school : \\\"尚硅谷\\\", change : function(){ console.log(\\\"我们可以帮你改变人生！\\\"); } } \",\"引入和使用模块\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title>模块化</title> </head> <body> <script type=\\\"module\\\"> // 引入m.js模块内容 import * as m from \\\"./js/m.js\\\"; console.log(m); console.log(m.school); m.teach(); // 引入n.js模块内容 import * as n from \\\"./js/n.js\\\"; console.log(n); console.log(n.school); n.findJob(); // 引入o.js模块内容 import * as o from \\\"./js/o.js\\\"; console.log(o); // 注意这里调用方法的时候需要加上default console.log(o.default.school); o.default.change(); </script> </body> </html> \"]},\"81\":{\"h\":\"20.Babel对ES6模块化代码转换\",\"t\":[\"Babel 是一个 JavaScript 编译器；\",\"Babel 能够将新的ES规范语法转换成ES5的语法；\",\"因为不是所有的浏览器都支持最新的ES规范，所以，一般项目中都需要使用Babel进行转换；\",\"步骤：使用Babel转换JS代码——打包成一个文件——使用时引入即可；\",\"步骤：\",\"第一步：安装工具babel-cli（命令行工具） babel-preset-env（ES转换工具） browserify（打包工具， 项目中使用的是webpack）；\",\"第二步：初始化项目\",\"npm init -\",\"第三步：安装\",\"npm i babel-cli babel-preset-env browserify\",\"第四步：使用babel转换\",\"npx babel js（js目录） -d dist/js（转化后的js目录） --presets=babel-preset-env\",\"第五步：打包\",\"npx browserify dist/js/app.js -o dist/bundle.js\",\"第六步：使用的时候 引入bundle.js\",\" <script src=\\\"./js/bundle.js\\\" type=\\\"module\\\"></script> \"]},\"82\":{\"h\":\"21.ES6模块化引入NPM包\",\"t\":[\"第一步：安装jQuery\",\"npm i jquery\",\"第二步：在app.js中使用jQuery\",\"import $ from 'jquery'\"]},\"83\":{\"h\":\"ES7\"},\"84\":{\"h\":\"1.Array.prototype.includes\",\"t\":[\"Includes 方法用来检测数组中是否包含某个元素，返回布尔类型值； 判断数组中是否包含某元素，语法：arr.includes(元素值)；\",\"// includes let arr = [1,2,3,4,5]; console.log(arr.includes(1)); \"]},\"85\":{\"h\":\"2.指数操作符\",\"t\":[\"在 ES7 中引入指数运算符**\",\"// 指数操作符 console.log(Math.pow(2,10)) console.log(2**10); \"]},\"86\":{\"h\":\"ES8\"},\"87\":{\"h\":\"1.async和await\",\"t\":[\"async 和 await 两种语法结合可以让异步代码看起来像同步代码一样； 简化异步函数的写法；\",\"1.async函数的返回值为 promise对象\",\"2.promise对象的结果有async函数执行的返回值决定\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title>async函数</title> </head> <body> <script> // async函数：异步函数 async function fn(){ // return 123; // 返回普通数据 // 若报错，则返回的Promise对象也是错误的 // throw new Error(\\\"出错啦！\\\"); // 若返回的是Promise对象，那么返回的结果就是Promise对象的结果 return new Promise((resolve,reject)=>{ // resolve(\\\"成功啦！\\\"); reject(\\\"失败啦！\\\"); }) } const result = fn(); // console.log(result); // 返回的结果是一个Promise对象 // 调用then方法 result.then(value => { console.log(value); },reason => { console.warn(reason); }); </script> </body> </html> \",\"await表达式\",\"await 必须写在 async 函数中；\",\"await 右侧的表达式一般为 promise 对象；\",\"await 返回的是 promise 成功的值；\",\"await 的 promise 失败了, 就会抛出异常, 需要通过 try...catch 捕获处理；\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title>await表达式</title> </head> <body> <script> // async函数 + await表达式：异步函数 // 创建Prmise对象 const p = new Promise((resolve,reject)=>{ resolve(\\\"成功啦！\\\"); }) async function fn(){ // await 返回的是 promise 成功的值 let result = await p; console.log(result); // 成功啦！ } fn(); </script> </body> </html> \",\"async与await结合读取文件\",\"// 导入模块 const fs = require(\\\"fs\\\"); // 读取 function readText() { return new Promise((resolve, reject) => { fs.readFile(\\\"../resources/text.txt\\\", (err, data) => { //如果失败 if (err) reject(err); //如果成功 resolve(data); }) }) } //声明一个 async 函数 async function main() { //获取为学内容 let t0 = await readText(); console.log(t0.toString()); } main(); \",\"async和await结合发送ajax请求\",\"// async 和 await 结合发送ajax请求 function sendAjax(url) { return new Promise((resolve, reject) => { // 1、创建对象 const x = new XMLHttpRequest(); // 2、初始化 x.open(\\\"GET\\\", url); // 3、发送 x.send(); // 4、事件绑定 x.onreadystatechange = function () { if (x.readyState == 4) { if (x.status >= 200 && x.status <= 299) { // 成功 resolve(x.response); } else { // 失败 reject(x.status); } } } }); } // 测试 // const result = sendAjax(\\\"https://api.apiopen.top/getJoke\\\"); // result.then(value=>{ // console.log(value); // },reason=>{ // console.warn(reason); // }) // 使用async和await async function main() { let result = await sendAjax(\\\"https://api.apiopen.top/getJoke\\\"); console.log(result); } main(); \"]},\"88\":{\"h\":\"2.对象方法扩展\",\"t\":[\"Object.values()方法：返回一个给定对象的所有可枚举属性值的数组；\",\"Object.entries()方法：返回一个给定对象自身可遍历属性 [key,value] 的数组；\",\"Object.getOwnPropertyDescriptors()该方法：返回指定对象所有自身属性的描述对象；\",\"// 对象方法扩展 let school = { name: \\\"訾博\\\", age: 24, sex: \\\"男\\\" } // 获取对象所有的键 console.log(Object.keys(school)); // 获取对象所有的值 console.log(Object.values(school)); // 获取对象的entries console.log(Object.entries(school)); // 创建map const map = new Map(Object.entries(school)); console.log(map); console.log(map.get(\\\"name\\\")); // 返回指定对象所有自身属性的描述对象 console.log(Object.getOwnPropertyDescriptors(school)); // 参考内容： const obj = Object.create(null, { name: { // 设置值 value: \\\"訾博\\\", // 属性特性 writable: true, configuration: true, enumerable: true } }); \"]},\"89\":{\"h\":\"ES9\"},\"90\":{\"h\":\"1.Rest 参数与 spread 扩展运算符\",\"t\":[\"Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组，在 ES9 中为对象提供了 像数组一样的 rest 参数和扩展运算符；\",\"// Rest参数与spread扩展运算符 // Rest 参数与 spread 扩展运算符在 ES6 中已经引入， // 不过 ES6 中只针对于数组，在 ES9 中为对象提供了像 // 数组一样的 rest 参数和扩展运算符； //rest 参数 function connect({ host, port, ...user }) { console.log(host); console.log(port); console.log(user); } connect({ host: '127.0.0.1', port: 3306, username: 'root', password: 'root', type: 'master' }); //对象合并 const skillOne = { q: '天音波' } const skillTwo = { w: '金钟罩' } const skillThree = { e: '天雷破' } const skillFour = { r: '猛龙摆尾', // 自己测试，可用 z: '胡说八道' } const mangseng = { ...skillOne, ...skillTwo, ...skillThree, ...skillFour }; console.log(mangseng) // ...skillOne => q: '天音波', w: '金钟罩' \"]},\"91\":{\"h\":\"2.正则扩展：命名捕获分组\",\"t\":[\"// 正则扩展：命名捕获分组 // 声明一个字符串 let str = '<a href=\\\"http://www.baidu.com\\\">訾博</a>'; // 需求：提取url和标签内文本 // 之前的写法 const reg = /<a href=\\\"(.*)\\\">(.*)<\\\\/a>/; // 执行 const result = reg.exec(str); console.log(result); // 结果是一个数组，第一个元素是所匹配的所有字符串 // 第二个元素是第一个(.*)匹配到的字符串 // 第三个元素是第二个(.*)匹配到的字符串 // 我们将此称之为捕获 console.log(result[1]); console.log(result[2]); // 命名捕获分组 const reg1 = /<a href=\\\"(?<url>.*)\\\">(?<text>.*)<\\\\/a>/; const result1 = reg1.exec(str); console.log(result1); // 这里的结果多了一个groups // groups: // text:\\\"訾博\\\" // url:\\\"http://www.baidu.com\\\" console.log(result1.groups.url); console.log(result1.groups.text); \"]},\"92\":{\"h\":\"3.正则扩展：反向断言\",\"t\":[\"ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选；\",\"// 正则扩展：反向断言 // 字符串 let str = \\\"JS5201314你知道么555啦啦啦\\\"; // 需求：我们只想匹配到555 // 正向断言 const reg = /\\\\d+(?=啦)/; // 前面是数字后面是啦 const result = reg.exec(str); console.log(result); // 反向断言 const reg1 = /(?<=么)\\\\d+/; // 后面是数字前面是么 const result1 = reg.exec(str); console.log(result1); \"]},\"93\":{\"h\":\"4.正则扩展：dotAll模式\",\"t\":[\"正则表达式中点.匹配除回车外的任何单字符，标记『s』改变这种行为，允许行终止符出现；\",\"// 正则扩展：dotAll 模式 // dot就是. 元字符，表示除换行符之外的任意单个字符 let str = ` <ul> <li> <a>肖生克的救赎</a> <p>上映日期: 1994-09-10</p> </li> <li> <a>阿甘正传</a> <p>上映日期: 1994-07-06</p> </li> </ul> `; // 需求：我们想要将其中的电影名称和对应上映时间提取出来，存到对象 // 之前的写法 // const reg = /<li>\\\\s+<a>(.*?)<\\\\/a>\\\\s+<p>(.*?)<\\\\/p>/; // dotAll 模式 const reg = /<li>.*?<a>(.*?)<\\\\/a>.*?<p>(.*?)<\\\\/p>/gs; // const result = reg.exec(str); // console.log(result); let result; let data = []; while(result = reg.exec(str)){ console.log(result); data.push({title:result[1],time:result[2]}); } console.log(data); \"]},\"94\":{\"h\":\"ES10\"},\"95\":{\"h\":\"1.Object.fromEntries\",\"t\":[\"将二维数组或者map转换成对象； 之前学的Object.entries是将对象转换成二维数组；\",\"// Object.fromEntries：将二维数组或者map转换成对象 // 之前学的Object.entries是将对象转换成二维数组 // 此方法接收的是一个二维数组，或者是一个map集合 // 二维数组 const result = Object.fromEntries([ [\\\"name\\\",\\\"訾博\\\"], [\\\"age\\\",24], ]); console.log(result); const m = new Map(); m.set(\\\"name\\\",\\\"訾博\\\"); m.set(\\\"age\\\",24); const result1 = Object.fromEntries(m); console.log(result1); \"]},\"96\":{\"h\":\"2.trimStart和 trimEnd\",\"t\":[\"去掉字符串前后的空白字符；\",\"// trimStart 和 trimEnd let str = \\\" zibo \\\"; console.log(str.trimLeft()); console.log(str.trimRight()); console.log(str.trimStart()); console.log(str.trimEnd()); \"]},\"97\":{\"h\":\"3.Array.prototype.flat与flatMap\",\"t\":[\"将多维数组转换成低维数组；\",\"// Array.prototype.flat 与 flatMap // flat // 将多维数组转换成低维数组 // 将二维数组转换成一维数组 const arr = [1,2,3,[4,5],6,7]; console.log(arr.flat()); // 将三维数组转换成二维数组 const arr2 = [1,2,3,[4,5,[6,7]],8,9]; console.log(arr2.flat()); // 将三维数组转换成一维数组 console.log(arr2.flat(2)); // flatMap const arr3 = [1,2,3,4,5]; const result0 = arr3.map(item => item * 10); console.log(result0); const result = arr3.map(item => [item * 10]); console.log(result); const result1 = arr3.flatMap(item => [item * 10]); console.log(result1); \"]},\"98\":{\"h\":\"4.Symbol.prototype.description\",\"t\":[\"获取Symbol的描述字符串；\",\"// Symbol.prototype.description // 获取Symbol的描述字符串 // 创建Symbol let s = Symbol(\\\"訾博\\\"); console.log(s.description) \"]},\"99\":{\"h\":\"ES11\"},\"100\":{\"h\":\"1.String.prototype.matchAll\",\"t\":[\"用来得到正则批量匹配的结果；\",\"// String.prototype.matchAll // 用来得到正则批量匹配的结果 let str = ` <ul> <li> <a>肖生克的救赎</a> <p>上映日期: 1994-09-10</p> </li> <li> <a>阿甘正传</a> <p>上映日期: 1994-07-06</p> </li> </ul> `; // 正则 const reg = /<li>.*?<a>(.*?)<\\\\/a>.*?<p>(.*?)<\\\\/p>/sg; const result = str.matchAll(reg); // 返回的是可迭代对象，可用扩展运算符展开 // console.log(...result); // 使用for...of...遍历 for(let v of result){ console.log(v); } \"]},\"101\":{\"h\":\"2.类的私有属性\",\"t\":[\"私有属性外部不可访问直接；\",\"// 类的私有属性 class Person { // 公有属性 name; // 私有属性 #age; #weight; // 构造方法 constructor(name, age, weight) { this.name = name; this.#age = age; this.#weight = weight; } intro() { console.log(this.name); console.log(this.#age); console.log(this.#weight); } } // 实例化 const girl = new Person(\\\"小兰\\\", 18, \\\"90kg\\\"); console.log(girl); // 公有属性的访问 console.log(girl.name); // 私有属性的访问 console.log(girl.age); // undefined // 报错Private field '#age' must be declared in an enclosing class // console.log(girl.#age); girl.intro(); \"]},\"102\":{\"h\":\"3.Promise.allSettled\",\"t\":[\"获取多个promise执行的结果集；\",\"// Promise.allSettled // 获取多个promise执行的结果集 // 声明两个promise对象 const p1 = new Promise((resolve, reject) => { setTimeout(() => { resolve(\\\"商品数据——1\\\"); }, 1000); }); const p2 = new Promise((resolve, reject) => { setTimeout(() => { reject(\\\"失败啦\\\"); }, 1000); }); // 调用Promise.allSettled方法 const result = Promise.allSettled([p1, p2]); console.log(result); const result1 = Promise.all([p1, p2]); // 注意区别 console.log(result1); \"]},\"103\":{\"h\":\"4.可选链操作符\",\"t\":[\"如果存在则往下走，省略对对象是否传入的层层判断；\",\"// 可选链操作符 // ?. function main(config) { // 传统写法 // const dbHost = config && config.db && config.db.host; // 可选链操作符写法 const dbHost = config?.db?.host; console.log(dbHost); } main({ db: { host: \\\"192.168.1.100\\\", username: \\\"root\\\" }, cache: { host: \\\"192.168.1.200\\\", username: \\\"admin\\\" } }); \"]},\"104\":{\"h\":\"5.动态import导入\",\"t\":[\"动态导入模块，什么时候使用时候导入；\",\"// hello.js export function hello(){ alert('Hello'); } // app.js // import * as m1 from \\\"./hello.js\\\"; // 传统静态导入 //获取元素 const btn = document.getElementById('btn'); btn.onclick = function () { import('./hello.js').then(module => { module.hello(); }); } \"]},\"105\":{\"h\":\"6.BigInt\",\"t\":[\"更大的整数；\",\"// BigInt // 大整型 let n = 100n; console.log(n,typeof(n)); // 函数：普通整型转大整型 let m = 123; console.log(BigInt(m)); // 用于更大数值的运算 let max = Number.MAX_SAFE_INTEGER; console.log(max); console.log(max+1); console.log(max+2); // 出错了 console.log(BigInt(max)); console.log(BigInt(max)+BigInt(1)); console.log(BigInt(max)+BigInt(2)); \"]},\"106\":{\"h\":\"7.globalThis对象\",\"t\":[\"globalThis 对象 : 始终指向全局对象window\"]},\"107\":{\"c\":[\"web\"]},\"108\":{\"c\":[\"js\"]},\"109\":{\"h\":\"ECMA\"},\"110\":{\"c\":[\"ECMA\"]},\"111\":{\"h\":\"JS知识相关\"},\"112\":{\"h\":\"1.基础总结\"},\"113\":{\"h\":\"1.数据类型\"},\"114\":{\"h\":\"分类 ：\",\"t\":[\"基本数据类型 \",\"string：任意字符串\",\"number：任意数值\",\"Boolean：true、false\",\"null：null\",\"undefined：undefined\",\"symbol\",\"bigInt\",\"引用类型 \",\"object：任意对象\",\"function：特别对象（可以执行）\",\"array：特别对象（内部数据有序/数据下标）\"]},\"115\":{\"h\":\"判断：\",\"t\":[\"typeof：数值、字符串、布尔值、undefined、function。 \",\"不能区别的：null、object，object和array\",\"instanceof：判断对象的具体类型\",\"===：null/undefined\",\"object.prototype.toString.call()\"]},\"116\":{\"h\":\"相关问题：\",\"t\":[\"1.undefined与null的区别？\",\"undefined定义了未赋值，null定义且赋值了，且值为null\",\"2.什么时候给对象赋值为null？\",\"初始赋值，表明将要赋值为对象\",\"结束前赋值，让对象成为垃圾对象（被垃圾回收器回收）\",\"3.严格区分变量类型与数据类型？\",\"数据类型： \",\"基本类型\",\"对象类型\",\"变量类型 \",\"基本类型 ：保存的都是基本类型的数据\",\"引用数据类型：保存的都是地址值\"]},\"117\":{\"h\":\"2.数据、变量与内存\"},\"118\":{\"h\":\"1.什么是数据？\",\"t\":[\"存储在内存中代表特定信息的东东，本质上是0101二进制\",\"数据的特点：可传递、可运算\",\"一切皆数据，函数也是数据\",\"内存中所有操作的目标是：数据 \",\"算术运算\",\"逻辑运算\",\"赋值运算\",\"运行函数\"]},\"119\":{\"h\":\"2.什么是内存？\",\"t\":[\"内存条通电以后产生的可存储数据的空间（临时的）\",\"产生和死亡：内存条（集成电路板）——通电——产生一定容量的存储空间——存储各种数据——断电——内存全部消失\",\"分配内存：声明变量和函数或创建对象时，JS引擎 会自动分配一定大小的内存来存放对应的数据\",\"释放内存：清空内存中的数据，标识内存可以再分配使用（内存不释放就不能复用） \",\"自动释放：栈空间的局部变量\",\"垃圾回调器回调：堆空间的垃圾对象\",\"一块内存包含两个数据： \",\"内部存储的数据（一般数据/地址数据）\",\"内存地址值数据\",\"内存分类 \",\"栈：全局变量、局部变量\",\"堆：对象\"]},\"120\":{\"h\":\"3.什么是变量？\",\"t\":[\"可变化的量，由变量名和变量值组成 ，每个变量对应一块内存\",\"变量名用来查找对应的内存，变量值就是内存中保存的数值数据\"]},\"121\":{\"h\":\"4.内存，数据，变量三者之间的关系\",\"t\":[\"内存是用来存储数据的空间\",\"变量是内存的标识，我们通过变量查找到内存\"]},\"122\":{\"h\":\"相关问题\",\"t\":[\"5.在js调用函数的时候传递变量参数时，传递的时引用还是传递？ ——值\",\"理解一：都是值（基本/地址值）传递 \",\"理解二：可能是值传递，也可能是引用传递（地址值） \",\"6.JS引擎如何内存管理\",\"1.内存生命周期 * 分配小内存空间，得到使用权 * 存储数据，可以反复进行操作 * 释放小内存空间 \",\"2.释放内存 * 局部对象：函数执行完自动释放 * 对象：成为垃圾对象==》垃圾回收器回收 \"]},\"123\":{\"h\":\"3.对象\"},\"124\":{\"h\":\"什么是对象？\",\"t\":[\"可以存储多个数据，多个数据的封装体\",\"用来保存多个数据的容器\"]},\"125\":{\"h\":\"为什么要用对象？\",\"t\":[\"统一管理多个数据\"]},\"126\":{\"h\":\"对象的组成\",\"t\":[\"属性：属性名 + 属性值 组成\",\"方法：一种特别的属性（属性值是函数）\"]},\"127\":{\"h\":\"如何访问内部数据\",\"t\":[\".属性名\",\"['属性名']\"]},\"128\":{\"h\":\"什么时候必须使用['属性名']的方式？\",\"t\":[\"1.属性名包含特殊字符串：- 空格等\",\"2.变量名不确定\"]},\"129\":{\"h\":\"4.函数\",\"t\":[\"什么是函数？\",\"实现特定功能的n条语句的封装体\",\"只有函数是可以执行的，其他类型 的数据不能执行\",\"为什么用函数？\",\"提高代码复用\",\"便于阅读交流\",\"如何定义函数？\",\"函数声明 function test(){}\",\"表达式 var a = function test(){}\",\"二者区别 ：变量提升\",\"如何调用？\",\"test() 直接调用\",\"obj.test()\",\"new test()\",\"test.call/apply(obj) 临时让test成为obj的方法进行调用\",\"什么函数才是回调函数？\",\"1.你定义的\",\"2.你没有调用\",\"3.但是他最终执行了(在某个时刻，某个条件下)\",\"常见的回调函数\",\"dom事件回调——发生事件的dom元素\",\"定时器回调函数——window\",\"ajax请求回调\",\"生命周期回调\"]},\"130\":{\"h\":\"5.IIFE\",\"t\":[\"理解\",\"全称：Immediately-Invoked Function Expression\",\"作用\",\"隐藏实现\",\"不会污染外部命名空间\",\"用它来编写jS模块\"]},\"131\":{\"h\":\"6.函数中的this\",\"t\":[\"this是什么？\",\"任何函数本质上都是通过某个对象来调用的，如果没有直接指定就是window\",\"所有函数内部都有一个变量this\",\"它的值是调用当前函数的当前对象\",\"如何确定 this 的值\",\"test() window\",\"p.test() p\",\"new test() 新创建的对象\",\"p.call(obj) obj\"]},\"132\":{\"h\":\"2.函数高级\"},\"133\":{\"h\":\"1.原型与原型链\"},\"134\":{\"h\":\"1.原型\",\"t\":[\"函数的prototype属性\",\"每个函数都有一个prototype属性，它默认指向一个Object空对象（即成为：原型对象）\",\"原型对象中有一个属性：constructor，它指向函数对象\",\"给原型对象添加属性（一般都是方法）\",\"作用：函数的所有实例对象自动拥有原型中的属性 （方法）\",\"console.log(Date.prototype); console.log(Date.prototype.constructor === Date); function Test() { } Test.prototype.func = function () { console.log(123); } console.log(test.prototype.constructor === Test); \"]},\"135\":{\"h\":\"2.显示原型与隐式原型\",\"t\":[\"1.每个函数function都有一个prototype 即显式原型\",\"2.每个实例对象都有一个__protp__,可称为隐式原型\",\"3.对象的隐式原型的值为其对应构造函数的显式原型的值\",\"4.总结\",\"函数的prototype属性：在定义函数时自动添加的，默认值是一个 空Object对象\",\"对象的__proto__属性：在创建对象时自动添加的，默认值为构造函数的prototype属性值\",\"程序员可以直接操作显式原型，但不能直接从操作隐式原型（ES6之前）\",\"function Fn() {} console.log(Fn.prototype) var fn = new Fn() console.log(fn.__proto__); console.log(Fn.prototype === fn.__proto__) \"]},\"136\":{\"h\":\"3.原型链\",\"t\":[\"1.原型链\",\"访问一个对象的属性时 \",\"先在自身的属性中查找，找到返回\",\"如果没有，再沿着__proto__这条链向上查找，找到返回\",\"如果最终没找到，返回undefined\",\"别名 ：隐式原型链\",\"作用：查找对象的属性（方法）\",\"函数的显式原型指向的对象默认是空Object实例对象 （但Object不满足）\",\"function Fn() { this.test1 = function () { console.log('test1'); } } Fn.prototype.test2 = function () { console.log('test2'); } var fn = new Fn() fn.test1() fn.test2() console.log(fn.toString()); // fn.test3() // 函数的显式原型指向的对象默认是空Object实例对象 （但Object不满足） console.log(Fn.prototype instanceof Object); // true console.log(Object.prototype instanceof Object); // false console.log(Function.prototype instanceof Object); // true // 所有函数都是Function实例（包含Function） console.log(Function.__proto__ === Function.prototype) // true // Object的原型对象是原型链的尽头 console.log(Object.prototype.__proto__) // null console.log(Object.prototype.toString.call(Object.prototype)) // [object object] \"]},\"137\":{\"h\":\"4.原型链属性问题\",\"t\":[\"1.读取对象的属性值时：会自动到原型链中查找\",\"2.设置对象的属性值时：不会查找原型链，如果当前对象中没有此属性，直接添加此属性并设置其值\",\"3.方法一般定义在原型中，属性一般通过构造函数定义在对象本身上\"]},\"138\":{\"h\":\"5.原型链面试题\",\"t\":[\"// test1 /* * 首先，实例对象b默认的隐式原型指向源构造函数的显式原型，因此 b.n === 1 * 此时，构造函数的原型链上并没有m属性，因此是undefined * 这时，又将构造函数的原型链给了一个新的指向，此时有了新的n、m属性 * 因此 c.m c.n均可以获取到对应的值 * */ function A() { } A.prototype.n = 1 var b = new A() A.prototype = { n: 2, m: 3 } var c = new A() console.log(b.n, b.m, c.n, c.m) // 1 undefined 2 3 // test2 /* * f的实例对象的隐式原型指向其构造函数F的显式原型，而构造函数F的显式原型又指向了空Object对象 * 空Object对象的隐式原型指向了Obejct 的显式原型，因此 f.a()可以获取到 * 但此时 Object的显式原型对象上并没有 b 方法，因此f.b 为undefined，undefined加括号执行会报错 * 而F作为Function的实例对象，它的隐式原型指向构造函数Function的显式原型 * Function的显式原型，沿着隐式原型找到了重点Object ，因此 F.a() F.b()都可以获取到 * * */ var F = function () { } Object.prototype.a = function () { console.log('aaa'); } Function.prototype.b = function () { console.log('bbb'); } var f = new F() f.a(); f.b(); F.a(); F.b(); \"]},\"139\":{\"h\":\"2.执行上下文与执行上下文栈\"},\"140\":{\"h\":\"1.变量提升与函数提升\",\"t\":[\"1.变量声明提升\",\"通过var定义（声明）的变量，在定义语句之前就可以访问到\",\"值：undefined\",\"2.函数声明提升\",\"通过function声明的函数，在之前 就可以调用\",\"值：函数定义对象\",\"3.问题：变量提升和函数提升是如何产生的？\",\"// 面试题 var a = 3 function fn() { console.log(a); // undefined var a = 4 } fn2() // 函数提升 function fn2() { console.log('fn2'); } \"]},\"141\":{\"h\":\"2.执行上下文\",\"t\":[\"1.代码分类\",\"全局代码\",\"局部代码（函数）\",\"2.全局执行上下文\",\"在执行全局代码前window确定为全局执行上下文\",\"对全局数据进行预处理 \",\"var定义的全局变量==》undefined，添加window的属性\",\"function声明的全局函数==》赋值（fun），添加window的方法\",\"this==》赋值（window）\",\"开始执行全局代码\",\"3.函数执行上下文\",\"在调用函数，准备执行函数体之前 ，创建对应的函数执行上下文对象\",\"对局部数据进行预处理 \",\"形参变量==》赋值（实参）==》添加执行上下文的属性\",\"arguments==》赋值（实参列表），添加为执行上下文的属性\",\"var定义的局部变量==》undefined，添加为执行上下文的属性\",\"function声明的属性 ==》赋值（fun），添加执行上下文的方法\",\"this===》赋值（调用函数的对象）\",\"开始执行 函数体代码\"]},\"142\":{\"h\":\"3.执行上下文栈\",\"t\":[\"1.在全局代码执行前，JS引擎 就会创建一个栈来存储管理所有的执行上下文\",\"2.在全局执行上下文（window）确定后，将其添加到栈中（压栈）\",\"3.在 函数执行上下文创建后，将其添加到栈中（压栈）\",\"4.在当前函数执行完后，将栈顶对象移除（出栈）\",\"5.当所有的代码执行完后，栈中只剩下window\"]},\"143\":{\"h\":\"4.执行上下文面试题\",\"t\":[\"/* * 依次输出： * gb undefined * fb 1 * fb 2 * fb 3 * fb 3 * fb 2 * fb 1 * ge 1 * 共有五个执行上下文 * * */ console.log('global begin' + i) var i = 1 foo(1) function foo(i) { if (i == 4) { return } console.log('foo() begin:'+ i) foo(i + 1) console.log('foo() end' + i) } console.log('global end:' + i) // test 1 先执行变量提升、在执行函数提升 function a() {} var a console.log(typeof a); // 'function' // test 2 if (!(b in window)){ var b=1 } console.log(b); // undefined // test 3 var c = 1 function c(c) { console.log(c); } c(2) // 报错 c is not a function \"]},\"144\":{\"h\":\"3.作用域与作用域链\",\"t\":[\"理解：就是一块地盘，一个代码段所在的区域，他是静态的（相对于上下文对象）在编写代码时 ，就确定了 分类：全局作用域、函数作用域 作用：隔离变量，不同作用域下同名变量不会有冲突\"]},\"145\":{\"h\":\"作用域与执行上下文区别\",\"t\":[\"区别一 ： \",\"全局作用域外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了，而不是在函数调用时\",\"全局执行上下文环境是在全局作用域确定之后，JS代码马上执行之前创建\",\"函数执行上下文是在调用函数时，函数体 代码执行之前创建\",\"区别二： \",\"作用域 是静态的，只要函数定义好了就一直存在，且不再变化\",\"执行上下文是动态的，调用函数时创建。函数调用结束 时就会自动释放\",\"联系： \",\"执行上下文从属于所在的作用域\",\"全局上下文环境 ==》全局作用域\",\"函数上下文环境 ==》对应 的函数作用域\"]},\"146\":{\"h\":\"作用域链\",\"t\":[\"多个上下级关系的作用域形成的链，它的方向是从下向上的（从内到外）\",\"查找变量时就是沿着作用域链来查找的\",\"查找一个变量的查找规则\",\"1.在当前作用域下的执行上下文中查找对应的属性，如果有直接返回，否则进入 2\",\"2.在上一级作用域下的执行上下文中查找对应的属性，如果有直接返回，否则进入 3\",\"3.再次执行 2的相同操作，直到全局作用域，如果还找不到就抛出异常\"]},\"147\":{\"h\":\"面试题\",\"t\":[\"// test 1 var x = 10 function fn() { console.log(x); } function show(f) { var x = 20 f() } show(fn) // 10 // test 2 var fn = function () { console.log(fn); } fn() // fn var obj = { fn2:function () { console.log(fn2); } } obj.fn2() // fn2 is not defined \"]},\"148\":{\"h\":\"4.闭包\"},\"149\":{\"h\":\"1.引入\",\"t\":[\"需求：分别输出对应按钮的索引，并绑定点击事件（循环绑定）\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> </head> <body> <button>测试一</button> <button>测试二</button> <button>测试三</button> <script> var btns = document.getElementsByTagName(`button`) // 遍历加监听 这种方式 i 为全局变量，导致无法实现 // for (var i = 0,length = btns.length; i < length; i++) { // var btn = btns[i] // btn.onclick = function () { // alert(`第 ${i + 1} 个按钮被点击了`) // } // } // 解决方式一：将每个btn的索引存储到btn对象上 // for (var i = 0,length = btns.length; i < length; i++) { // var btn = btns[i] // btn.index = i // btn.onclick = function () { // alert(`第 ${this.index + 1} 个按钮被点击了`) // } // } // 闭包 for (var i = 0, length = btns.length; i < length; i++) { (function (i) { var btn = btns[i] btn.onclick = function () { alert(`第 ${i + 1} 个按钮被点击了`) } })(i) } </script> </body> </html> \"]},\"150\":{\"h\":\"2.理解闭包\",\"t\":[\"1.如何产生闭包？\",\"当一个嵌套的内部（子）函数引用了 嵌套外部（父）函数的变量（函数）时，就产生了闭包\",\"2.闭包到底是什么？\",\"使用chrome调试查看\",\"注意：闭包存在于嵌套的内部函数中\",\"3.产生闭包的条件\",\"函数嵌套\",\"内部函数引用了外部函数的数据（变量/函数 ）\",\"外部函数调用\"]},\"151\":{\"h\":\"3.常见的闭包\",\"t\":[\"1.将函数作为另外一个函数的返回值\",\"2.将函数作为实参传递给另一个函数调用\"]},\"152\":{\"h\":\"4.闭包的作用\",\"t\":[\"1.使函数内部的变量，在函数执行完之后，仍然存活在能存中（延长了局部变量的生命周期）\",\"2.让函数外部可以操作（读写）到函数内部的数据 （变量/函数）\",\"问题：\",\"1.函数执行完 后，函数内部声明的局部变量是否还存在 一般不存在，存在于闭包中的变量才存在\",\"2.在函数外部能直接访问函数内部的局部变量吗？ 不能，通过闭包可以让外部操作\"]},\"153\":{\"h\":\"5.闭包的生命周期\",\"t\":[\"产生：在嵌套内部函数定义执行完成时就产生了（不是在调用） 死亡：在嵌套内部函数成为垃圾对象时\"]},\"154\":{\"h\":\"6.闭包的缺点及解决\",\"t\":[\"1.缺点\",\"函数执行完后，函数内的局部变量没有释放，占用内存时间会变长\",\"容易造成内存泄漏\",\"解决： \",\"能不用闭包就不用\",\"及时释放 *\",\"2.内存溢出\",\"一种程序运行出现的错误\",\"当程序运行需要的内存超过了剩余的内存时，就会抛出内存溢出的而错误\",\"3.内存泄漏\",\"占用的内存没有及时释放\",\"内存泄露积累多了就容易导致内存溢出\",\"4.常见的内存泄漏：\",\"意外的全局变量\",\"没有及时清理的定时器或回调函数\",\"闭包\"]},\"155\":{\"h\":\"7.闭包面试题\",\"t\":[\"// test 1 var name = \\\"this Window\\\" var object = { name:'My object', getNameFunction:function () { return function () { return this.name } } } alert(object.getNameFunction()()) // this window // test 2 var name2 = \\\"this Window\\\" var object2 = { name2:'My object', getNameFunction:function () { var that = this; return function () { return that.name2 } } } alert(object2.getNameFunction()()) // My object // test 3 function fun(n, o) { console.log(o); return { fun:function (m) { return fun(m,n) } } } var a = fun(0);a.fun(1);a.fun(2);a.fun(3); // undefined 0 0 0 var b = fun(0).fun(1).fun(2).fun(3) // undefined 0 1 2 var c = fun(0).fun(1); c.fun(2); c.fun(3);// undefined 0 1 1 \"]},\"156\":{\"h\":\"3.对象高级\"},\"157\":{\"h\":\"1.对象创建模式\",\"t\":[\"方法一：object构造函数模式\",\"套路：先创建 空 Object对象，在动态添加属性/方法\",\"使用场景：起始时不确定对象内部数据\",\"问题：语句太多\",\"var p = new Object() p.name = 'sola' p.age = 12 p.setName = function (name) { this.name = name } \",\"方法二：对象字面量模式\",\"var obj = { name:'sola', age:18, setName:function(name){ this.name = name } } \",\"方法三：工厂模式\",\"套路：通过工厂函数动态创建对象并返回\",\"适用场景：需要创建多个对象\",\"问题：对象没有一个具体的类型，都是object类型\",\"function createPerson(name, age) { var obj = { name:name, age:age, setName:function (name) { this.name = name } } return obj } // 创建两个人 var p1 = createPerson('sola',12) var p2 = createPerson('piggy',12) \",\"方式四：自定义构造函数模式\",\"套路：自定义构造函数，通过new创建对象\",\"适用场景：需要创建多个类型确定的对象\",\"问题：每个对象都有相同的数据\",\"function Person(name,age){ this.name = name this.age = age } var p = new Person('sola',16) \"]},\"158\":{\"h\":\"2.继承模式\",\"t\":[\"1.原型链继承\",\"定义父类型构造函数\",\"给父类型的原型添加方法\",\"定义子类型的构造函数\",\"创建父类型的对象赋值给子类型的原型\",\"将子类型原型的构造属性设置为子类型\",\"给子类型原型添加方法\",\"创建子类型对象：可以调用父类型的方法\",\"关键：子类型的原型指向父类型的一个实例对象\",\"// 父类型 function Supper() { this.supProp = 'Supper property' } Supper.prototype.showSupperProp = function () { console.log(this.supProp); } // 子类型 function Sub() { this.subProp = 'Sub property' } // 子类型的原型为父类型的一个实例对象 Sub.prototype = new Supper() // 让子类型的原型constructor指向子类型 Sub.prototype.constructor = Sub Sub.prototype.showSubProp = function () { console.log(this.subProp); } var sub = new Sub() \",\"2.构造函数继承\",\"定义父类型构造函数\",\"定义子类型构造函数\",\"在子类型的构造函数中调用父类型构造函数\",\"关键：在子类型构造函数中通过call()调用父类型构造函数\",\"function Person(name, age) { this.name = name this.age = age } function Student(name,age,price) { Person.call(this,name,age) this.price = price } \",\"3.组合式继承\",\"function Person(name, age) { this.name = name this.age = age } Person.prototype.setName = function (name) { this.name = name } function Student(name,age,price) { Person.call(this,name,age) // 得到属性 this.price = price } Student.prototype = new Person() // 为了能看到夫类型的方法 Student.prototype.constructor = Student // 修正constructor Student.prototype.setPrice = function (price) { this.price = price } \"]},\"159\":{\"h\":\"4.线程机制与事件机制\"},\"160\":{\"h\":\"进程与线程\",\"t\":[\"进程\",\"程序的一次执行，它占有一片独有的内存空间\",\"可以通过Windows任务管理器来查看进程\",\"线程\",\"是进程内的一个独立单元\",\"是程序执行的一个完整流程\",\"是CPU最小的调度单元\",\"相关知识\",\"应用程序必须运行在某个进程的某个线程上\",\"一个进程中至少有一个运行的线程：主线程，进程启动后自动创建\",\"一个进程中也可以同时运行多个线程，我们会说程序是多线程运行的\",\"一个进程内的数据可以供其中的多个线程共享\",\"多个进程间 的数据是不能直接共享的\",\"线程池 ：保存多个线程对象的容器，实现线程对象的反复利用\",\"相关问题\",\"何为多进程？多线程？ \",\"多进程运行：一个应用程序可以同时启动多个实例运行\",\"多线程：在一个进程内，同时有多个线程运行\",\"比较单线程与多线程 \",\"多线程： \",\"优点 \",\"能有效提升CPU的使用率\",\"创建多线程开销\",\"缺点 \",\"线程间切换开销\",\"死锁与状态同步问题\",\"单线程 \",\"优点：顺序编程、简单易懂\",\"缺点：效率低\",\"JS是单线程 还是多线程 \",\"单线程\",\"但是使用H5中的Web Workers可以实现多线程运行\",\"浏览器运行是单线程还是多线程 \",\"多线程运行的\",\"浏览器运行是单进程还是多进程 \",\"多进程 \",\"chrome\",\"新版IE\",\"单进程 \",\"firefox\",\"老板IE\"]},\"161\":{\"h\":\"浏览器内核\",\"t\":[\"支持浏览器运行的最核心的程序\",\"不同的浏览器可能不一样\",\"Chrome，Safari：webkit\",\"Firefox：Gecko\",\"IE：Trident\",\"360，搜狗等国内浏览器：Trident+ webkit\",\"内核由很多模块组成\",\"js引擎模块：负责js程序的编译与运行\",\"html，css文档解析模块：负责页面文本的解析\",\"DOM/CSS模块 ：负责 dom/css在内存中的相关处理\",\"布局和 渲染模块：负责页面的布局和 效果的绘制（内存中 的对象）\",\"...\",\"定时器模块 ：负责定时器的管理\",\"事件相应模块：负责事件的管理\",\"网络请求模块 ：负责ajax 的请求\"]},\"162\":{\"h\":\"定时器引发的思考\",\"t\":[\"1.定时器真的是定时执行吗？\",\"定时器并不能保证真正定时执行\",\"一般会延迟一丁点（可以接受），也有可能延迟很久（不能接受）\",\"2.定时器的回调函数是在分线程执行的吗？\",\"在主线程执行的，js是单线程的\",\"3.定时器是如何实现的？\",\"事件循环模型\"]},\"163\":{\"h\":\"JS是单线程执行的\",\"t\":[\"1.如何证明JS是单线程执行的？\",\"settimeout的回调函数是在主线程执行的\",\"定时器的回调函数只有在运行栈中的全部执行完后才有可能执行\",\"2.为什么js要用单线程模式，而不采用多线程模式\",\"Javascript的单线程与他的用途有关\",\"作为浏览器脚本语言，Javascript的主要用途是与用户交互，以及操作dom\",\"这决定了它只能是单线程，否则会带来复杂的同步问题\",\"3.代码的分类\",\"初始化代码\",\"回调代码\",\"4.JS引擎执行代码的基本流程\",\"先执行初始化代码：包含一些特别的代码 \",\"设置定时器\",\"绑定监听\",\"发送ajax请求\",\"后面在某个时刻才会执行回调代码\"]},\"164\":{\"h\":\"浏览器的事件循环模型\",\"t\":[\"1.所有代码分类\",\"初始化执行代码（同步代码）：包含绑定DOM事件监听，设置定时器，发送ajax请求的代码\",\"回调执行代码（异步代码）：处理回调逻辑\",\"2.JS引擎执行代码的基本流程\",\"初始化代码 ==> 回调代码\",\"3.模型的两个重要组成部分\",\"事件管理模块（定时器/DOM事件/Ajax）\",\"回调队列\",\"4.模型的运转流程\",\"执行初始化代码，将事件回调函数交给对应模块管理\",\"当事件发生时，管理模块会将回调函数及其数据添加到回调队列中\",\"只有当初始化代码执行完成后（可能需要一定时间），才会遍历读取回调队列中的回调函数执行\",\"5.相关重要概念\",\"1.执行栈\",\"execution stack 所有代码都是在此空间中执行的\",\"2.浏览器内核\",\"browser core \",\"JS引擎模块\",\"其他模块\",\"3.任务队列 同一个callback队列\",\"4.消息队列 同一个callback队列\",\"5.事件队列 同一个callback队列\",\"6.事件轮询 event loop\",\"从任务队列中循环取出回调函数放入执行栈中处理（一个一个）\",\"7.事件驱动模型\",\"8.请求响应模型\"]},\"165\":{\"h\":\"H5 Web Workers\",\"t\":[\"1.H5规范提供了js分线程的实现，取名为 Web Workers。我们可以将一些 大计算量的代码交由web worker运行而不冻结用户界面。但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变 javascript单线程的本质\",\"2.相关API\",\"Worker：构造函数，加载分线程执行的js文件\",\"Worker.prototype.onmessage 用于接收另一个线程的回调函数\",\"Worker.prototype.postMessage 向另一个线程发消息\",\"3.不足\",\"worker内代码不能操作DOM（更新UI）\",\"不能跨域加载JS\",\"不是每个浏览器都支持这个新特性\",\"JS主线程\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> </head> <body> <input type=\\\"text\\\" placeholder=\\\"数值\\\" id=\\\"number\\\"> <button id=\\\"btn\\\">计算</button> <script> var input = document.getElementById('number') document.getElementById('btn').onclick = function () { var number = input.value // 创建一个worker对象 var worker = new Worker('worker.js') // 接收worker传过来的数据 worker.onmessage = function (event) { console.log(event.data); alert(event.data) } // 向worker发送消息 worker.postMessage(number) } </script> </body> </html> \",\"分线程worker.js\",\"function fibonacci(n) { return n < 2 ? 1 : fibonacci(n - 1) + fibonacci(n - 2) } console.log(this) var onmessage = function (event) { var number = event.data console.log(`分线程接收到主线程发送的数据：${number}`) // 计算 var result = fibonacci(number) postMessage(result) console.log(`分线程向主线程返回的数据：${result}`) } \"]},\"166\":{\"c\":[\"web\"]},\"167\":{\"c\":[\"js\"]},\"168\":{\"h\":\"JS\"},\"169\":{\"c\":[\"js\"]},\"170\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"171\":{\"c\":[\"使用指南\"]},\"172\":{\"c\":[\"禁用\"]},\"173\":{\"h\":\"React\"},\"174\":{\"c\":[\"react\"]},\"175\":{\"h\":\"typescript\"},\"176\":{\"c\":[\"typescript\"]},\"177\":{\"h\":\"typescript相关\"},\"178\":{\"h\":\"\",\"t\":[\"TypeScript中的基本类型：\",\"类型声明\",\"类型声明是TS非常重要的一个特点；\",\"通过类型声明可以指定TS中变量（参数、形参）的类型；\",\"指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错；\",\"简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值；\",\"语法：\",\"let 变量: 类型; let 变量: 类型 = 值; function fn(参数: 类型, 参数: 类型): 类型{ ... } \",\"自动类型判断\",\"TS拥有自动的类型判断机制\",\"当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型\",\"所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明\",\"类型：\",\"类型\",\"例子\",\"描述\",\"number\",\"1, -33, 2.5\",\"任意数字\",\"string\",\"'hi', \\\"hi\\\", hi\",\"任意字符串\",\"boolean\",\"true、false\",\"布尔值true或false\",\"字面量\",\"其本身\",\"限制变量的值就是该字面量的值\",\"any\",\"*\",\"任意类型\",\"unknown\",\"*\",\"类型安全的any\",\"void\",\"空值（undefined）\",\"没有值（或undefined）\",\"never\",\"没有值\",\"不能是任何值\",\"object\",\"任意的JS对象\",\"array\",\"[1,2,3]\",\"任意JS数组\",\"tuple\",\"[4,5]\",\"元素，TS新增类型，固定长度数组\",\"enum\",\"enum\",\"枚举，TS中新增类型\",\"number\",\"let decimal: number = 6; let hex: number = 0xf00d; let binary: number = 0b1010; let octal: number = 0o744; let big: bigint = 100n; \",\"boolean\",\"let isDone: boolean = false; \",\"string\",\"let color: string = \\\"blue\\\"; color = 'red'; let fullName: string = `Bob Bobbington`; let age: number = 37; let sentence: string = `Hello, my name is ${fullName}. I'll be ${age + 1} years old next month.`; \",\"字面量\",\"也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围\",\"let color: 'red' | 'blue' | 'black'; let num: 1 | 2 | 3 | 4 | 5; \",\"any\",\"let d: any = 4; d = 'hello'; d = true; \",\"unknown\",\"let notSure: unknown = 4; notSure = 'hello'; \",\"void\",\"let unusable: void = undefined; \",\"never\",\"function error(message: string): never { throw new Error(message); } \",\"object（没啥用）\",\"let obj: object = {}; \",\"array\",\"let list: number[] = [1, 2, 3]; let list: Array<number> = [1, 2, 3]; \",\"tuple\",\"let x: [string, number]; x = [\\\"hello\\\", 10]; \",\"enum\",\"enum Color { Red, Green, Blue, } let c: Color = Color.Green; enum Color { Red = 1, Green, Blue, } let c: Color = Color.Green; enum Color { Red = 1, Green = 2, Blue = 4, } let c: Color = Color.Green; \",\"类型断言\",\"有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：\",\"第一种\",\"let someValue: unknown = \\\"this is a string\\\"; let strLength: number = (someValue as string).length; \",\"第二种\",\"let someValue: unknown = \\\"this is a string\\\"; let strLength: number = (<string>someValue).length; \"]},\"179\":{\"h\":\"编译选项\"},\"180\":{\"h\":\"自动编译文件\",\"t\":[\"编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。\",\"示例：\",\" tsc xxx.ts -w \"]},\"181\":{\"h\":\"自动编译整个项目\",\"t\":[\"如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。\",\"但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json\",\"tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译\",\"配置选项：\"]},\"182\":{\"h\":\"\",\"t\":[\"定义希望被编译文件所在的目录\",\"默认值：[\\\"**/*\\\"]\",\"示例：\",\" \\\"include\\\":[\\\"src/**/*\\\", \\\"tests/**/*\\\"] \",\"上述示例中，所有src目录和tests目录下的文件都会被编译,**表示任意目录，*表示任意文件\"]},\"183\":{\"h\":\"\",\"t\":[\"定义需要排除在外的目录\",\"默认值：[\\\"node_modules\\\", \\\"bower_components\\\", \\\"jspm_packages\\\"]\",\"示例：\",\" \\\"exclude\\\": [\\\"./src/hello/**/*\\\"] \",\"上述示例中，src下hello目录下的文件都不会被编译\"]},\"184\":{\"h\":\"\",\"t\":[\"定义被继承的配置文件\",\"示例：\",\"\\\"extends\\\": \\\"./configs/base\\\" \",\"上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息\"]},\"185\":{\"h\":\"\",\"t\":[\"指定被编译文件的列表，只有需要编译的文件少时才会用到\",\"示例：\",\"\\\"files\\\": [ \\\"core.ts\\\", \\\"sys.ts\\\", \\\"types.ts\\\", \\\"scanner.ts\\\", \\\"parser.ts\\\", \\\"utilities.ts\\\", \\\"binder.ts\\\", \\\"checker.ts\\\", \\\"tsc.ts\\\" ] \",\"列表中的文件都会被TS编译器所编译\"]},\"186\":{\"h\":\"compilerOptions\",\"t\":[\"编译选项是配置文件中非常重要也比较复杂的配置选项\",\"在compilerOptions中包含多个子选项，用来完成对编译的配置\",\"项目选项：\",\"target\",\"设置ts代码编译的目标版本\",\"可选值：\",\"ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext\",\"示例：\",\"\\\"compilerOptions\\\": { \\\"target\\\": \\\"ES6\\\" } \",\"如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码\",\"lib\",\"指定代码运行时所包含的库（宿主环境）\",\"可选值：\",\"ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......\",\"示例：\",\"\\\"compilerOptions\\\": { \\\"target\\\": \\\"ES6\\\", \\\"lib\\\": [\\\"ES6\\\", \\\"DOM\\\"], \\\"outDir\\\": \\\"dist\\\", \\\"outFile\\\": \\\"dist/aa.js\\\" } \",\"module\",\"设置编译后代码使用的模块化系统\",\"可选值：\",\"CommonJS、UMD、AMD、System、ES2020、ESNext、None\",\"示例：\",\"\\\"compilerOptions\\\": { \\\"module\\\": \\\"CommonJS\\\" } \",\"outDir\",\"编译后文件的所在目录\",\"默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置\",\"示例：\",\"\\\"compilerOptions\\\": { \\\"outDir\\\": \\\"dist\\\" } \",\"设置后编译后的js文件将会生成到dist目录\",\"outFile\",\"将所有的文件编译为一个js文件\",\"默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中\",\"示例：\",\"\\\"compilerOptions\\\": { \\\"outFile\\\": \\\"dist/app.js\\\" } \",\"rootDir\",\"指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录\",\"示例：\",\"\\\"compilerOptions\\\": { \\\"rootDir\\\": \\\"./src\\\" } \",\"allowJs\",\"是否对js文件编译\",\"checkJs\",\"是否对js文件进行检查\",\"示例：\",\"\\\"compilerOptions\\\": { \\\"allowJs\\\": true, \\\"checkJs\\\": true } \",\"removeComments\",\"是否删除注释\",\"默认值：false\",\"noEmit\",\"不对代码进行编译\",\"默认值：false\",\"sourceMap\",\"是否生成sourceMap\",\"默认值：false\",\"严格检查\",\"strict \",\"启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查\",\"alwaysStrict \",\"总是以严格模式对代码进行编译\",\"noImplicitAny \",\"禁止隐式的any类型\",\"noImplicitThis \",\"禁止类型不明确的this\",\"strictBindCallApply \",\"严格检查bind、call和apply的参数列表\",\"strictFunctionTypes \",\"严格检查函数的类型\",\"strictNullChecks \",\"严格的空值检查\",\"strictPropertyInitialization \",\"严格检查属性是否初始化\",\"额外检查\",\"noFallthroughCasesInSwitch \",\"检查switch语句包含正确的break\",\"noImplicitReturns \",\"检查函数没有隐式的返回值\",\"noUnusedLocals \",\"检查未使用的局部变量\",\"noUnusedParameters \",\"检查未使用的参数\",\"高级\",\"allowUnreachableCode \",\"检查不可达代码\",\"可选值： \",\"true，忽略不可达代码\",\"false，不可达代码将引起错误\",\"noEmitOnError \",\"有错误的情况下不进行编译\",\"默认值：false\"]},\"187\":{\"h\":\"TypeScript打包\"},\"188\":{\"h\":\"webpack整合\",\"t\":[\"通常情况下，实际开发中我们都需要使用构建工具对代码进行打包；\",\"TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS；\",\"步骤如下：\"]},\"189\":{\"h\":\"初始化项目\",\"t\":[\"进入项目根目录，执行命令 npm init -y，创建package.json文件\"]},\"190\":{\"h\":\"下载构建工具\",\"t\":[\"命令如下：\",\"npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin \",\"共安装了7个包:\",\"webpack：构建工具webpack\",\"webpack-cli：webpack的命令行工具\",\"webpack-dev-server：webpack的开发服务器\",\"typescript：ts编译器\",\"ts-loader：ts加载器，用于在webpack中编译ts文件\",\"html-webpack-plugin：webpack中html插件，用来自动创建html文件\",\"clean-webpack-plugin：webpack中的清除插件，每次构建都会先清除目录\"]},\"191\":{\"h\":\"配置webpack\",\"t\":[\"根目录下创建webpack的配置文件webpack.config.js：\",\"const path = require(\\\"path\\\"); const HtmlWebpackPlugin = require(\\\"html-webpack-plugin\\\"); const { CleanWebpackPlugin } = require(\\\"clean-webpack-plugin\\\"); module.exports = { optimization:{ minimize: false // 关闭代码压缩，可选 }, entry: \\\"./src/index.ts\\\", devtool: \\\"inline-source-map\\\", devServer: { contentBase: './dist' }, output: { path: path.resolve(__dirname, \\\"dist\\\"), filename: \\\"bundle.js\\\", environment: { arrowFunction: false // 关闭webpack的箭头函数，可选 } }, resolve: { extensions: [\\\".ts\\\", \\\".js\\\"] }, module: { rules: [ { test: /\\\\.ts$/, use: { loader: \\\"ts-loader\\\" }, exclude: /node_modules/ } ] }, plugins: [ new CleanWebpackPlugin(), new HtmlWebpackPlugin({ title:'TS测试' }), ] } \"]},\"192\":{\"h\":\"配置TS编译选项\",\"t\":[\"根目录下创建tsconfig.json，配置可以根据自己需要\",\"{ \\\"compilerOptions\\\": { \\\"target\\\": \\\"ES2015\\\", \\\"module\\\": \\\"ES2015\\\", \\\"strict\\\": true } } \"]},\"193\":{\"h\":\"修改package.json配置\",\"t\":[\"修改package.json添加如下配置\",\"{ ... \\\"scripts\\\": { \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\", \\\"build\\\": \\\"webpack\\\", \\\"start\\\": \\\"webpack serve --open chrome.exe\\\" }, ... } \"]},\"194\":{\"h\":\"项目使用\",\"t\":[\"在src下创建ts文件，并在并命令行执行npm run build对代码进行编译；\",\"或者执行npm start来启动开发服务器；\"]},\"195\":{\"h\":\"Babel\",\"t\":[\"除了webpack，开发中还经常需要结合babel来对代码进行转换；\",\"以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中；\",\"虽然TS在编译时也支持代码转换，但是只支持简单的代码转换；\",\"对于例如：Promise等ES6特性，TS无法直接转换，这时还要用到babel来做转换；\",\"安装依赖包：\",\"npm i -D @babel/core @babel/preset-env babel-loader core-js \",\"共安装了4个包，分别是：\",\"@babel/core：babel的核心工具\",\"@babel/preset-env：babel的预定义环境\",\"@babel-loader：babel在webpack中的加载器\",\"core-js：core-js用来使老版本的浏览器支持新版ES语法\",\"修改webpack.config.js配置文件\",\"... module: { rules: [ { test: /\\\\.ts$/, use: [ { loader: \\\"babel-loader\\\", options:{ presets: [ [ \\\"@babel/preset-env\\\", { \\\"targets\\\":{ \\\"chrome\\\": \\\"58\\\", \\\"ie\\\": \\\"11\\\" }, \\\"corejs\\\":\\\"3\\\", \\\"useBuiltIns\\\": \\\"usage\\\" } ] ] } }, { loader: \\\"ts-loader\\\", } ], exclude: /node_modules/ } ] } ... \",\"如此一来，使用ts编译后的文件将会再次被babel处理；\",\"使得代码可以在大部分浏览器中直接使用；\",\"同时可以在配置选项的targets中指定要兼容的浏览器版本；\"]},\"196\":{\"h\":\"面向对象\",\"t\":[\"要想面向对象，操作对象，首先便要拥有对象；\",\"要创建对象，必须要先定义类，所谓的类可以理解为对象的模型；\",\"程序中可以根据类创建指定类型的对象；\",\"举例来说：\",\"可以通过Person类来创建人的对象，通过Dog类创建狗的对象，不同的类可以用来创建不同的对象；\"]},\"197\":{\"h\":\"定义类\",\"t\":[\"class 类名 { 属性名: 类型; 静态属性，不能通过实例调用，需要使用类直接调用 static age：19 constructor(参数: 类型){ this.属性名 = 参数; } 方法名(){ .... } } \",\"示例：\",\" class Person{ name: string; age: number; constructor(name: string, age: number){ this.name = name; this.age = age; } sayHello(){ console.log(`大家好，我是${this.name}`); } } \",\"使用类：\",\"const p = new Person('孙悟空', 18); p.sayHello(); \"]},\"198\":{\"h\":\"构造函数\",\"t\":[\"可以使用constructor定义一个构造器方法；\",\"注1：在TS中只能有一个构造器方法！\",\"例如：\",\"class C{ name: string; age: number constructor(name: string, age: number) { this.name = name; this.age = age; } } \",\"同时也可以直接将属性定义在构造函数中：\",\"class C { constructor(public name: string, public age: number) { } } \",\"上面两种定义方法是完全相同的！\",\"注2：子类继承父类时，必须调用父类的构造方法（如果子类中也定义了构造方法）！\",\"例如：\",\"class A { protected num: number; constructor(num: number) { this.num = num; } } class X extends A { protected name: string; constructor(num: number, name: string) { super(num); this.name = name; } } \",\"如果在X类中不调用super将会报错！\"]},\"199\":{\"h\":\"封装\",\"t\":[\"对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装\",\"默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置\",\"静态属性（static）： \",\"声明为static的属性或方法不再属于实例，而是属于类的属性；\",\"只读属性（readonly）： \",\"如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改\",\"TS中属性具有三种修饰符： \",\"public（默认值），可以在类、子类和对象中修改\",\"protected ，可以在类、子类中修改\",\"private ，可以在类中修改\",\"示例：\",\"public：\",\"class Person{ public name: string; // 写或什么都不写都是public public age: number; constructor(name: string, age: number){ this.name = name; // 可以在类中修改 this.age = age; } sayHello(){ console.log(`大家好，我是${this.name}`); } } class Employee extends Person{ constructor(name: string, age: number){ super(name, age); this.name = name; //子类中可以修改 } } const p = new Person('孙悟空', 18); p.name = '猪八戒';// 可以通过对象修改 \",\"protected：\",\"class Person{ protected name: string; protected age: number; constructor(name: string, age: number){ this.name = name; // 可以修改 this.age = age; } sayHello(){ console.log(`大家好，我是${this.name}`); } } class Employee extends Person{ constructor(name: string, age: number){ super(name, age); this.name = name; //子类中可以修改 } } const p = new Person('孙悟空', 18); p.name = '猪八戒';// 不能修改 \",\"private：\",\"class Person{ private name: string; private age: number; constructor(name: string, age: number){ this.name = name; // 可以修改 this.age = age; } sayHello(){ console.log(`大家好，我是${this.name}`); } } class Employee extends Person{ constructor(name: string, age: number){ super(name, age); this.name = name; //子类中不能修改 } } const p = new Person('孙悟空', 18); p.name = '猪八戒';// 不能修改 \"]},\"200\":{\"h\":\"属性存取器\",\"t\":[\"对于一些不希望被任意修改的属性，可以将其设置为private\",\"直接将其设置为private将导致无法再通过对象修改其中的属性\",\"我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器\",\"读取属性的方法叫做setter方法，设置属性的方法叫做getter方法\",\"示例：\",\"class Person{ private _name: string; constructor(name: string){ this._name = name; } get name(){ return this._name; } set name(name: string){ this._name = name; } } const p1 = new Person('孙悟空'); // 实际通过调用getter方法读取name属性 console.log(p1.name); // 实际通过调用setter方法修改name属性 p1.name = '猪八戒'; \"]},\"201\":{\"h\":\"静态属性\",\"t\":[\"静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用\",\"静态属性（方法）使用static开头\",\"示例：\",\"class Tools{ static PI = 3.1415926; static sum(num1: number, num2: number){ return num1 + num2 } } console.log(Tools.PI); console.log(Tools.sum(123, 456)); \"]},\"202\":{\"h\":\"this\",\"t\":[\"在类中，使用this表示当前对象\"]},\"203\":{\"h\":\"继承\",\"t\":[\"继承时面向对象中的又一个特性\",\"通过继承可以将其他类中的属性和方法引入到当前类中\",\"示例：\",\"class Animal{ name: string; age: number; constructor(name: string, age: number){ this.name = name; this.age = age; } } class Dog extends Animal{ bark(){ console.log(`${this.name}在汪汪叫！`); } } const dog = new Dog('旺财', 4); dog.bark(); \",\"通过继承可以在不修改类的情况下完成对类的扩展\"]},\"204\":{\"h\":\"重写\",\"t\":[\"发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写\",\"示例：\",\"class Animal{ name: string; age: number; constructor(name: string, age: number){ this.name = name; this.age = age; } run(){ console.log(`父类中的run方法！`); } } class Dog extends Animal{ bark(){ console.log(`${this.name}在汪汪叫！`); } run(){ console.log(`子类中的run方法，会重写父类中的run方法！`); } } const dog = new Dog('旺财', 4); dog.bark(); \",\"在子类中可以使用super来完成对父类的引用\"]},\"205\":{\"h\":\"抽象类（abstract class）\",\"t\":[\"抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例\",\"abstract class Animal{ abstract run(): void; bark(){ console.log('动物在叫~'); } } class Dog extends Animals{ run(){ console.log('狗在跑~'); } } \",\"使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现;\"]},\"206\":{\"h\":\"接口（Interface）\",\"t\":[\"接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法；\",\"接口主要负责定义一个类的结构，接口可以去限制一个对象的接口：对象只有包含接口中定义的所有属性和方法时才能匹配接口；\",\"同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；\",\"示例（检查对象类型）：\",\"interface Person{ name: string; sayHello():void; } function fn(per: Person){ per.sayHello(); } fn({name:'孙悟空', sayHello() {console.log(`Hello, 我是 ${this.name}`)}}); \",\"示例（实现）：\",\"interface Person{ name: string; sayHello():void; } class Student implements Person{ constructor(public name: string) { } sayHello() { console.log('大家好，我是'+this.name); } } \"]},\"207\":{\"h\":\"属性的封装\",\"t\":[\"TS添加属性修饰符\",\"public：修饰的属性可以在 任意位置访问（修改）默认值\",\"private：私有属性，只能在类的内部修改,通过在类中添加方法使私有属性可以访问\",\"protected：受包含的属性，只能在 当前类和当前类的子类中使用\",\"(function () { class Person { // TS添加属性修饰符 // public 修饰的属性可以在 任意位置访问（修改）默认值 // private 私有属性，只能在类的内部修改,通过在类中添加方法使私有属性可以访问 // protexted 受包含的属性，只能在 当前类和当前类的子类中使用 protected _num:number private _name:string private _age:number constructor(name:string,age:number,num:number) { this._name = name this._age = age this._num = num } get name(){ return this._name } set age(value:number){ this._age = value } getName(){ return this._name } setName(value:string){ this._name = value } } class B extends Person{ test(){ console.log() } } const per = new Person('sola',19,30) per.getName() per.setName('pig') /* * */ })() \"]},\"208\":{\"h\":\"泛型（Generic）\",\"t\":[\"定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；\",\"此时泛型便能够发挥作用；\",\"举个例子：\",\"function test(arg: any): any{ return arg; } \",\"上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的；\",\"由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的：\",\"首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型；\"]},\"209\":{\"h\":\"泛型函数\"},\"210\":{\"h\":\"创建泛型函数\",\"t\":[\"function test<T>(arg: T): T{ return arg; } \",\"这里的<T>就是泛型；\",\"T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型；\",\"所以泛型其实很好理解，就表示某个类型；\",\"那么如何使用上边的函数呢？\"]},\"211\":{\"h\":\"使用泛型函数\"},\"212\":{\"h\":\"方式一（直接使用）：\",\"t\":[\"test(10) \",\"使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式\"]},\"213\":{\"h\":\"方式二（指定类型）：\",\"t\":[\"test<number>(10) \",\"也可以在函数后手动指定泛型；\"]},\"214\":{\"h\":\"函数中声明多个泛型\",\"t\":[\"可以同时指定多个泛型，泛型间使用逗号隔开：\",\"function test<T, K>(a: T, b: K): K{ return b; } test<number, string>(10, \\\"hello\\\"); \",\"使用泛型时，完全可以将泛型当成是一个普通的类去使用；\"]},\"215\":{\"h\":\"泛型类\",\"t\":[\"类中同样可以使用泛型：\",\"class MyClass<T>{ prop: T; constructor(prop: T){ this.prop = prop; } } \"]},\"216\":{\"h\":\"泛型继承\",\"t\":[\"除此之外，也可以对泛型的范围进行约束\",\"interface MyInter{ length: number; } function test<T extends MyInter>(arg: T): number{ return arg.length; } \",\"使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用；\"]},\"217\":{\"c\":[\"web\"]},\"218\":{\"c\":[\"js\"]},\"219\":{\"h\":\"Vue\"},\"220\":{\"c\":[\"Vue\"]},\"221\":{\"h\":\"webpack\"},\"222\":{\"c\":[\"webpack\"]},\"223\":{\"h\":\"webpack相关\"},\"224\":{\"h\":\"1.1 webpack 是什么\",\"t\":[\"webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。\",\"在webpack 看来, 前端的所有资源文件(js/json/css/img/less/...)都会作为模块处理。 它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。\"]},\"225\":{\"h\":\"1.2 webpack 五个核心概念\"},\"226\":{\"h\":\"1.2.1 Entry\",\"t\":[\"入口(Entry)：指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。\"]},\"227\":{\"h\":\"1.2.2 Output\",\"t\":[\"输出(Output)：指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。\"]},\"228\":{\"h\":\"1.2.3 Loader\",\"t\":[\"Loader：让 webpack 能够去处理那些非 JS 的文件，比如样式文件、图片文件(webpack 自身只理解 JS)\"]},\"229\":{\"h\":\"1.2.4 Plugins\",\"t\":[\"插件(Plugins)：可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩， 一直到重新定义环境中的变量等。\"]},\"230\":{\"h\":\"1.2.5 Mode\",\"t\":[\"模式(Mode)：指示 webpack 使用相应模式的配置。\",\"选项\",\"描述\",\"特点\",\"development\",\"会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。\",\"能让代码本地调试运行的环境\",\"production\",\"会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。\",\"能让代码优化上线运行的环境\"]},\"231\":{\"h\":\"2.1 初始化配置\",\"t\":[\"初始化 package.json：npm init\",\"下载安装webpack：(webpack4以上的版本需要全局/本地都安装webpack-cli)\",\"全局安装：cnpm i webpack webpack-cli -g\",\"本地安装：cnpm i webpack webpack-cli -D\",\"当前版本：\",\"webpack: 5.62.1\",\"webpack-cli: 4.9.1\"]},\"232\":{\"h\":\"2.2 编译打包应用\",\"t\":[\"创建 src 下的 js 等文件后，不需要配置 webpack.config.js 文件，在命令行就可以编译打包。\",\"指令：\",\"开发环境：webpack ./src/index.js -o ./build/built.js --mode=development\",\"webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境，是开发环境\",\"生产环境：webpack ./src/index.js -o ./build/built.js --mode=production\",\"webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境，是生产环境\",\"结论：\",\"webpack 本身能处理 js/json 资源，不能处理 css/img 等其他资源\",\"生产环境和开发环境将 ES6 模块化编译成浏览器能识别的模块化，但是不能处理 ES6 的基本语法转化为 ES5（需要借助 loader）\",\"生产环境比开发环境多一个压缩 js 代码\",\"webpack.config.js 是 webpack 的配置文件。\",\"作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）\",\"所有构建工具都是基于 nodejs 平台运行的，模块化默认采用 commonjs。\",\"开发环境配置主要是为了能让代码运行。主要考虑以下几个方面：\",\"在 webpack 5 之前，通常使用：\",\"raw-loader 将文件导入为字符串\",\"url-loader 将文件作为 data URI 内联到 bundle 中\",\"file-loader 将文件发送到输出目录\",\"资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：\",\"asset/resource 发送一个单独的文件并导出 URL。之前通过使用 file-loader 实现。\",\"asset/inline 导出一个资源的 data URI。之前通过使用 url-loader 实现。\",\"asset/source 导出资源的源代码。之前通过使用 raw-loader 实现。\",\"asset 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 url-loader，并且配置资源体积限制实现。\"]},\"233\":{\"h\":\"打包样式资源\",\"t\":[\"npm i css-loader style-loader less-loader -D\",\"/* webpack.config.js webpack的配置文件 作用：指示webpack干哪些活 所有的构建工具都是基于nodejs平台运行的模块化 默认采用commonjs * */ // 用来拼接绝对路径的方法 const {resolve} = require('path') module.exports = { // webpack配置 // 入口文件 entry: './src/index.js', output: { // 输出文件名 filename: 'built.js', // 输出路径 // __dirname nodejs的变量 代表当前文件所在目录的绝对路径 path: resolve(__dirname, 'build') }, // loader的配置 module: { rules: [ // 详细loader配置 // 不同文件必须配置不同loader配置 { // 匹配那些文件 test:/\\\\.css$/, // 使用哪些loader use:[ // use数组中loader执行顺序：从右到左，从下到上 // 创建style标签，将js中的样式资源插入到head中生效 'style-loader', // 将css文件变成commonjs模块加载js中，里面内容是 样式字符串 'css-loader' ] }, { test: /\\\\.less$/, use: [ 'style-loader', 'css-loader', // 将less文件编译成css文件 'less-loader' ] } ] }, // plugins的二配置 plugins: [], // 模式 mode: 'development', // mode:'production', } \"]},\"234\":{\"h\":\"打包 html 资源\",\"t\":[\"npm i html-webpack-plugin -D\",\"/* * loader：1.下载 2.使用（配置loader） * plugins：1.下载 2.引入 3.使用 * * */ const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') module.exports = { entry: './src/index.js', output: { filename: \\\"built.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ // loader的配置 ] }, plugins: [ //plugins的配置 //html-webpack-plugin // 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS） // 需要有结构的HTML文件 new HtmlWebpackPlugin({ // 复制 './src/index.html' 文件,自动引入打包输出的所有资源（JS/CSS） template: \\\"./src/index.html\\\" }) ], mode: 'development' } \"]},\"235\":{\"h\":\"打包图片资源\",\"t\":[\"webpack5以下\",\"npm i url-laoder file-loader -D\",\"/* * loader：1.下载 2.使用（配置loader） * plugins：1.下载 2.引入 3.使用 * * */ const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') module.exports = { entry: './src/index.js', output: { filename: \\\"bulit.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ { test: /\\\\.less$/, // 要使用多个 loader处理使用use use: [ 'style-loader', 'css-loader', 'less-loader' ] }, //webpack5以下 处理图片资源 { test: /\\\\.(jpg|png|gif)$/, // 使用一个loader // 下载 url-laoder file-loader loader: \\\"url-loader\\\", options: { // 图片大小小于8kb，就会被base64处理 // 优点：减少请求数量（减轻服务器压力） // 缺点：图片体积变大（文件请求速度变慢） limit:8*1024, // 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是common.js // 解析时会出现问题：[object Moudule] // 解决：关闭url-loader的 es6模块化，使用commonjs解析 esModule:false } }, // 处理html中的img标签 { test: /\\\\.html$/, loader: \\\"html-loader\\\" } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }) ], mode: \\\"development\\\" } \",\"webpack5\",\"/* * loader：1.下载 2.使用（配置loader） * plugins：1.下载 2.引入 3.使用 * * */ const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') module.exports = { entry: './src/index.js', output: { filename: \\\"bulit.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ { test: /\\\\.less$/, // 要使用多个 loader处理使用use use: [ 'style-loader', 'css-loader', 'less-loader' ] }, // webpack5 处理图片资源 { test: /\\\\.(jpg|png|gif)$/, type: \\\"asset\\\", //解析 parser: { //转base64的条件 dataUrlCondition: { maxSize: 25 * 1024, // 25kb } }, // [hash:6] 取图片哈希值的前十位 // [ext] 取文件原来扩展名 generator: { //与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径 filename: 'img/[name].[hash:6][ext]', //打包后对资源的引入，文件命名已经有/img了 publicPath: './' }, }, // 处理html中的img标签 { test: /\\\\.html$/, loader: \\\"html-loader\\\" } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }) ], mode: \\\"development\\\" } \"]},\"236\":{\"h\":\"打包其他资源\",\"t\":[\"/* * loader：1.下载 2.使用（配置loader） * plugins：1.下载 2.引入 3.使用 * * */ const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') module.exports = { entry: './src/index.js', output: { filename: \\\"bulit.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ { test: /\\\\.css$/, use: ['style-loader','css-loader'] }, // 打包其他资源(除了 html、js\\\\css资源以外的资源) { // 排除 css/js/html资源 exclude: /\\\\.(css|js|html)$/, // webpack5以下使用方式 // loader: \\\"file-loader\\\" type: \\\"asset/resource\\\" } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }) ], mode: \\\"development\\\" } \"]},\"237\":{\"h\":\"devServer\",\"t\":[\"npm i webpack-dev-server -D\",\"/* * loader：1.下载 2.使用（配置loader） * plugins：1.下载 2.引入 3.使用 * * */ const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') module.exports = { entry: './src/index.js', output: { filename: \\\"bulit.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ { test: /\\\\.css$/, use: ['style-loader','css-loader'] }, // 打包其他资源(除了 html、js\\\\css资源以外的资源) { // 排除 css/js/html资源 exclude: /\\\\.(css|js|html)$/, // loader: \\\"file-loader\\\" type: \\\"asset/resource\\\" } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }) ], mode: \\\"development\\\", // 开发服务器 devServer 用来自动化（自动化编译，自动打开浏览器，自动刷新浏览器） // 特点：只会在内存中编译打包，不会有任何输出 // 启动devServer指令为：npx webpack serve devServer: { static: { directory: resolve(__dirname, 'build'), }, // 启动 gzip压缩 compress:true, // 端口号 port:3000, // 自动打开浏览器 open:true } } \",\"下面是一个简单的开发环境webpack.confg.js配置文件\",\"/* * loader：1.下载 2.使用（配置loader） * plugins：1.下载 2.引入 3.使用 * * */ const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') module.exports = { entry: './src/index.js', output: { // 指定打包好的入口文件输出位置 filename: \\\"js/bulit.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ { // 配置css test: /\\\\.css$/, use: ['style-loader', 'css-loader'] }, { // 配置less test: /\\\\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] }, { // 处理图片资源 test: /\\\\.(jpg|png|gif)$/, type: \\\"asset\\\", //解析 parser: { //转base64的条件 dataUrlCondition: { maxSize: 25 * 1024, // 25kb } }, // [hash:6] 取图片哈希值的前十位 // [ext] 取文件原来扩展名 generator: { //与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径 filename: 'img/[name].[hash:6][ext]', //打包后对资源的引入，文件命名已经有/img了 publicPath: './' }, }, { // 处理html中的img标签 test: /\\\\.html$/, loader: \\\"html-loader\\\" }, { // 打包其他资源(除了 html、js\\\\css资源以外的资源) // 排除 css/js/html资源 exclude: /\\\\.(css|js|html|less|jpg|png|gif)$/, // loader: \\\"file-loader\\\" type: \\\"asset/resource\\\", generator: { //与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径 filename: 'media/[name].[hash:6][ext]', //打包后对资源的引入，文件命名已经有/img了 publicPath: './' }, } ] }, plugins: [ // 打包 html资源 new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }) ], // 配置开发环境 mode: \\\"development\\\", // 开发服务器 devServer 用来自动化（自动化编译，自动打开浏览器，自动刷新浏览器） // 特点：只会在内存中编译打包，不会有任何输出 // 启动devServer指令为：npx webpack serve devServer: { static: { directory: resolve(__dirname, 'build'), }, // 启动 gzip压缩 compress: true, // 端口号 port: 3000, // 自动打开浏览器 open: true } } \",\"其中，大部分配置都在注释中给出解释。\",\"运行项目的两个指令： webpack 会将打包结果输出出去（build文件夹） npx webpack-dev-server 只会在内存中编译打包，没有输出\",\"loader 和 plugin 的不同：（plugin 一定要先引入才能使用）\",\"loader：1. 下载 2. 使用（配置 loader）\",\"plugins：1.下载 2. 引入 3. 使用\",\"而生产环境的配置需要考虑以下几个方面：\"]},\"238\":{\"h\":\"提取 css 成单独文件\",\"t\":[\"npm i mini-css-extract-plugin -D\",\"const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') // npm i mini-css-extract-plugin -D const MiniCssExtractPlugin = require('mini-css-extract-plugin') module.exports = { entry: './src/js/index.js', output: { filename: \\\"js/built.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ { test: /\\\\.css$/, use: [ // 创建style标签，将样式放入 // 'style-loader', // 这个loader取代style-loader 作用：提取 js中的css成单独文件 MiniCssExtractPlugin.loader, // 将css文件整合到js文件中 'css-loader' ] } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }), new MiniCssExtractPlugin({ filename: 'css/built.css' }) ], mode: \\\"development\\\", } \"]},\"239\":{\"h\":\"css 兼容性处理（webpack5）\",\"t\":[\"npm i postcss postcss-loader postcss-preset-env -D\",\"const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') // npm i mini-css-extract-plugin -D const MiniCssExtractPlugin = require('mini-css-extract-plugin') // 设置nodejs 的环境变量 // process.env.NODE_ENV = 'development' // npm i postcss postcss-loader postcss-preset-env -D module.exports = { entry: './src/js/index.js', output: { filename: \\\"js/built.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ { test: /\\\\.css$/, use: [ // 创建style标签，将样式放入 // 'style-loader', // 这个loader取代style-loader 作用：提取 js中的css成单独文件 MiniCssExtractPlugin.loader, // 将css文件整合到js文件中 'css-loader', /* * css兼容性处理： postcss ——> postcss-loader postcss-preset-env * * 帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式 package.json中配置browserslist * * \\\"browserslist\\\": { \\\"development\\\": [ \\\"last 1 chrome version\\\", \\\"last 1 firefox version\\\", \\\"last 1 safari version\\\" ], \\\"production\\\": [ \\\">0.2%\\\", \\\"not dead\\\", \\\"not op_mini all\\\" ] } * * * * */ // 使用loader的默认配置 // 'postcss-loader', // 修改loader配置 { loader: \\\"postcss-loader\\\", options: { postcssOptions:{ plugins: [ 'postcss-preset-env' ] }, } } ] } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }), new MiniCssExtractPlugin({ filename: 'css/built.css' }) ], mode: \\\"development\\\", } \"]},\"240\":{\"h\":\"压缩 css\",\"t\":[\"npm i optimize-css-assets-webpack-plugin -D\",\"const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') // npm i mini-css-extract-plugin -D const MiniCssExtractPlugin = require('mini-css-extract-plugin') const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin') // 设置nodejs 的环境变量 // process.env.NODE_ENV = 'development' // css兼容性loader npm i postcss postcss-loader postcss-preset-env -D // css压缩 npm i optimize-css-assets-webpack-plugin -D module.exports = { entry: './src/js/index.js', output: { filename: \\\"js/built.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ { test: /\\\\.css$/, use: [ // 创建style标签，将样式放入 // 'style-loader', // 这个loader取代style-loader 作用：提取 js中的css成单独文件 MiniCssExtractPlugin.loader, // 将css文件整合到js文件中 'css-loader', /* * css兼容性处理： postcss ——> postcss-loader postcss-preset-env * * 帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式 * * \\\"browserslist\\\": { \\\"development\\\": [ \\\"last 1 chrome version\\\", \\\"last 1 firefox version\\\", \\\"last 1 safari version\\\" ], \\\"production\\\": [ \\\">0.2%\\\", \\\"not dead\\\", \\\"not op_mini all\\\" ] } * * * * */ // 使用loader的默认配置 // 'postcss-loader', // 修改loader配置 { loader: \\\"postcss-loader\\\", options: { postcssOptions: { plugins: [ 'postcss-preset-env' ] }, } } ] } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }), new MiniCssExtractPlugin({ filename: 'css/built.css' }), // 压缩css new OptimizeCssAssetsWebpackPlugin() ], mode: \\\"development\\\", } \"]},\"241\":{\"h\":\"js 语法检查\",\"t\":[\"npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D\",\"const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') const ESLintPlugin = require('eslint-webpack-plugin'); module.exports = { entry: './src/index.js', output: { filename: \\\"js/build.js\\\", path: resolve(__dirname,'build') }, module: { rules: [ /* webpack5 以下版本 * 语法检查：eslint eslint-loader * 注意：只检查 自己写的代码，第三方库不用检查 * 设置检查规则： * package.json中 配置eslintConfig * \\\"eslintConfig\\\": { \\\"extends\\\": \\\"airbnb-base\\\" } * aribnb eslint eslint-config-airbnb-base eslint-plugin-import * * */ // { // test: /\\\\.js$/, // loader: \\\"eslint-loader\\\", // exclude: /node_modules/, // options: { // // 自动修复eslint 的错误 // fix:true // } // } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }), /* * webpack5 * npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D package.json中配置 *\\\"eslintConfig\\\": { \\\"extends\\\": \\\"airbnb-base\\\", #！！！！如果没使用alias下面的不用配置！！！！！ \\\"settings\\\": { \\\"import/resolver\\\": { \\\"webpack\\\": { \\\"config\\\": \\\"webpack.config.js\\\" } } } } * */ new ESLintPlugin({ fix: true, extensions: ['js', 'json', 'coffee'], exclude: '/node_modules/' }) ], mode: \\\"development\\\" } \"]},\"242\":{\"h\":\"js 兼容性处理\",\"t\":[\"基本js兼容性处理\",\"npm i babel-loader @babel/core @babel/preset-env -D\",\"const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') const ESLintPlugin = require('eslint-webpack-plugin'); module.exports = { // 全部js兼容性处理——> @babel/polyfill entry: './src/index.js', output: { filename: \\\"js/build.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ /* * js兼容性处理：babel-loader @babel/core @babel/preset-env * 1. 基本js兼容性处理——> @babel/preset-env 问题：只能转换基本语法 ，例如promise不能转换 * 2. 全部js兼容性处理——> @babel/polyfill 问题：只要解决部分 兼容性问题 ，但是将所有兼容性代码全部引入，体积太大了 * 3. 需要做兼容性处理的就做按需加载 ——> corejs * */ { test: /\\\\.js$/, exclude: /node_modules/, loader: \\\"babel-loader\\\", options: { // 预设：指示babel做怎么样的兼容性处理 presets: [ [ '@babel/preset-env', ] ] } } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }), /* * webpack5 * npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D *\\\"eslintConfig\\\": { \\\"extends\\\": \\\"airbnb-base\\\", #！！！！如果没使用alias下面的不用配置！！！！！ \\\"settings\\\": { \\\"import/resolver\\\": { \\\"webpack\\\": { \\\"config\\\": \\\"webpack.config.js\\\" } } } } * */ new ESLintPlugin({ fix: true, extensions: ['js', 'json', 'coffee'], exclude: '/node_modules/' }) ], mode: \\\"development\\\" } \",\"全部js兼容性处理\",\"npm i @babel/polyfill -D\",\"const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') const ESLintPlugin = require('eslint-webpack-plugin'); module.exports = { // 全部js兼容性处理——> @babel/polyfill entry: ['@babel/polyfill','./src/index.js'], output: { filename: \\\"js/build.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ /* * js兼容性处理：babel-loader @babel/core @babel/preset-env * 1. 基本js兼容性处理——> @babel/preset-env 问题：只能转换基本语法 ，例如promise不能转换 * 2. 全部js兼容性处理——> @babel/polyfill 问题：只要解决部分 兼容性问题 ，但是将所有兼容性代码全部引入，体积太大了 * 3. 需要做兼容性处理的就做按需加载 ——> corejs * */ { test: /\\\\.js$/, exclude: /node_modules/, loader: \\\"babel-loader\\\", options: { // 预设：指示babel做怎么样的兼容性处理 presets: [ [ '@babel/preset-env', ] ] } } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }), /* * webpack5 * npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D *\\\"eslintConfig\\\": { \\\"extends\\\": \\\"airbnb-base\\\", #！！！！如果没使用alias下面的不用配置！！！！！ \\\"settings\\\": { \\\"import/resolver\\\": { \\\"webpack\\\": { \\\"config\\\": \\\"webpack.config.js\\\" } } } } * */ new ESLintPlugin({ fix: true, extensions: ['js', 'json', 'coffee'], exclude: '/node_modules/' }) ], mode: \\\"development\\\" } \",\"按需加载兼容性处理\",\"npm i core-js -D\",\"const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') const ESLintPlugin = require('eslint-webpack-plugin'); module.exports = { // 全部js兼容性处理——> @babel/polyfill // entry: ['@babel/polyfill','./src/index.js'], entry: './src/index.js', output: { filename: \\\"js/build.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ /* * js兼容性处理：babel-loader @babel/core @babel/preset-env * 1. 基本js兼容性处理——> @babel/preset-env 问题：只能转换基本语法 ，例如promise不能转换 * 2. 全部js兼容性处理——> @babel/polyfill 问题：只要解决部分 兼容性问题 ，但是将所有兼容性代码全部引入，体积太大了 * 3. 需要做兼容性处理的就做按需加载 ——> corejs * */ { test: /\\\\.js$/, exclude: /node_modules/, loader: \\\"babel-loader\\\", options: { // 预设：指示babel做怎么样的兼容性处理 presets: [ [ '@babel/preset-env', { // 按需加载 useBuiltIns: 'usage', // 指定corejs版本 corejs: { version: 3 }, // 指定兼容性做到哪个版本的浏览器 targets: { chrome: '60', firefox: '60', ie: '9', safari: '10', edge: '17' } } ] ] } } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\" }), /* * webpack5 * npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D *\\\"eslintConfig\\\": { \\\"extends\\\": \\\"airbnb-base\\\", #！！！！如果没使用alias下面的不用配置！！！！！ \\\"settings\\\": { \\\"import/resolver\\\": { \\\"webpack\\\": { \\\"config\\\": \\\"webpack.config.js\\\" } } } } * */ new ESLintPlugin({ fix: true, extensions: ['js', 'json', 'coffee'], exclude: '/node_modules/' }) ], mode: \\\"development\\\" } \"]},\"243\":{\"h\":\"js 压缩\",\"t\":[\"将mode设置为production即可自动压缩js文件\"]},\"244\":{\"h\":\"html 压缩\",\"t\":[\"const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') const ESLintPlugin = require('eslint-webpack-plugin'); module.exports = { // 全部js兼容性处理——> @babel/polyfill // entry: ['@babel/polyfill','./src/index.js'], entry: './src/index.js', output: { filename: \\\"js/build.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ /* * js兼容性处理：babel-loader @babel/core @babel/preset-env * 1. 基本js兼容性处理——> @babel/preset-env 问题：只能转换基本语法 ，例如promise不能转换 * 2. 全部js兼容性处理——> @babel/polyfill 问题：只要解决部分 兼容性问题 ，但是将所有兼容性代码全部引入，体积太大了 * 3. 需要做兼容性处理的就做按需加载 ——> corejs * */ { test: /\\\\.js$/, exclude: /node_modules/, loader: \\\"babel-loader\\\", options: { // 预设：指示babel做怎么样的兼容性处理 presets: [ [ '@babel/preset-env', { // 按需加载 useBuiltIns: 'usage', // 指定corejs版本 corejs: { version: 3 }, // 指定兼容性做到哪个版本的浏览器 targets: { chrome: '60', firefox: '60', ie: '9', safari: '10', edge: '17' } } ] ] } } ] }, plugins: [ new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\", minify: { // 移除空格 collapseWhitespace:true, // 移除注释 removeComments:true } }), /* * webpack5 * npm i eslint eslint-webpack-plugin eslint-config-airbnb-base eslint-plugin-import -D *\\\"eslintConfig\\\": { \\\"extends\\\": \\\"airbnb-base\\\", #！！！！如果没使用alias下面的不用配置！！！！！ \\\"settings\\\": { \\\"import/resolver\\\": { \\\"webpack\\\": { \\\"config\\\": \\\"webpack.config.js\\\" } } } } * */ new ESLintPlugin({ fix: true, extensions: ['js', 'json', 'coffee'], exclude: '/node_modules/' }) ], // 生产环境下会自动压缩js代码 mode: \\\"production\\\" } \",\"一个基本的生产环境配置\",\"const {resolve} = require('path') const MiniCssExtractPlugin = require('mini-css-extract-plugin') //压缩css文件 const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin') // js语法检查 const ESLintPlugin = require('eslint-webpack-plugin'); // 打包html资源 const HtmlWebpackPlugin = require('html-webpack-plugin') // 定义nodejs环境变量 决定browserslist使用哪个环境 process.env.NODE_ENV = 'production' // 复用loader const commonCssLoader = [ // MiniCssExtractPlugin.loader 取代style-loader // 为了提取成单独的css文件 MiniCssExtractPlugin.loader, 'css-loader', // 对样式做兼容性处理,还需要在package.json中配置browserslist { loader: \\\"postcss-loader\\\", options: { postcssOptions: { plugins: [ 'postcss-preset-env' ] }, } } ] module.exports = { entry: './src/index.js', output: { filename: \\\"js/built.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ { test: /\\\\.css$/, use: [...commonCssLoader] }, { test: /\\\\.less$/, use: [...commonCssLoader, 'less-loader'] }, /* * 正常来讲，一个文件只能被一个loader处理，当一个文件被多个loader处理时，那么一定要指定loader执行的顺序 * 先 执行eslint，在执行babel * enforce:'pre' 表示优先执行 * */ // js做兼容性配置 { test: /\\\\.js$/, exclude: /node_modules/, loader: \\\"babel-loader\\\", options: { // 预设：指示babel做怎么样的兼容性处理 presets: [ [ '@babel/preset-env', { // 按需加载 useBuiltIns: 'usage', // 指定corejs版本 corejs: { version: 3 }, // 指定兼容性做到哪个版本的浏览器 targets: { chrome: '60', firefox: '60', ie: '9', safari: '10', edge: '17' } } ] ] } }, // 图片 { test: /\\\\.(jpg|png|gif)$/, type: \\\"asset/resource\\\", //解析 parser: { //转base64的条件 dataUrlCondition: { maxSize: 25 * 1024, // 25kb } }, // [hash:6] 取图片哈希值的前十位 // [ext] 取文件原来扩展名 generator: { //与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径 filename: 'image/[name].[hash:6][ext]', //打包后对资源的引入，文件命名已经有/img了 // publicPath: './' }, }, // 处理html中的img标签 { test: /\\\\.html$/, loader: \\\"html-loader\\\" }, { // 排除 css/js/html资源 exclude: /\\\\.(css|js|html|less|jpg|png|gif)$/, // webpack5以下使用方式 // loader: \\\"file-loader\\\" type: \\\"asset/resource\\\", generator: { //与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径 filename: 'media/[name].[hash:6][ext]', //打包后对资源的引入，文件命名已经有/img了 publicPath: './' }, } ] }, plugins: [ // 将打包生成的css文件放在一个统一的目录下 new MiniCssExtractPlugin({ filename: 'css/built.css' }), //压缩css文件 new OptimizeCssAssetsWebpackPlugin(), // js语法检查 new ESLintPlugin({ fix: true, extensions: ['js', 'json', 'coffee'], exclude: '/node_modules/' }), // 打包HTML new HtmlWebpackPlugin({ template: \\\"./src/index.html\\\", minify: { collapseWhitespace: true, removeComments: true } }) ], mode: \\\"production\\\" } \"]},\"245\":{\"h\":\"5.1 开发环境性能优化配置\"},\"246\":{\"h\":\"5.1.1优化打包构建速度\"},\"247\":{\"h\":\"5.1.1.1HMR（模块热替换）\",\"t\":[\"HMR: hot module replacement 热模块替换 / 模块热替换\",\"作用：一个模块发生变化，只会重新打包构建这一个模块（而不是打包所有模块） ，极大提升构建速度\",\"代码：只需要在 devServer 中设置 hot 为 true，就会自动开启HMR功能（只能在开发模式下使用）\",\"devServer: { contentBase: resolve(__dirname, 'build'), compress: true, port: 3000, open: true, // 开启HMR功能 // 当修改了webpack配置，新配置要想生效，必须重启webpack服务 hot: true } \",\"每种文件实现热模块替换的情况：\",\"样式文件：可以使用HMR功能，因为开发环境下使用的 style-loader 内部默认实现了热模块替换功能\",\"js 文件：默认不能使用HMR功能（修改一个 js 模块所有 js 模块都会刷新）\",\"--> 实现 HMR 需要修改 js 代码（添加支持 HMR 功能的代码）\",\"// 绑定 if (module.hot) { // 一旦 module.hot 为true，说明开启了HMR功能。 --> 让HMR功能代码生效 module.hot.accept('./print.js', function() { // 方法会监听 print.js 文件的变化，一旦发生变化，只有这个模块会重新打包构建，其他模块不会。 // 会执行后面的回调函数 print(); }); } \",\"注意：HMR 功能对 js 的处理，只能处理非入口 js 文件的其他文件。\",\"html 文件: 默认不能使用 HMR 功能（html 不用做 HMR 功能，因为只有一个 html 文件，不需要再优化）\",\"使用 HMR 会导致问题：html 文件不能热更新了（不会自动打包构建）\",\"解决：修改 entry 入口，将 html 文件引入（这样 html 修改整体刷新）\",\"entry: ['./src/js/index.js', './src/index.html'] \"]},\"248\":{\"h\":\"5.1.2优化代码调试\"},\"249\":{\"h\":\"5.1.2.1 source-map\",\"t\":[\"source-map：一种提供源代码到构建后代码的映射的技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）\",\"参数：[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map\",\"代码：\",\"devtool: 'eval-source-map' \",\"可选方案：[生成source-map的位置|给出的错误代码信息]\",\"source-map：外部，错误代码准确信息 和 源代码的错误位置\",\"inline-source-map：内联，只生成一个内联 source-map，错误代码准确信息 和 源代码的错误位置\",\"hidden-source-map：外部，错误代码错误原因，但是没有错误位置（为了隐藏源代码），不能追踪源代码错误，只能提示到构建后代码的错误位置\",\"eval-source-map：内联，每一个文件都生成对应的 source-map，都在 eval 中，错误代码准确信息 和 源代码的错误位\",\"nosources-source-map：外部，错误代码准确信息，但是没有任何源代码信息（为了隐藏源代码）\",\"cheap-source-map：外部，错误代码准确信息 和 源代码的错误位置，只能把错误精确到整行，忽略列\",\"cheap-module-source-map：外部，错误代码准确信息 和 源代码的错误位置，module 会加入 loader 的 source-map\",\"内联 和 外部的区别：1. 外部生成了文件，内联没有 2. 内联构建速度更快\",\"开发/生产环境可做的选择：\",\"开发环境：需要考虑速度快，调试更友好\",\"速度快( eval > inline > cheap >... ) \",\"eval-cheap-souce-map\",\"eval-source-map\",\"调试更友好 \",\"souce-map\",\"cheap-module-souce-map\",\"cheap-souce-map\",\"最终得出最好的两种方案 --> eval-source-map（完整度高，内联速度快） / eval-cheap-module-souce-map（错误提示忽略列但是包含其他信息，内联速度快）\",\"生产环境：需要考虑源代码要不要隐藏，调试要不要更友好\",\"内联会让代码体积变大，所以在生产环境不用内联\",\"隐藏源代码 \",\"nosources-source-map 全部隐藏\",\"hidden-source-map 只隐藏源代码，会提示构建后代码错误信息\",\"最终得出最好的两种方案 --> source-map（最完整） / cheap-module-souce-map（错误提示一整行忽略列）\"]},\"250\":{\"h\":\"5.2 生产环境性能优化配置\"},\"251\":{\"h\":\"5.2.1 优化打包构建速度\"},\"252\":{\"h\":\"5.2.1.1 oneof\",\"t\":[\"module: { rules: [ { // 以下loader只会匹配一个 oneOf: [ { test: /\\\\.css$/, use: [...commonCssLoader] }, { test: /\\\\.less$/, use: [...commonCssLoader, 'less-loader'] }, /* * 正常来讲，一个文件只能被一个loader处理，当一个文件被多个loader处理时，那么一定要指定loader执行的顺序 * 先 执行eslint，在执行babel * enforce:'pre' 表示优先执行 * */ // js做兼容性配置 { test: /\\\\.js$/, exclude: /node_modules/, loader: \\\"babel-loader\\\", options: { // 预设：指示babel做怎么样的兼容性处理 presets: [ [ '@babel/preset-env', { // 按需加载 useBuiltIns: 'usage', // 指定corejs版本 corejs: { version: 3 }, // 指定兼容性做到哪个版本的浏览器 targets: { chrome: '60', firefox: '60', ie: '9', safari: '10', edge: '17' } } ] ] } }, // 图片 { test: /\\\\.(jpg|png|gif)$/, type: \\\"asset/resource\\\", //解析 parser: { //转base64的条件 dataUrlCondition: { maxSize: 25 * 1024, // 25kb } }, // [hash:6] 取图片哈希值的前十位 // [ext] 取文件原来扩展名 generator: { //与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径 filename: 'image/[name].[hash:6][ext]', //打包后对资源的引入，文件命名已经有/img了 // publicPath: './' }, }, // 处理html中的img标签 { test: /\\\\.html$/, loader: \\\"html-loader\\\" }, { // 排除 css/js/html资源 exclude: /\\\\.(css|js|html|less|jpg|png|gif)$/, // webpack5以下使用方式 // loader: \\\"file-loader\\\" type: \\\"asset/resource\\\", generator: { //与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径 filename: 'media/[name].[hash:6][ext]', //打包后对资源的引入，文件命名已经有/img了 publicPath: './' }, } ] } ] }, \"]},\"253\":{\"h\":\"5.2.1.2 babel缓存\",\"t\":[\"1.babel缓存 cacheDirectory:true 让第二次打包构建速度变快\",\"{ test: /\\\\.js$/, exclude: /node_modules/, loader: \\\"babel-loader\\\", options: { // 预设：指示babel做怎么样的兼容性处理 presets: [ [ '@babel/preset-env', { // 按需加载 useBuiltIns: 'usage', // 指定corejs版本 corejs: { version: 3 }, // 指定兼容性做到哪个版本的浏览器 targets: { chrome: '60', firefox: '60', ie: '9', safari: '10', edge: '17' } } ] ], // 开启babel缓存 cacheDirectory:true } }, \"]},\"254\":{\"h\":\"5.2.1.3 多进程打包\",\"t\":[\"当项目中js文件较多，打包较满时，推荐配置使用\",\"使用步骤：\",\"npm i thread-loader -D\",\"配置loader\",\"{ test: /\\\\.js$/, exclude: /node_modules/, use: [ // 开启多进程打包 // 进程启动大概为600ms，进程通信也有开销，只有工作消耗比较长，才需要多进程打包 { loader: 'thread-loader', options: { workers:2 // 进程2个 } }, { loader: \\\"babel-loader\\\", options: { // 预设：指示babel做怎么样的兼容性处理 presets: [ [ '@babel/preset-env', { // 按需加载 useBuiltIns: 'usage', // 指定corejs版本 corejs: { version: 3 }, // 指定兼容性做到哪个版本的浏览器 targets: { chrome: '60', firefox: '60', ie: '9', safari: '10', edge: '17' } } ] ], // 开启babel缓存 cacheDirectory: true } } ], }, \"]},\"255\":{\"h\":\"5.2.1.4 externals\",\"t\":[\"externals主要作用是拒绝将某些包打包到文件中\",\"/* * loader：1.下载 2.使用（配置loader） * plugins：1.下载 2.引入 3.使用 * * */ const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') module.exports = { entry: './src/index.js', output: { filename: \\\"js/built.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ // loader的配置 ] }, plugins: [ //plugins的配置 //html-webpack-plugin // 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS） // 需要有结构的HTML文件 new HtmlWebpackPlugin({ // 复制 './src/index.html' 文件,自动引入打包输出的所有资源（JS/CSS） template: \\\"./src/index.html\\\" }) ], mode: 'production', externals: { // 拒绝jQuery这个包被打包进去 jquery:'jQuery' } } \"]},\"256\":{\"h\":\"5.2.1.5 dll\",\"t\":[\"dll是可以将某些库分离出来单独打包一次后，以后再打包项目时，不需要再多次打包，提高了打包的效率\",\"使用流程：\",\"创建 webpack.dll.js\",\"/* * 使用dll技术对某些库进行打包（jquery、react、vue） * 当你运行webpack时，默认查找 webpack.config.js 配置文件 * --》 webpack --config webpack.dll.js * * * */ const {resolve} = require('path') const webpack = require('webpack') module.exports = { entry: { // 最终打包生成的[name] --> jquery // ['jquery'] --> 要打包的库是jquery jquery:['jquery'] }, output: { filename: \\\"[name].js\\\", path: resolve(__dirname,'dll'), library: '[name]_[hash]' }, plugins: [ // 打包 生成一个 manifest.json --> 提供和jQuery的映射关系 new webpack.DllPlugin({ name:'[name]_[hash]', // 映射库的暴露内容名称 path: resolve(__dirname,'dll/manifest.json') }) ], mode:'production' } \",\"运行 webpack --config webpack.dll.js，打包后会在目录下生成 相应的dll目录，以及manifest.json文件\",\"npm i add-asset-html-webpack-plugin -D\",\"配置对应的插件\",\"const webpack = require('webpack') const {resolve} = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') // const AddAssetHtmlWebpackPlugin = require('add-asset-html-webpack-plugin') module.exports = { entry: './src/index.js', output: { filename: \\\"js/built.js\\\", path: resolve(__dirname, 'build') }, module: { rules: [ // loader的配置 ] }, plugins: [ //plugins的配置 //html-webpack-plugin // 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS） // 需要有结构的HTML文件 new HtmlWebpackPlugin({ // 复制 './src/index.html' 文件,自动引入打包输出的所有资源（JS/CSS） template: \\\"./src/index.html\\\" }), // 告诉webpack哪些库不参与打包，同时使用的名称也需要改变 new webpack.DllReferencePlugin({ manifest: resolve(__dirname, 'dll/manifest.json') }), // 配置到后引入对应的jquery new AddAssetHtmlWebpackPlugin({ filepath: resolve(__dirname, 'dll/jquery.js'), publicPath:'./' }) ], mode: 'production', } \"]},\"257\":{\"h\":\"5.2.2 优化代码运行的性能\"},\"258\":{\"h\":\"5.2.2.1 缓存(hash-chunkhash-contenthash)\",\"t\":[\"文件资源缓存 让代码上线 运行缓存更好使用\",\"修改文件名[hash:10] \",\"问题：由于js和css同时使用一个hash值，如果重新打包，会导致所有缓存失效（只改动一个文件\",\"chunkhash \",\"根据chunk生成的hash值，如果 打包来源于同一个chunk，那么hash值就一样\",\"问题：因为css是在js中被引入的，所以同属于一个chunk\",\"contenthash \",\"根据文件内容生成 hash值，不同文件hash值一定不一样\",\"//output中的入口js文件 output: { filename: \\\"js/built.[contenthash:10].js\\\", path: resolve(__dirname, 'build') } //plugins中的css文件 new MiniCssExtractPlugin({ filename: 'css/built.[contenthash:10].css' }), \"]},\"259\":{\"h\":\"5.2.2.2 tree shaking\",\"t\":[\"tree shaking 去除无用代码，减少代码体积\",\"前提：\",\"必须使用ES6模块化代码\",\"开启production模式\",\"注意：\",\"在package.json中配置 \\\"sideEffects\\\":false 所有代码没有副作用（都可以进行tree shaking）\",\"问题：可能会把css / @babel/lolyfill (副作用)文件干掉\",\"\\\"sideEffects\\\":[\\\"*.css\\\"] 保留css\"]},\"260\":{\"h\":\"5.2.2.3 code split\",\"t\":[\"将打包后的js代码按照不同的方式进行分割。\",\"方式一：更改入口文件配置\",\"entry: { // 多入口：有一个入口，就输出一个bundle main:'./src/index.js', test:'./src/js/test.js' }, output: { // [name]: 取文件名 filename: \\\"js/[name].[contenthash:10].js\\\", path: resolve(__dirname, 'build') }, \",\"方式二：optimization配置\",\"// 可以将node_modules中的代码单独打包成一个chunk最终输出 // 自动分析多入口chunk中，有没有公共的文件，如果有会打包成单独一个chunk optimization: { splitChunks: { chunks: 'all', minSize: 20000, minRemainingSize: 0, minChunks: 1, maxAsyncRequests: 30, maxInitialRequests: 30, enforceSizeThreshold: 50000, cacheGroups: { defaultVendors: { test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/, priority: -10, reuseExistingChunk: true, }, default: { minChunks: 2, priority: -20, reuseExistingChunk: true, }, }, }, }, \",\"方式三：通过import()方式\",\"// 通过js代码，让某个文件单独打包成一个chunk // eslint-disable-next-line import(/* webpackChunkName:'test' */'./js/test').then(function (res) { console.log(res); }).catch(function () { console.log('error') }) \"]},\"261\":{\"h\":\"5.2.2.4 懒加载和预加载\",\"t\":[\"懒加载：当文件需要时才加载\",\"预加载prefetch：会在使用之前，提前加载js文件\",\"正常加载可以认为是并行加载（同一时间加载多个文件）\",\"预加载 prefetch：等其他资源加载完毕，浏览器空闲了，在偷偷加载资源\",\"document.getElementById('btn').onclick = function () { import(/* webpackChunkName:'test',webpackPrefetch:true */'./js/test').then(({mul}) => { console.log(mul(2, 3)); }) } \"]},\"262\":{\"h\":\"5.2.2.5 PWA\",\"t\":[\"PWA:渐进式网络开发应用程序（离线可访问）\",\"使用步骤：\",\"下载 workbox-webpack-plugin：npm i workbox-webpack-plugin -D\",\"使用插件\",\"new WorkboxWebpackPlugin.GenerateSW({ /* * 1.帮助serviceWorker快速启动 * 2. 删除旧的serviceworker * * 生成一个serviceworker配置文件 * */ clientsClaim:true, skipWaiting:true }) \",\"注册serviceWorker（入口js文件中）\",\"// 注册serviceworker // 处理兼容性问题 if ('serviceWorker' in navigator){ window.addEventListener('load',() => { navigator.serviceWorker.register('/service-worker.js') .then(() => { console.log('serviceworker注册成功了') }).catch(() => { console.log('serviceworker注册失败了') }) }) } \",\"注意：\",\" 1.eslint不认识 window、navigator全局变量 解决：修改package.json中eslintConfig配置 \\\"eslintConfig\\\": { \\\"extends\\\": \\\"airbnb-base\\\", \\\"env\\\": { \\\"browser\\\": true } }, 2.service worker代码必须运行在服务器上 npm i serve -g serve -s build \"]},\"263\":{\"h\":\"6.1 entry\",\"t\":[\"1.string： './src/index.js' 单入口 打包形成一个chunk，输出一个bundle文件，此时chunk的名称默认是main\",\"entry:'./src/index.js' \",\"2.array ：['./src/index.js','./src/add.js'] 多入口 所有入口文件最终会形成一个chunk，输出出去只有 一个bundle文件。一般只有在HMR功能中让HTML热更新生效\",\"entry: ['./src/index.js','./src/add.js'] \",\"3.object：多入口，有几个文件就形成几个chunk，输出几个bundle文件，此时chunk的名称是key\",\"entry: { index:'./src/index.js', add:'./src/add.js' }, \",\"4.特殊用法\",\"entry: { // 所有入口文件最终只会形成一个chunk，输出出去只有一个bundle index:['./src/index.js','./src/count.js'], //形成一个chunk add:'./src/add.js' }, \"]},\"264\":{\"h\":\"6.2 output\",\"t\":[\"output: { // 文件名称 指定名称+目录 filename: \\\"js/[name].js\\\", // 输出文件目录（将来所有资源输出的公共目录） path: resolve(__dirname,'build'), // 所有资源引入公共路径前缀--> 'imgs/a.jpg' --> '/imgs/a.jpg' publicPath: \\\"/\\\", chunkFilename: \\\"js/[name]_chunk.js\\\", library: '[name]', // 整个库向外暴露的变量名 libraryTarget: \\\"window\\\" // 变量名添加到哪个上 window global browser node }, \"]},\"265\":{\"h\":\"6.3 module\",\"t\":[\"module: { rules: [ // loader配置 { test:/\\\\.css$/, use:['style-loader','css-loader'] }, { test:/\\\\.js$/, // 排除node_modules下的文件 exclude: /node_moudles/, // 只检查src下的js文件 include: resolve(__dirname,'src'), // 优先执行 enforce: \\\"pre\\\", // 延后执行 // enforce:\\\"post\\\" // 单个loader用loader loader: \\\"eslint-loader\\\", options: {} }, { // 以下配置只会生效一个 oneOf: [] } ], }, \"]},\"266\":{\"h\":\"6.4 resolve\",\"t\":[\"// 解析模块的规则 resolve: { // 配置路径别名:优点：简写路径 缺点：路径没有提示 alias: { $css:resolve(__dirname,'src/css') }, // 配置省略文件路径的后缀名 extensions: ['.js','.json','.css','.jsx'], // 告诉webpack解析模块时是去哪个目录找 modules: [resolve(__dirname,'../../node_modules'),'node_modules'] } \"]},\"267\":{\"h\":\"6.5 devServer\",\"t\":[\"devServer: { // 运行代码的目录 // contentBase:resolve(__dirname,'build'), static: { directory: resolve(__dirname, 'build'), watch:{ // 忽略文件 ignored:/node_modules/ } }, // 启动 gzip压缩 compress:true, // 端口号 port:3000, // 开启HMR功能 hot:true, // 域名 host:'localhost', // 自动打开浏览器 open:true, // 不要显示启动服务器日志信息 client:{ logging:'none', // 如果出错了，不要全屏提示 overlay:false }, // 除了一些 基本启动信息外，其他内容也不要显示 quiet:true, proxy:{ '/api':{ target:'http://localhost:3000', pathRewrite:{ '^api':'' } } } } \"]},\"268\":{\"h\":\"6.6 optimization\",\"t\":[\"optimization: { splitChunks: { chunks: \\\"all\\\", // 默认值可以不用写 /* * minSize: 30*1024, // 分割的chunk最小为30kb maxSize: 0, // 最大没有限制 minChunks: 1, // 要提取的chunk最少被引用一次 maxAsyncRequests: 5,// 按需加载时并行加载的文件最大数量 maxInitialRequests: 3, // 入口js文件最大并行请求量 automaticNameDelimiter: \\\"~\\\", // 名称连接符 name:true, // 可以使用命名规则 cacheGroups: { // 分割的chunk组 // node_modules文件会被打包 到vendors组的chunk中 -- vendors~xxx.js // 满足上面的公共规则 vendor : { test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/, priority: -10 }, default:{ // 要提取的chunk最少被使用两次 minChunks: 2, // 优先级 priority: -20, // 如果当前要打包的模块，和之前已经被提取的模块时 同一个，就会复用，而不是重新打包模块 reuseExistingChunk: true } } * */ }, // 将当前模块记录其他模块的hash单独打包成为一个文件 runtime // 解决：修改a文件导致b文件的contenthash变化 runtimeChunk: { name: entrypoint =>`runtime-${entrypoint.name}` }, minimizer: [ // 配置生产环境的压缩方案 new TerserWebpackPlugin({ // 开启缓存 cache:true, // 开启多进程打包 parallel:true, // 启动source-map sourceMap:true }) ] } \"]},\"269\":{\"c\":[\"web\"]},\"270\":{\"c\":[\"js\"]},\"271\":{\"h\":\"Vue2\"},\"272\":{\"c\":[\"Vue\"]},\"273\":{\"h\":\"Vue3\"},\"274\":{\"c\":[\"Vue\"]},\"275\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"满足上面的公共规则\",{\"1\":{\"268\":1}}],[\"名称连接符\",{\"1\":{\"268\":1}}],[\"名字是固定的\",{\"1\":{\"71\":1}}],[\"^api\",{\"1\":{\"267\":1}}],[\"域名\",{\"1\":{\"267\":1}}],[\"告诉webpack解析模块时是去哪个目录找\",{\"1\":{\"266\":1}}],[\"告诉webpack哪些库不参与打包\",{\"1\":{\"256\":1}}],[\"延后执行\",{\"1\":{\"265\":1}}],[\"延长了局部变量的生命周期\",{\"1\":{\"152\":1}}],[\"整个库向外暴露的变量名\",{\"1\":{\"264\":1}}],[\"整体打包环境\",{\"1\":{\"232\":2}}],[\"删除旧的serviceworker\",{\"1\":{\"262\":1}}],[\"删除元素\",{\"1\":{\"69\":2}}],[\"帮助serviceworker快速启动\",{\"1\":{\"262\":1}}],[\"帮postcss找到package\",{\"1\":{\"239\":1,\"240\":1}}],[\"离线可访问\",{\"1\":{\"262\":1}}],[\"渐进式网络开发应用程序\",{\"1\":{\"262\":1}}],[\"预加载\",{\"1\":{\"261\":1}}],[\"预加载prefetch\",{\"1\":{\"261\":1}}],[\"预设\",{\"1\":{\"242\":3,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"懒加载\",{\"1\":{\"261\":1}}],[\"懒加载和预加载\",{\"0\":{\"261\":1}}],[\"保留css\",{\"1\":{\"259\":1}}],[\"保存多个线程对象的容器\",{\"1\":{\"160\":1}}],[\"保存的都是地址值\",{\"1\":{\"116\":1}}],[\"保存的都是基本类型的数据\",{\"1\":{\"116\":1}}],[\"副作用\",{\"1\":{\"259\":1}}],[\"去除无用代码\",{\"1\":{\"259\":1}}],[\"去掉字符串前后的空白字符\",{\"1\":{\"96\":1}}],[\"根据文件内容生成\",{\"1\":{\"258\":1}}],[\"根据chunk生成的hash值\",{\"1\":{\"258\":1}}],[\"根目录下创建tsconfig\",{\"1\":{\"192\":1}}],[\"根目录下创建webpack的配置文件webpack\",{\"1\":{\"191\":1}}],[\"缓存\",{\"0\":{\"258\":1}}],[\"映射库的暴露内容名称\",{\"1\":{\"256\":1}}],[\"拒绝jquery这个包被打包进去\",{\"1\":{\"255\":1}}],[\"才需要多进程打包\",{\"1\":{\"254\":1}}],[\"才会遍历读取回调队列中的回调函数执行\",{\"1\":{\"164\":1}}],[\"推荐配置使用\",{\"1\":{\"254\":1}}],[\"优先级\",{\"1\":{\"268\":1}}],[\"优先执行\",{\"1\":{\"265\":1}}],[\"优化代码运行的性能\",{\"0\":{\"257\":1}}],[\"优化打包构建速度\",{\"0\":{\"251\":1}}],[\"优点\",{\"1\":{\"160\":2,\"235\":1,\"266\":1}}],[\"最大没有限制\",{\"1\":{\"268\":1}}],[\"最终打包生成的\",{\"1\":{\"256\":1}}],[\"最终得出最好的两种方案\",{\"1\":{\"249\":2}}],[\"最完整\",{\"1\":{\"249\":1}}],[\"错误提示一整行忽略列\",{\"1\":{\"249\":1}}],[\"错误提示忽略列但是包含其他信息\",{\"1\":{\"249\":1}}],[\"错误代码错误原因\",{\"1\":{\"249\":1}}],[\"错误代码准确信息\",{\"1\":{\"249\":6}}],[\"完整度高\",{\"1\":{\"249\":1}}],[\"完全可以将泛型当成是一个普通的类去使用\",{\"1\":{\"214\":1}}],[\"速度快\",{\"1\":{\"249\":1}}],[\"调试要不要更友好\",{\"1\":{\"249\":1}}],[\"调试更友好\",{\"1\":{\"249\":2}}],[\"调用函数时创建\",{\"1\":{\"145\":1}}],[\"调用函数的对象\",{\"1\":{\"141\":1}}],[\"调用promise\",{\"1\":{\"102\":1}}],[\"调用then方法\",{\"1\":{\"87\":1}}],[\"调用父类型构造函数\",{\"1\":{\"158\":1}}],[\"调用父类构造函数\",{\"1\":{\"71\":2}}],[\"调用父级构造方法\",{\"1\":{\"71\":1}}],[\"调用方法\",{\"1\":{\"68\":1}}],[\"调用\",{\"1\":{\"68\":1}}],[\"调用resolve\",{\"1\":{\"68\":1}}],[\"调用生成器函数\",{\"1\":{\"67\":1}}],[\"调用迭代器对象的\",{\"1\":{\"67\":1}}],[\"调用对象的next方法\",{\"1\":{\"66\":1}}],[\"忽略文件\",{\"1\":{\"267\":1}}],[\"忽略列\",{\"1\":{\"249\":1}}],[\"忽略不可达代码\",{\"1\":{\"186\":1}}],[\"源代码的错误位\",{\"1\":{\"249\":1}}],[\"源代码的错误位置\",{\"1\":{\"249\":4}}],[\"外部生成了文件\",{\"1\":{\"249\":1}}],[\"外部的区别\",{\"1\":{\"249\":1}}],[\"外部\",{\"1\":{\"249\":5}}],[\"外部函数调用\",{\"1\":{\"150\":1}}],[\"说明开启了hmr功能\",{\"1\":{\"247\":1}}],[\"样式文件\",{\"1\":{\"247\":1}}],[\"样式字符串\",{\"1\":{\"233\":1}}],[\"极大提升构建速度\",{\"1\":{\"247\":1}}],[\"热模块替换\",{\"1\":{\"247\":1}}],[\"决定browserslist使用哪个环境\",{\"1\":{\"244\":1}}],[\"移除注释\",{\"1\":{\"244\":1}}],[\"移除空格\",{\"1\":{\"244\":1}}],[\"移植到\",{\"1\":{\"76\":1}}],[\"按需加载时并行加载的文件最大数量\",{\"1\":{\"268\":1}}],[\"按需加载\",{\"1\":{\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"按需加载兼容性处理\",{\"1\":{\"242\":1}}],[\"体积太大了\",{\"1\":{\"242\":3,\"244\":1}}],[\"兼容性问题\",{\"1\":{\"242\":3,\"244\":1}}],[\"兼容性处理\",{\"0\":{\"239\":1,\"242\":1}}],[\"端口号\",{\"1\":{\"237\":2,\"267\":1}}],[\"启动source\",{\"1\":{\"268\":1}}],[\"启动\",{\"1\":{\"237\":2,\"267\":1}}],[\"启动devserver指令为\",{\"1\":{\"237\":2}}],[\"启用\",{\"1\":{\"230\":2}}],[\"启用所有的严格检查\",{\"1\":{\"186\":1}}],[\"排除node\",{\"1\":{\"265\":1}}],[\"排除\",{\"1\":{\"236\":1,\"237\":2,\"244\":1,\"252\":1}}],[\"排列越靠前\",{\"1\":{\"20\":1}}],[\"取文件名\",{\"1\":{\"260\":1}}],[\"取文件原来扩展名\",{\"1\":{\"235\":1,\"237\":1,\"244\":1,\"252\":1}}],[\"取代style\",{\"1\":{\"244\":1}}],[\"取图片哈希值的前十位\",{\"1\":{\"235\":1,\"237\":1,\"244\":1,\"252\":1}}],[\"取名为\",{\"1\":{\"165\":1}}],[\"解析模块的规则\",{\"1\":{\"266\":1}}],[\"解析\",{\"1\":{\"235\":1,\"237\":1,\"244\":1,\"252\":1}}],[\"解析时会出现问题\",{\"1\":{\"235\":1}}],[\"解决\",{\"1\":{\"154\":1,\"235\":1,\"247\":1,\"262\":1,\"268\":1}}],[\"解决方式一\",{\"1\":{\"149\":1}}],[\"减少代码体积\",{\"1\":{\"259\":1}}],[\"减少请求数量\",{\"1\":{\"235\":1}}],[\"减轻服务器压力\",{\"1\":{\"235\":1}}],[\"图片\",{\"1\":{\"244\":1,\"252\":1}}],[\"图片体积变大\",{\"1\":{\"235\":1}}],[\"图片大小小于8kb\",{\"1\":{\"235\":1}}],[\"图片文件\",{\"1\":{\"228\":1}}],[\"功能对\",{\"1\":{\"247\":1}}],[\"功能的代码\",{\"1\":{\"247\":1}}],[\"功能\",{\"1\":{\"234\":1,\"247\":2,\"255\":1,\"256\":1}}],[\"里面内容是\",{\"1\":{\"233\":1}}],[\"详细loader配置\",{\"1\":{\"233\":1}}],[\"代表当前文件所在目录的绝对路径\",{\"1\":{\"233\":1}}],[\"代码\",{\"1\":{\"232\":1,\"247\":2,\"249\":1}}],[\"代码的分类\",{\"1\":{\"163\":1}}],[\"代码执行之前创建\",{\"1\":{\"145\":1}}],[\"代码分类\",{\"1\":{\"141\":1}}],[\"代码复用\",{\"1\":{\"80\":1}}],[\"代码实现\",{\"1\":{\"70\":1}}],[\"代码说明\",{\"1\":{\"67\":1}}],[\"种新的模块类型\",{\"1\":{\"232\":1}}],[\"平台运行的\",{\"1\":{\"232\":1}}],[\"干哪些活\",{\"1\":{\"232\":1}}],[\"等其他资源加载完毕\",{\"1\":{\"261\":1}}],[\"等其他资源\",{\"1\":{\"232\":1}}],[\"等文件后\",{\"1\":{\"232\":1}}],[\"资源模块类型\",{\"1\":{\"232\":1}}],[\"资源\",{\"0\":{\"234\":1},\"1\":{\"232\":1}}],[\"文件名称\",{\"1\":{\"264\":1}}],[\"文件干掉\",{\"1\":{\"259\":1}}],[\"文件资源缓存\",{\"1\":{\"258\":1}}],[\"文件引入\",{\"1\":{\"247\":1}}],[\"文件不能热更新了\",{\"1\":{\"247\":1}}],[\"文件的其他文件\",{\"1\":{\"247\":1}}],[\"文件的变化\",{\"1\":{\"247\":1}}],[\"文件命名已经有\",{\"1\":{\"235\":1,\"237\":2,\"244\":2,\"252\":2}}],[\"文件请求速度变慢\",{\"1\":{\"235\":1}}],[\"文件\",{\"1\":{\"232\":1,\"234\":1,\"247\":3,\"255\":1,\"256\":1}}],[\"文件操作\",{\"1\":{\"67\":1}}],[\"选项\",{\"1\":{\"230\":1}}],[\"插件的范围包括\",{\"1\":{\"229\":1}}],[\"插件\",{\"1\":{\"229\":1}}],[\"输出文件目录\",{\"1\":{\"264\":1}}],[\"输出文件名\",{\"1\":{\"233\":1}}],[\"输出几个bundle文件\",{\"1\":{\"263\":1}}],[\"输出出去只有一个bundle\",{\"1\":{\"263\":1}}],[\"输出出去只有\",{\"1\":{\"263\":1}}],[\"输出一个bundle文件\",{\"1\":{\"263\":1}}],[\"输出路径\",{\"1\":{\"233\":1}}],[\"输出到哪里去\",{\"1\":{\"227\":1}}],[\"输出\",{\"1\":{\"227\":1}}],[\"入口js文件最大并行请求量\",{\"1\":{\"268\":1}}],[\"入口js文件中\",{\"1\":{\"262\":1}}],[\"入口文件\",{\"1\":{\"233\":1}}],[\"入口\",{\"1\":{\"226\":1,\"247\":1}}],[\"五个核心概念\",{\"0\":{\"225\":1}}],[\"看来\",{\"1\":{\"224\":1}}],[\"看来我需要学学数组的一些方法\",{\"1\":{\"69\":1}}],[\"除此之外\",{\"1\":{\"216\":1}}],[\"除了一些\",{\"1\":{\"267\":1}}],[\"除了\",{\"1\":{\"236\":1,\"237\":2}}],[\"除了webpack\",{\"1\":{\"195\":1}}],[\"除了定义自己使用的\",{\"1\":{\"65\":1}}],[\"k\",{\"1\":{\"214\":2}}],[\"k>\",{\"1\":{\"214\":1}}],[\"keys\",{\"1\":{\"88\":1}}],[\"key\",{\"1\":{\"88\":1}}],[\"keyframes\",{\"1\":{\"40\":1}}],[\"那么hash值就一样\",{\"1\":{\"258\":1}}],[\"那么一定要指定loader执行的顺序\",{\"1\":{\"244\":1,\"252\":1}}],[\"那么如何使用上边的函数呢\",{\"1\":{\"210\":1}}],[\"那么返回的结果就是promise对象的结果\",{\"1\":{\"87\":1}}],[\"由于js和css同时使用一个hash值\",{\"1\":{\"258\":1}}],[\"由于类型不确定所以参数和返回值均使用了any\",{\"1\":{\"208\":1}}],[\"由变量名和变量值组成\",{\"1\":{\"120\":1}}],[\"举个例子\",{\"1\":{\"208\":1}}],[\"举例来说\",{\"1\":{\"196\":1}}],[\"泛型继承\",{\"0\":{\"216\":1}}],[\"泛型类\",{\"0\":{\"215\":1}}],[\"泛型间使用逗号隔开\",{\"1\":{\"214\":1}}],[\"泛型函数\",{\"0\":{\"209\":1}}],[\"泛型\",{\"0\":{\"208\":1}}],[\"受包含的属性\",{\"1\":{\"207\":2}}],[\"换句话说接口中的所有方法都是抽象方法\",{\"1\":{\"206\":1}}],[\"换行\",{\"1\":{\"14\":2}}],[\"抽象方法没有方法体只能定义在抽象类中\",{\"1\":{\"205\":1}}],[\"抽象类是专门用来被其他类所继承的类\",{\"1\":{\"205\":1}}],[\"抽象类\",{\"0\":{\"205\":1}}],[\"狗在跑~\",{\"1\":{\"205\":1}}],[\"重写\",{\"0\":{\"204\":1}}],[\"重新初始化对象\",{\"1\":{\"66\":1}}],[\"旺财\",{\"1\":{\"203\":1,\"204\":1}}],[\"写或什么都不写都是public\",{\"1\":{\"199\":1}}],[\"写法只是让对象原型的写法更加清晰\",{\"1\":{\"71\":1}}],[\"封装\",{\"0\":{\"199\":1}}],[\"必须使用es6模块化代码\",{\"1\":{\"259\":1}}],[\"必须重启webpack服务\",{\"1\":{\"247\":1}}],[\"必须调用父类的构造方法\",{\"1\":{\"198\":1}}],[\"必须要先定义类\",{\"1\":{\"196\":1}}],[\"必须写在\",{\"1\":{\"87\":1}}],[\"操作对象\",{\"1\":{\"196\":1}}],[\"要提取的chunk最少被使用两次\",{\"1\":{\"268\":1}}],[\"要提取的chunk最少被引用一次\",{\"1\":{\"268\":1}}],[\"要打包的库是jquery\",{\"1\":{\"256\":1}}],[\"要使用多个\",{\"1\":{\"235\":2}}],[\"要创建对象\",{\"1\":{\"196\":1}}],[\"要想面向对象\",{\"1\":{\"196\":1}}],[\"要先在项目根目录下创建一个ts的配置文件\",{\"1\":{\"181\":1}}],[\"虽然ts在编译时也支持代码转换\",{\"1\":{\"195\":1}}],[\"修饰的属性可以在\",{\"1\":{\"207\":2}}],[\"修改a文件导致b文件的contenthash变化\",{\"1\":{\"268\":1}}],[\"修改文件名\",{\"1\":{\"258\":1}}],[\"修改整体刷新\",{\"1\":{\"247\":1}}],[\"修改一个\",{\"1\":{\"247\":1}}],[\"修改loader配置\",{\"1\":{\"239\":1,\"240\":1}}],[\"修改\",{\"1\":{\"207\":2,\"247\":1}}],[\"修改webpack\",{\"1\":{\"195\":1}}],[\"修改package\",{\"0\":{\"193\":1},\"1\":{\"193\":1,\"262\":1}}],[\"修正constructor\",{\"1\":{\"158\":1}}],[\"关闭url\",{\"1\":{\"235\":1}}],[\"关闭webpack的箭头函数\",{\"1\":{\"191\":1}}],[\"关闭代码压缩\",{\"1\":{\"191\":1}}],[\"关键\",{\"1\":{\"71\":1,\"158\":2}}],[\"关键字时\",{\"1\":{\"65\":1}}],[\"关键字用来声明常量\",{\"1\":{\"54\":1}}],[\"关键字用来声明变量\",{\"1\":{\"53\":1}}],[\"关键字\",{\"1\":{\"51\":1}}],[\"配置生产环境的压缩方案\",{\"1\":{\"268\":1}}],[\"配置省略文件路径的后缀名\",{\"1\":{\"266\":1}}],[\"配置路径别名\",{\"1\":{\"266\":1}}],[\"配置到后引入对应的jquery\",{\"1\":{\"256\":1}}],[\"配置对应的插件\",{\"1\":{\"256\":1}}],[\"配置文件\",{\"1\":{\"256\":1}}],[\"配置eslintconfig\",{\"1\":{\"241\":1}}],[\"配置\",{\"1\":{\"237\":1}}],[\"配置开发环境\",{\"1\":{\"237\":1}}],[\"配置less\",{\"1\":{\"237\":1}}],[\"配置loader\",{\"1\":{\"234\":1,\"235\":2,\"236\":1,\"237\":2,\"254\":1,\"255\":1}}],[\"配置css\",{\"1\":{\"237\":1}}],[\"配置可以根据自己需要\",{\"1\":{\"192\":1}}],[\"配置ts编译选项\",{\"0\":{\"192\":1}}],[\"配置webpack\",{\"0\":{\"191\":1}}],[\"配置选项\",{\"1\":{\"181\":1}}],[\"构建工具webpack\",{\"1\":{\"190\":1}}],[\"构造方法\",{\"1\":{\"71\":1,\"101\":1}}],[\"构造函数继承\",{\"1\":{\"158\":1}}],[\"构造函数的原型链上并没有m属性\",{\"1\":{\"138\":1}}],[\"构造函数\",{\"0\":{\"198\":1},\"1\":{\"68\":1,\"71\":2,\"165\":1}}],[\"共安装了4个包\",{\"1\":{\"195\":1}}],[\"共安装了7个包\",{\"1\":{\"190\":1}}],[\"共有五个执行上下文\",{\"1\":{\"143\":1}}],[\"下面是一个简单的开发环境webpack\",{\"1\":{\"237\":1}}],[\"下的\",{\"1\":{\"232\":1}}],[\"下载\",{\"1\":{\"234\":2,\"235\":5,\"236\":2,\"237\":6,\"255\":2,\"262\":1}}],[\"下载安装webpack\",{\"1\":{\"231\":1}}],[\"下载构建工具\",{\"0\":{\"190\":1}}],[\"下边以webpack为例介绍一下如何结合构建工具使用ts\",{\"1\":{\"188\":1}}],[\"下一篇\",{\"1\":{\"170\":1}}],[\"高级\",{\"1\":{\"186\":1}}],[\"高维护性\",{\"1\":{\"80\":1}}],[\"检查对象类型\",{\"1\":{\"206\":1}}],[\"检查不可达代码\",{\"1\":{\"186\":1}}],[\"检查未使用的参数\",{\"1\":{\"186\":1}}],[\"检查未使用的局部变量\",{\"1\":{\"186\":1}}],[\"检查函数没有隐式的返回值\",{\"1\":{\"186\":1}}],[\"检查switch语句包含正确的break\",{\"1\":{\"186\":1}}],[\"检测一个数值是否为\",{\"1\":{\"78\":2}}],[\"检测一个数值是否为有限数\",{\"1\":{\"78\":2}}],[\"检测\",{\"1\":{\"70\":2}}],[\"检测集合中是否包含某个元素\",{\"1\":{\"69\":2}}],[\"额外检查\",{\"1\":{\"186\":1}}],[\"禁止类型不明确的this\",{\"1\":{\"186\":1}}],[\"禁止隐式的any类型\",{\"1\":{\"186\":1}}],[\"禁用\",{\"2\":{\"172\":1}}],[\"禁用了如下功能\",{\"1\":{\"170\":1}}],[\"总是以严格模式对代码进行编译\",{\"1\":{\"186\":1}}],[\"总结\",{\"1\":{\"135\":1}}],[\"严格的空值检查\",{\"1\":{\"186\":1}}],[\"严格检查属性是否初始化\",{\"1\":{\"186\":1}}],[\"严格检查函数的类型\",{\"1\":{\"186\":1}}],[\"严格检查bind\",{\"1\":{\"186\":1}}],[\"严格检查\",{\"1\":{\"186\":1}}],[\"严格区分变量类型与数据类型\",{\"1\":{\"116\":1}}],[\"宿主环境\",{\"1\":{\"186\":1}}],[\"列表中的文件都会被ts编译器所编译\",{\"1\":{\"185\":1}}],[\"示例\",{\"1\":{\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":7,\"197\":1,\"199\":1,\"200\":1,\"201\":1,\"203\":1,\"204\":1,\"206\":2}}],[\"断言有两种形式\",{\"1\":{\"178\":1}}],[\"断电\",{\"1\":{\"119\":1}}],[\"没啥用\",{\"1\":{\"178\":1}}],[\"没有输出\",{\"1\":{\"237\":1}}],[\"没有值\",{\"1\":{\"178\":2}}],[\"没有及时清理的定时器或回调函数\",{\"1\":{\"154\":1}}],[\"没有设置\",{\"1\":{\"36\":1}}],[\"枚举\",{\"1\":{\"178\":1}}],[\"固定长度数组\",{\"1\":{\"178\":1}}],[\"或者执行npm\",{\"1\":{\"194\":1}}],[\"或者是一个map集合\",{\"1\":{\"95\":1}}],[\"或undefined\",{\"1\":{\"178\":1}}],[\"限制变量的值就是该字面量的值\",{\"1\":{\"178\":1}}],[\"其中\",{\"1\":{\"237\":1}}],[\"其次这样设置也不能体现出参数和返回值是相同的类型\",{\"1\":{\"208\":1}}],[\"其本身\",{\"1\":{\"178\":1}}],[\"其他内容也不要显示\",{\"1\":{\"267\":1}}],[\"其他模块不会\",{\"1\":{\"247\":1}}],[\"其他模块\",{\"1\":{\"164\":1}}],[\"其他类型\",{\"1\":{\"129\":1}}],[\"其他项目都为1\",{\"1\":{\"21\":1,\"22\":1}}],[\"符合则赋值\",{\"1\":{\"178\":1}}],[\"页脚\",{\"1\":{\"170\":1}}],[\"页面信息\",{\"1\":{\"170\":1}}],[\"评论\",{\"1\":{\"170\":1}}],[\"链接\",{\"1\":{\"170\":1}}],[\"编译打包应用\",{\"0\":{\"232\":1}}],[\"编译后的js文件会和ts文件位于相同的目录\",{\"1\":{\"186\":1}}],[\"编译后文件的所在目录\",{\"1\":{\"186\":1}}],[\"编译文件时\",{\"1\":{\"180\":1}}],[\"编译选项是配置文件中非常重要也比较复杂的配置选项\",{\"1\":{\"186\":1}}],[\"编译选项\",{\"0\":{\"179\":1}}],[\"编译器\",{\"1\":{\"81\":1}}],[\"编辑此页链接\",{\"1\":{\"170\":1}}],[\"贡献者\",{\"1\":{\"170\":1}}],[\"侧边栏\",{\"1\":{\"170\":1}}],[\"本身能处理\",{\"1\":{\"232\":1}}],[\"本地安装\",{\"1\":{\"231\":1}}],[\"本地都安装webpack\",{\"1\":{\"231\":1}}],[\"本页面就是一个示例\",{\"1\":{\"170\":1}}],[\"本质上是0101二进制\",{\"1\":{\"118\":1}}],[\"计算\",{\"1\":{\"165\":1}}],[\"计算主轴是否有多余空间\",{\"1\":{\"23\":1}}],[\"向worker发送消息\",{\"1\":{\"165\":1}}],[\"向另一个线程发消息\",{\"1\":{\"165\":1}}],[\"向对象中添加方法\",{\"1\":{\"64\":1}}],[\"加载分线程执行的js文件\",{\"1\":{\"165\":1}}],[\"请求响应模型\",{\"1\":{\"164\":1}}],[\"请求地址\",{\"1\":{\"68\":1}}],[\"消息队列\",{\"1\":{\"164\":1}}],[\"消费\",{\"1\":{\"66\":1}}],[\"管理模块会将回调函数及其数据添加到回调队列中\",{\"1\":{\"164\":1}}],[\"处理兼容性问题\",{\"1\":{\"262\":1}}],[\"处理html中的img标签\",{\"1\":{\"235\":2,\"237\":1,\"244\":1,\"252\":1}}],[\"处理图片资源\",{\"1\":{\"235\":2,\"237\":1}}],[\"处理回调逻辑\",{\"1\":{\"164\":1}}],[\"处理响应结果\",{\"1\":{\"68\":2}}],[\"绑定\",{\"1\":{\"247\":1}}],[\"绑定监听\",{\"1\":{\"163\":1}}],[\"绑定事件\",{\"1\":{\"68\":2}}],[\"回调队列\",{\"1\":{\"164\":1}}],[\"回调执行代码\",{\"1\":{\"164\":1}}],[\"回调代码\",{\"1\":{\"163\":1,\"164\":1}}],[\"回调地狱\",{\"1\":{\"67\":1}}],[\"否则报错\",{\"1\":{\"178\":1}}],[\"否则会带来复杂的同步问题\",{\"1\":{\"163\":1}}],[\"否则进入\",{\"1\":{\"146\":2}}],[\"网络请求模块\",{\"1\":{\"161\":1}}],[\"网络操作\",{\"1\":{\"67\":1}}],[\"事件驱动模型\",{\"1\":{\"164\":1}}],[\"事件轮询\",{\"1\":{\"164\":1}}],[\"事件队列\",{\"1\":{\"164\":1}}],[\"事件管理模块\",{\"1\":{\"164\":1}}],[\"事件循环模型\",{\"1\":{\"162\":1}}],[\"事件相应模块\",{\"1\":{\"161\":1}}],[\"事件绑定\",{\"1\":{\"87\":1}}],[\"效果的绘制\",{\"1\":{\"161\":1}}],[\"效率低\",{\"1\":{\"160\":1}}],[\"渲染模块\",{\"1\":{\"161\":1}}],[\"布局与功能禁用\",{\"0\":{\"170\":1}}],[\"布局和\",{\"1\":{\"161\":1}}],[\"布尔值true或false\",{\"1\":{\"178\":1}}],[\"布尔值\",{\"1\":{\"115\":1}}],[\"搜狗等国内浏览器\",{\"1\":{\"161\":1}}],[\"支持浏览器运行的最核心的程序\",{\"1\":{\"161\":1}}],[\"支持反向断言\",{\"1\":{\"92\":1}}],[\"老板ie\",{\"1\":{\"160\":1}}],[\"单个loader用loader\",{\"1\":{\"265\":1}}],[\"单入口\",{\"1\":{\"263\":1}}],[\"单进程\",{\"1\":{\"160\":1}}],[\"单线程\",{\"1\":{\"160\":2}}],[\"浏览器空闲了\",{\"1\":{\"261\":1}}],[\"浏览器的事件循环模型\",{\"0\":{\"164\":1}}],[\"浏览器内核\",{\"0\":{\"161\":1},\"1\":{\"164\":1}}],[\"浏览器运行是单进程还是多进程\",{\"1\":{\"160\":1}}],[\"浏览器运行是单线程还是多线程\",{\"1\":{\"160\":1}}],[\"浏览器根据这个属性\",{\"1\":{\"23\":1}}],[\"简写路径\",{\"1\":{\"266\":1}}],[\"简而言之\",{\"1\":{\"178\":1}}],[\"简单易懂\",{\"1\":{\"160\":1}}],[\"简化异步函数的写法\",{\"1\":{\"87\":1}}],[\"简化对象写法\",{\"0\":{\"57\":1}}],[\"顺序编程\",{\"1\":{\"160\":1}}],[\"死锁与状态同步问题\",{\"1\":{\"160\":1}}],[\"死亡\",{\"1\":{\"153\":1}}],[\"同一个\",{\"1\":{\"268\":1}}],[\"同一个callback队列\",{\"1\":{\"164\":3}}],[\"同一时间加载多个文件\",{\"1\":{\"261\":1}}],[\"同时使用的名称也需要改变\",{\"1\":{\"256\":1}}],[\"同时\",{\"1\":{\"206\":1}}],[\"同时也可以直接将属性定义在构造函数中\",{\"1\":{\"198\":1}}],[\"同时可以在配置选项的targets中指定要兼容的浏览器版本\",{\"1\":{\"195\":1}}],[\"同时有多个线程运行\",{\"1\":{\"160\":1}}],[\"同步代码\",{\"1\":{\"164\":1}}],[\"同名方法\",{\"1\":{\"64\":1}}],[\"何为多进程\",{\"1\":{\"160\":1}}],[\"主要考虑以下几个方面\",{\"1\":{\"232\":1}}],[\"主要有以下几个命令\",{\"1\":{\"34\":1}}],[\"主线程\",{\"1\":{\"160\":1}}],[\"应用程序必须运行在某个进程的某个线程上\",{\"1\":{\"160\":1}}],[\"线程间切换开销\",{\"1\":{\"160\":1}}],[\"线程池\",{\"1\":{\"160\":1}}],[\"线程\",{\"1\":{\"160\":1}}],[\"线程机制与事件机制\",{\"0\":{\"159\":1}}],[\"程序中可以根据类创建指定类型的对象\",{\"1\":{\"196\":1}}],[\"程序的一次执行\",{\"1\":{\"160\":1}}],[\"程序员可以直接操作显式原型\",{\"1\":{\"135\":1}}],[\"进入项目根目录\",{\"1\":{\"189\":1}}],[\"进程2个\",{\"1\":{\"254\":1}}],[\"进程通信也有开销\",{\"1\":{\"254\":1}}],[\"进程启动大概为600ms\",{\"1\":{\"254\":1}}],[\"进程启动后自动创建\",{\"1\":{\"160\":1}}],[\"进程\",{\"1\":{\"160\":1}}],[\"进程与线程\",{\"0\":{\"160\":1}}],[\"进行遍历\",{\"1\":{\"69\":1,\"70\":1}}],[\"得到属性\",{\"1\":{\"158\":1}}],[\"得到使用权\",{\"1\":{\"122\":1}}],[\"给子类型原型添加方法\",{\"1\":{\"158\":1}}],[\"给父类型的原型添加方法\",{\"1\":{\"158\":1}}],[\"给原型对象添加属性\",{\"1\":{\"134\":1}}],[\"适用场景\",{\"1\":{\"157\":2}}],[\"工厂模式\",{\"1\":{\"157\":1}}],[\"工作原理\",{\"1\":{\"66\":1}}],[\"起始时不确定对象内部数据\",{\"1\":{\"157\":1}}],[\"起点的y位置\",{\"1\":{\"31\":1}}],[\"起点的x位置\",{\"1\":{\"31\":1}}],[\"套路\",{\"1\":{\"157\":3}}],[\"意外的全局变量\",{\"1\":{\"154\":1}}],[\"占用的内存没有及时释放\",{\"1\":{\"154\":1}}],[\"占用内存时间会变长\",{\"1\":{\"154\":1}}],[\"及时释放\",{\"1\":{\"154\":1}}],[\"能让代码优化上线运行的环境\",{\"1\":{\"230\":1}}],[\"能让代码本地调试运行的环境\",{\"1\":{\"230\":1}}],[\"能够去处理那些非\",{\"1\":{\"228\":1}}],[\"能够将新的es规范语法转换成es5的语法\",{\"1\":{\"81\":1}}],[\"能有效提升cpu的使用率\",{\"1\":{\"160\":1}}],[\"能不用闭包就不用\",{\"1\":{\"154\":1}}],[\"容易造成内存泄漏\",{\"1\":{\"154\":1}}],[\"缺点\",{\"1\":{\"154\":1,\"160\":2,\"235\":1,\"266\":1}}],[\"读写\",{\"1\":{\"152\":1}}],[\"读取属性的方法叫做setter方法\",{\"1\":{\"200\":1}}],[\"读取对象的属性值时\",{\"1\":{\"137\":1}}],[\"读取\",{\"1\":{\"87\":1}}],[\"读取失败\",{\"1\":{\"68\":2}}],[\"读取文件\",{\"1\":{\"68\":1}}],[\"让某个文件单独打包成一个chunk\",{\"1\":{\"260\":1}}],[\"让代码上线\",{\"1\":{\"258\":1}}],[\"让第二次打包构建速度变快\",{\"1\":{\"253\":1}}],[\"让hmr功能代码生效\",{\"1\":{\"247\":1}}],[\"让\",{\"1\":{\"228\":1}}],[\"让子类型的原型constructor指向子类型\",{\"1\":{\"158\":1}}],[\"让函数外部可以操作\",{\"1\":{\"152\":1}}],[\"让对象成为垃圾对象\",{\"1\":{\"116\":1}}],[\"仍然存活在能存中\",{\"1\":{\"152\":1}}],[\"常见的内存泄漏\",{\"1\":{\"154\":1}}],[\"常见的闭包\",{\"0\":{\"151\":1}}],[\"常见的回调函数\",{\"1\":{\"129\":1}}],[\"父类型\",{\"1\":{\"158\":1}}],[\"父类方法可以重写\",{\"1\":{\"71\":1}}],[\"父\",{\"1\":{\"150\":1}}],[\"嵌套外部\",{\"1\":{\"150\":1}}],[\"子\",{\"1\":{\"150\":1}}],[\"子类中不能修改\",{\"1\":{\"199\":1}}],[\"子类中可以修改\",{\"1\":{\"199\":2}}],[\"子类中修改\",{\"1\":{\"199\":1}}],[\"子类和对象中修改\",{\"1\":{\"199\":1}}],[\"子类继承父类时\",{\"1\":{\"198\":1}}],[\"子类型的原型为父类型的一个实例对象\",{\"1\":{\"158\":1}}],[\"子类型的原型指向父类型的一个实例对象\",{\"1\":{\"158\":1}}],[\"子类型\",{\"1\":{\"158\":1}}],[\"子类无法调用父类同名方法\",{\"1\":{\"71\":1}}],[\"子类对父类方法重写\",{\"1\":{\"71\":1}}],[\"子类\",{\"1\":{\"71\":1}}],[\"闭包面试题\",{\"0\":{\"155\":1}}],[\"闭包的缺点及解决\",{\"0\":{\"154\":1}}],[\"闭包的生命周期\",{\"0\":{\"153\":1}}],[\"闭包的作用\",{\"0\":{\"152\":1}}],[\"闭包存在于嵌套的内部函数中\",{\"1\":{\"150\":1}}],[\"闭包到底是什么\",{\"1\":{\"150\":1}}],[\"闭包\",{\"0\":{\"148\":1},\"1\":{\"149\":1,\"154\":1}}],[\"查找一个变量的查找规则\",{\"1\":{\"146\":1}}],[\"查找变量时就是沿着作用域链来查找的\",{\"1\":{\"146\":1}}],[\"查找对象的属性\",{\"1\":{\"136\":1}}],[\"联系\",{\"1\":{\"145\":1}}],[\"且不得操作dom\",{\"1\":{\"165\":1}}],[\"且不再变化\",{\"1\":{\"145\":1}}],[\"且值为null\",{\"1\":{\"116\":1}}],[\"区别二\",{\"1\":{\"145\":1}}],[\"区别一\",{\"1\":{\"145\":1}}],[\"隔离变量\",{\"1\":{\"144\":1}}],[\"他是静态的\",{\"1\":{\"144\":1}}],[\"先\",{\"1\":{\"244\":1,\"252\":1}}],[\"先执行初始化代码\",{\"1\":{\"163\":1}}],[\"先执行变量提升\",{\"1\":{\"143\":1}}],[\"先创建\",{\"1\":{\"157\":1}}],[\"先在自身的属性中查找\",{\"1\":{\"136\":1}}],[\"依次输出\",{\"1\":{\"143\":1}}],[\"出栈\",{\"1\":{\"142\":1}}],[\"出错了\",{\"1\":{\"105\":1}}],[\"出错啦\",{\"1\":{\"87\":1}}],[\"压缩css文件\",{\"1\":{\"244\":2}}],[\"压缩css\",{\"1\":{\"240\":1}}],[\"压缩\",{\"0\":{\"240\":1,\"243\":1,\"244\":1}}],[\"压缩优化\",{\"1\":{\"26\":1}}],[\"压栈\",{\"1\":{\"142\":2}}],[\"确定后\",{\"1\":{\"142\":1}}],[\"准备执行函数体之前\",{\"1\":{\"141\":1}}],[\"赋值\",{\"1\":{\"141\":6}}],[\"赋值运算\",{\"1\":{\"118\":1}}],[\"面向对象\",{\"0\":{\"196\":1}}],[\"面向对象语法\",{\"1\":{\"51\":1}}],[\"面试题\",{\"0\":{\"147\":1},\"1\":{\"140\":1}}],[\"问题\",{\"1\":{\"140\":1,\"152\":1,\"157\":3,\"235\":1,\"242\":6,\"244\":2,\"258\":2,\"259\":1}}],[\"沿着隐式原型找到了重点object\",{\"1\":{\"138\":1}}],[\"又将构造函数的原型链给了一个新的指向\",{\"1\":{\"138\":1}}],[\"又称\",{\"1\":{\"14\":1}}],[\"此时chunk的名称是key\",{\"1\":{\"263\":1}}],[\"此时chunk的名称默认是main\",{\"1\":{\"263\":1}}],[\"此时泛型便能够发挥作用\",{\"1\":{\"208\":1}}],[\"此时有了新的n\",{\"1\":{\"138\":1}}],[\"此时\",{\"1\":{\"138\":1,\"178\":1}}],[\"此方法接收的是一个二维数组\",{\"1\":{\"95\":1}}],[\"因此f\",{\"1\":{\"138\":1}}],[\"因此是undefined\",{\"1\":{\"138\":1}}],[\"因此\",{\"1\":{\"138\":4}}],[\"因为css是在js中被引入的\",{\"1\":{\"258\":1}}],[\"因为只有一个\",{\"1\":{\"247\":1}}],[\"因为开发环境下使用的\",{\"1\":{\"247\":1}}],[\"因为url\",{\"1\":{\"235\":1}}],[\"因为不是所有的浏览器都支持最新的es规范\",{\"1\":{\"81\":1}}],[\"因为它们会在特定的场景下自动执行\",{\"1\":{\"65\":1}}],[\"因为它可以有很多的点\",{\"1\":{\"32\":1}}],[\"首先使用any会关闭ts的类型检查\",{\"1\":{\"208\":1}}],[\"首先便要拥有对象\",{\"1\":{\"196\":1}}],[\"首先\",{\"1\":{\"138\":1}}],[\"包含绑定dom事件监听\",{\"1\":{\"164\":1}}],[\"包含一些特别的代码\",{\"1\":{\"163\":1}}],[\"包含function\",{\"1\":{\"136\":1}}],[\"包括对象\",{\"1\":{\"70\":1}}],[\"隐藏源代码\",{\"1\":{\"249\":1}}],[\"隐藏实现\",{\"1\":{\"130\":1}}],[\"隐式原型链\",{\"1\":{\"136\":1}}],[\"别名\",{\"1\":{\"136\":1}}],[\"再次执行\",{\"1\":{\"146\":1}}],[\"再沿着\",{\"1\":{\"136\":1}}],[\"再过3s后控制台输出333\",{\"1\":{\"67\":1}}],[\"再过2s后控制台输出222\",{\"1\":{\"67\":1}}],[\"找到返回\",{\"1\":{\"136\":2}}],[\"访问一个对象的属性时\",{\"1\":{\"136\":1}}],[\"空值\",{\"1\":{\"178\":1}}],[\"空\",{\"1\":{\"157\":1}}],[\"空object对象的隐式原型指向了obejct\",{\"1\":{\"138\":1}}],[\"空object对象\",{\"1\":{\"135\":1}}],[\"空格等\",{\"1\":{\"128\":1}}],[\"显示原型与隐式原型\",{\"0\":{\"135\":1}}],[\"全部隐藏\",{\"1\":{\"249\":1}}],[\"全部js兼容性处理\",{\"1\":{\"242\":7,\"244\":2}}],[\"全局安装\",{\"1\":{\"231\":1}}],[\"全局上下文环境\",{\"1\":{\"145\":1}}],[\"全局作用域外\",{\"1\":{\"145\":1}}],[\"全局作用域\",{\"1\":{\"144\":1,\"145\":1}}],[\"全局执行上下文环境是在全局作用域确定之后\",{\"1\":{\"145\":1}}],[\"全局执行上下文\",{\"1\":{\"141\":1}}],[\"全局代码\",{\"1\":{\"141\":1}}],[\"全局变量\",{\"1\":{\"119\":1}}],[\"全称\",{\"1\":{\"130\":1}}],[\"生成一个serviceworker配置文件\",{\"1\":{\"262\":1}}],[\"生成一个\",{\"1\":{\"256\":1}}],[\"生成source\",{\"1\":{\"249\":1}}],[\"生成器函数实例二\",{\"1\":{\"67\":1}}],[\"生成器函数实例一\",{\"1\":{\"67\":1}}],[\"生成器函数参数的传递\",{\"1\":{\"67\":1}}],[\"生成器函数返回的结果是迭代器对象\",{\"1\":{\"67\":1}}],[\"生成器函数是\",{\"1\":{\"67\":1}}],[\"生成器\",{\"0\":{\"67\":1}}],[\"生产环境性能优化配置\",{\"0\":{\"250\":1}}],[\"生产环境可做的选择\",{\"1\":{\"249\":1}}],[\"生产环境下会自动压缩js代码\",{\"1\":{\"244\":1}}],[\"生产环境比开发环境多一个压缩\",{\"1\":{\"232\":1}}],[\"生产环境和开发环境将\",{\"1\":{\"232\":1}}],[\"生产环境\",{\"1\":{\"232\":1,\"249\":1}}],[\"生命周期回调\",{\"1\":{\"129\":1}}],[\"定时器\",{\"1\":{\"164\":1}}],[\"定时器的回调函数只有在运行栈中的全部执行完后才有可能执行\",{\"1\":{\"163\":1}}],[\"定时器的回调函数是在分线程执行的吗\",{\"1\":{\"162\":1}}],[\"定时器是如何实现的\",{\"1\":{\"162\":1}}],[\"定时器并不能保证真正定时执行\",{\"1\":{\"162\":1}}],[\"定时器真的是定时执行吗\",{\"1\":{\"162\":1}}],[\"定时器引发的思考\",{\"0\":{\"162\":1}}],[\"定时器模块\",{\"1\":{\"161\":1}}],[\"定时器回调函数\",{\"1\":{\"129\":1}}],[\"定义nodejs环境变量\",{\"1\":{\"244\":1}}],[\"定义一个函数或类时\",{\"1\":{\"208\":1}}],[\"定义类\",{\"0\":{\"197\":1}}],[\"定义被继承的配置文件\",{\"1\":{\"184\":1}}],[\"定义需要排除在外的目录\",{\"1\":{\"183\":1}}],[\"定义希望被编译文件所在的目录\",{\"1\":{\"182\":1}}],[\"定义子类型构造函数\",{\"1\":{\"158\":1}}],[\"定义子类型的构造函数\",{\"1\":{\"158\":1}}],[\"定义父类型构造函数\",{\"1\":{\"158\":2}}],[\"定义静态方法和属性\",{\"1\":{\"71\":1}}],[\"定义构造函数初始化\",{\"1\":{\"71\":1}}],[\"定义\",{\"1\":{\"63\":2}}],[\"定义函数\",{\"1\":{\"58\":1}}],[\"定义字符串\",{\"1\":{\"56\":1}}],[\"某个条件下\",{\"1\":{\"129\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"170\":1}}],[\"你没有调用\",{\"1\":{\"129\":1}}],[\"你定义的\",{\"1\":{\"129\":1}}],[\"你也可以用多边形创建一个矩形\",{\"1\":{\"33\":1}}],[\"临时让test成为obj的方法进行调用\",{\"1\":{\"129\":1}}],[\"临时的\",{\"1\":{\"119\":1}}],[\"便于阅读交流\",{\"1\":{\"129\":1}}],[\"实际通过调用setter方法修改name属性\",{\"1\":{\"200\":1}}],[\"实际通过调用getter方法读取name属性\",{\"1\":{\"200\":1}}],[\"实际开发中我们都需要使用构建工具对代码进行打包\",{\"1\":{\"188\":1}}],[\"实现\",{\"1\":{\"206\":1,\"232\":3,\"247\":1}}],[\"实现接口时类中要保护接口中的所有属性\",{\"1\":{\"206\":1}}],[\"实现线程对象的反复利用\",{\"1\":{\"160\":1}}],[\"实现特定功能的n条语句的封装体\",{\"1\":{\"129\":1}}],[\"实参列表\",{\"1\":{\"141\":1}}],[\"实参\",{\"1\":{\"141\":1}}],[\"实例对象b默认的隐式原型指向源构造函数的显式原型\",{\"1\":{\"138\":1}}],[\"实例对象和函数对象的属性是不相通的\",{\"1\":{\"71\":1}}],[\"实例化对象\",{\"1\":{\"71\":2}}],[\"实例化\",{\"1\":{\"68\":1,\"101\":1}}],[\"组合式继承\",{\"1\":{\"158\":1}}],[\"组成\",{\"1\":{\"126\":1}}],[\"组织改名为\",{\"1\":{\"48\":1}}],[\"垃圾回收器回收\",{\"1\":{\"122\":1}}],[\"垃圾回调器回调\",{\"1\":{\"119\":1}}],[\"成单独文件\",{\"0\":{\"238\":1}}],[\"成为垃圾对象==\",{\"1\":{\"122\":1}}],[\"成功的值\",{\"1\":{\"87\":2}}],[\"成功啦\",{\"1\":{\"87\":3}}],[\"成功\",{\"1\":{\"68\":6,\"87\":1}}],[\"局部代码\",{\"1\":{\"141\":1}}],[\"局部对象\",{\"1\":{\"122\":1}}],[\"局部变量\",{\"1\":{\"119\":1}}],[\"释放小内存空间\",{\"1\":{\"122\":1}}],[\"释放内存\",{\"1\":{\"119\":1,\"122\":1}}],[\"理解闭包\",{\"0\":{\"150\":1}}],[\"理解\",{\"1\":{\"130\":1,\"144\":1}}],[\"理解二\",{\"1\":{\"122\":1}}],[\"理解一\",{\"1\":{\"122\":1}}],[\"地址值\",{\"1\":{\"122\":2}}],[\"地址数据\",{\"1\":{\"119\":1}}],[\"堆\",{\"1\":{\"119\":1}}],[\"堆空间的垃圾对象\",{\"1\":{\"119\":1}}],[\"栈中只剩下window\",{\"1\":{\"142\":1}}],[\"栈\",{\"1\":{\"119\":1}}],[\"栈空间的局部变量\",{\"1\":{\"119\":1}}],[\"清空内存中的数据\",{\"1\":{\"119\":1}}],[\"清空集合\",{\"1\":{\"69\":2,\"70\":2}}],[\"产生\",{\"1\":{\"153\":1}}],[\"产生闭包的条件\",{\"1\":{\"150\":1}}],[\"产生一定容量的存储空间\",{\"1\":{\"119\":1}}],[\"产生和死亡\",{\"1\":{\"119\":1}}],[\"集成电路板\",{\"1\":{\"119\":1}}],[\"集合的属性和方法\",{\"1\":{\"69\":1}}],[\"集合实现了\",{\"1\":{\"69\":1}}],[\"集合\",{\"1\":{\"69\":1}}],[\"逻辑运算\",{\"1\":{\"118\":1}}],[\"算术运算\",{\"1\":{\"118\":1}}],[\"什么函数才是回调函数\",{\"1\":{\"129\":1}}],[\"什么是函数\",{\"1\":{\"129\":1}}],[\"什么是对象\",{\"0\":{\"124\":1}}],[\"什么是变量\",{\"0\":{\"120\":1}}],[\"什么是内存\",{\"0\":{\"119\":1}}],[\"什么是数据\",{\"0\":{\"118\":1}}],[\"什么时候必须使用\",{\"0\":{\"128\":1}}],[\"什么时候给对象赋值为null\",{\"1\":{\"116\":1}}],[\"什么时候使用时候导入\",{\"1\":{\"104\":1}}],[\"被垃圾回收器回收\",{\"1\":{\"116\":1}}],[\"表达式\",{\"1\":{\"129\":1}}],[\"表明将要赋值为对象\",{\"1\":{\"116\":1}}],[\"表示优先执行\",{\"1\":{\"244\":1,\"252\":1}}],[\"表示任意文件\",{\"1\":{\"182\":1}}],[\"表示任意目录\",{\"1\":{\"182\":1}}],[\"表示除换行符之外的任意单个字符\",{\"1\":{\"93\":1}}],[\"表示\",{\"1\":{\"74\":1}}],[\"表示的最小精度\",{\"1\":{\"73\":1,\"78\":2}}],[\"表示该对象用于\",{\"1\":{\"65\":1}}],[\"表示独一无二的值\",{\"1\":{\"63\":1}}],[\"表示继承父元素的align\",{\"1\":{\"25\":1}}],[\"初始赋值\",{\"1\":{\"116\":1}}],[\"初始化配置\",{\"0\":{\"231\":1}}],[\"初始化执行代码\",{\"1\":{\"164\":1}}],[\"初始化代码\",{\"1\":{\"163\":1,\"164\":1}}],[\"初始化项目\",{\"0\":{\"189\":1},\"1\":{\"81\":1}}],[\"初始化\",{\"1\":{\"68\":3,\"87\":1,\"231\":1}}],[\"内联会让代码体积变大\",{\"1\":{\"249\":1}}],[\"内联速度快\",{\"1\":{\"249\":2}}],[\"内联构建速度更快\",{\"1\":{\"249\":1}}],[\"内联没有\",{\"1\":{\"249\":1}}],[\"内联\",{\"1\":{\"249\":3}}],[\"内联到\",{\"1\":{\"232\":1}}],[\"内核由很多模块组成\",{\"1\":{\"161\":1}}],[\"内部默认实现了热模块替换功能\",{\"1\":{\"247\":1}}],[\"内部函数引用了外部函数的数据\",{\"1\":{\"150\":1}}],[\"内部存储的数据\",{\"1\":{\"119\":1}}],[\"内部数据有序\",{\"1\":{\"114\":1}}],[\"内存中\",{\"1\":{\"161\":1}}],[\"内存中所有操作的目标是\",{\"1\":{\"118\":1}}],[\"内存泄露积累多了就容易导致内存溢出\",{\"1\":{\"154\":1}}],[\"内存泄漏\",{\"1\":{\"154\":1}}],[\"内存溢出\",{\"1\":{\"154\":1}}],[\"内存生命周期\",{\"1\":{\"122\":1}}],[\"内存是用来存储数据的空间\",{\"1\":{\"121\":1}}],[\"内存\",{\"0\":{\"121\":1}}],[\"内存分类\",{\"1\":{\"119\":1}}],[\"内存地址值数据\",{\"1\":{\"119\":1}}],[\"内存不释放就不能复用\",{\"1\":{\"119\":1}}],[\"内存全部消失\",{\"1\":{\"119\":1}}],[\"内存条\",{\"1\":{\"119\":1}}],[\"内存条通电以后产生的可存储数据的空间\",{\"1\":{\"119\":1}}],[\"内置值\",{\"1\":{\"65\":1}}],[\"特殊用法\",{\"1\":{\"263\":1}}],[\"特别对象\",{\"1\":{\"114\":2}}],[\"特点\",{\"1\":{\"56\":1,\"63\":1,\"230\":1,\"237\":2}}],[\"引用数据类型\",{\"1\":{\"116\":1}}],[\"引用类型\",{\"1\":{\"114\":1}}],[\"引入bundle\",{\"1\":{\"81\":1}}],[\"引入o\",{\"1\":{\"80\":1}}],[\"引入n\",{\"1\":{\"80\":1}}],[\"引入和使用模块\",{\"1\":{\"80\":1}}],[\"引入m\",{\"1\":{\"80\":2}}],[\"引入了\",{\"1\":{\"71\":1}}],[\"引入了一种新的原始数据类型\",{\"1\":{\"63\":1}}],[\"引入的异步编程的新解决方案\",{\"1\":{\"68\":1}}],[\"引入\",{\"0\":{\"149\":1},\"1\":{\"60\":1,\"68\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":3,\"255\":1}}],[\"引入严格模式\",{\"1\":{\"51\":1}}],[\"引入正则\",{\"1\":{\"51\":1}}],[\"任务队列\",{\"1\":{\"164\":1}}],[\"任何函数本质上都是通过某个对象来调用的\",{\"1\":{\"131\":1}}],[\"任何数据结构只要部署\",{\"1\":{\"66\":1}}],[\"任意位置访问\",{\"1\":{\"207\":2}}],[\"任意js数组\",{\"1\":{\"178\":1}}],[\"任意的js对象\",{\"1\":{\"178\":1}}],[\"任意类型\",{\"1\":{\"178\":1}}],[\"任意数字\",{\"1\":{\"178\":1}}],[\"任意数值\",{\"1\":{\"114\":1}}],[\"任意对象\",{\"1\":{\"114\":1}}],[\"任意字符串\",{\"1\":{\"114\":1,\"178\":1}}],[\"分割的chunk组\",{\"1\":{\"268\":1}}],[\"分割的chunk最小为30kb\",{\"1\":{\"268\":1}}],[\"分析构建内部依赖图\",{\"1\":{\"226\":1}}],[\"分线程worker\",{\"1\":{\"165\":1}}],[\"分配小内存空间\",{\"1\":{\"122\":1}}],[\"分配内存\",{\"1\":{\"119\":1}}],[\"分类\",{\"0\":{\"114\":1},\"1\":{\"144\":1}}],[\"分别是\",{\"1\":{\"195\":1}}],[\"分别输出对应按钮的索引\",{\"1\":{\"149\":1}}],[\"分别暴露\",{\"1\":{\"80\":1}}],[\"分别用前缀\",{\"1\":{\"74\":1}}],[\"基础总结\",{\"0\":{\"112\":1}}],[\"基本启动信息外\",{\"1\":{\"267\":1}}],[\"基本js兼容性处理\",{\"1\":{\"242\":4,\"244\":1}}],[\"基本\",{\"1\":{\"122\":1}}],[\"基本类型\",{\"1\":{\"116\":2}}],[\"基本数据类型\",{\"1\":{\"114\":1}}],[\"基本上\",{\"1\":{\"71\":1}}],[\"基本使用\",{\"1\":{\"68\":1,\"69\":1,\"80\":1}}],[\"基本形状路径转换原理\",{\"0\":{\"35\":1}}],[\"基本形状转换为path路径\",{\"1\":{\"26\":1}}],[\"始终指向全局对象window\",{\"1\":{\"106\":1}}],[\"普通整型转大整型\",{\"1\":{\"105\":1}}],[\"更改入口文件配置\",{\"1\":{\"260\":1}}],[\"更新时间\",{\"1\":{\"170\":1}}],[\"更新ui\",{\"1\":{\"165\":1}}],[\"更大的整数\",{\"1\":{\"105\":1}}],[\"更像面向对象编程的语法而已\",{\"1\":{\"71\":1}}],[\"私有属性的访问\",{\"1\":{\"101\":1}}],[\"私有属性\",{\"1\":{\"101\":1,\"207\":2}}],[\"私有属性外部不可访问直接\",{\"1\":{\"101\":1}}],[\"公有属性的访问\",{\"1\":{\"101\":1}}],[\"公有属性\",{\"1\":{\"101\":1}}],[\"存在于闭包中的变量才存在\",{\"1\":{\"152\":1}}],[\"存储数据\",{\"1\":{\"122\":1}}],[\"存储各种数据\",{\"1\":{\"119\":1}}],[\"存储在内存中代表特定信息的东东\",{\"1\":{\"118\":1}}],[\"存到对象\",{\"1\":{\"93\":1}}],[\"存入数组\",{\"1\":{\"68\":1}}],[\"元素\",{\"1\":{\"178\":1}}],[\"元素值\",{\"1\":{\"84\":1}}],[\"元字符\",{\"1\":{\"93\":1}}],[\"改变这种行为\",{\"1\":{\"93\":1}}],[\"匹配那些文件\",{\"1\":{\"233\":1}}],[\"匹配除回车外的任何单字符\",{\"1\":{\"93\":1}}],[\"匹配到的字符串\",{\"1\":{\"91\":2}}],[\"正常加载可以认为是并行加载\",{\"1\":{\"261\":1}}],[\"正常来讲\",{\"1\":{\"244\":1,\"252\":1}}],[\"正则\",{\"1\":{\"100\":1}}],[\"正则表达式中点\",{\"1\":{\"93\":1}}],[\"正则扩展\",{\"0\":{\"91\":1,\"92\":1,\"93\":1},\"1\":{\"51\":1,\"91\":1,\"92\":1,\"93\":1}}],[\"正向断言\",{\"1\":{\"92\":1}}],[\"反向断言\",{\"0\":{\"92\":1},\"1\":{\"92\":2}}],[\"执行eslint\",{\"1\":{\"244\":1,\"252\":1}}],[\"执行命令\",{\"1\":{\"189\":1}}],[\"执行栈\",{\"1\":{\"164\":1}}],[\"执行初始化代码\",{\"1\":{\"164\":1}}],[\"执行上下文从属于所在的作用域\",{\"1\":{\"145\":1}}],[\"执行上下文是动态的\",{\"1\":{\"145\":1}}],[\"执行上下文面试题\",{\"0\":{\"143\":1}}],[\"执行上下文栈\",{\"0\":{\"142\":1}}],[\"执行上下文\",{\"0\":{\"141\":1}}],[\"执行上下文与执行上下文栈\",{\"0\":{\"139\":1}}],[\"执行\",{\"1\":{\"91\":1}}],[\"执行一段代码\",{\"1\":{\"67\":1}}],[\"提前加载js文件\",{\"1\":{\"261\":1}}],[\"提高了打包的效率\",{\"1\":{\"256\":1}}],[\"提高代码复用\",{\"1\":{\"129\":1}}],[\"提取\",{\"0\":{\"238\":1},\"1\":{\"238\":1,\"239\":1,\"240\":1}}],[\"提取url和标签内文本\",{\"1\":{\"91\":1}}],[\"提供和jquery的映射关系\",{\"1\":{\"256\":1}}],[\"提供了二进制和八进制数值的新的写法\",{\"1\":{\"74\":1}}],[\"提供了更接近传统语言的写法\",{\"1\":{\"71\":1}}],[\"提供了\",{\"1\":{\"70\":1}}],[\"提供了新的数据结构\",{\"1\":{\"69\":1}}],[\"提供了rect\",{\"1\":{\"27\":1}}],[\"提供的一种异步编程解决方案\",{\"1\":{\"67\":1}}],[\"命名捕获分组\",{\"0\":{\"91\":1},\"1\":{\"91\":2}}],[\"命令如下\",{\"1\":{\"190\":1}}],[\"命令即可完成对整个项目的编译\",{\"1\":{\"181\":1}}],[\"命令行工具\",{\"1\":{\"81\":1}}],[\"命令用于输入其他模块提供的功能\",{\"1\":{\"80\":1}}],[\"命令用于规定模块的对外接口\",{\"1\":{\"80\":1}}],[\"胡说八道\",{\"1\":{\"90\":1}}],[\"猛龙摆尾\",{\"1\":{\"90\":1}}],[\"天雷破\",{\"1\":{\"90\":1}}],[\"天音波\",{\"1\":{\"90\":2}}],[\"金钟罩\",{\"1\":{\"90\":2}}],[\"像数组一样的\",{\"1\":{\"90\":1}}],[\"参考内容\",{\"1\":{\"88\":1}}],[\"参数和扩展运算符\",{\"1\":{\"90\":2}}],[\"参数与\",{\"0\":{\"90\":1},\"1\":{\"90\":2}}],[\"参数的逆运算\",{\"1\":{\"61\":1}}],[\"参数必须是最后一个形参\",{\"1\":{\"60\":1}}],[\"参数\",{\"1\":{\"60\":1,\"90\":1,\"178\":3,\"197\":2,\"208\":1,\"249\":1}}],[\"获取元素\",{\"1\":{\"104\":1}}],[\"获取多个promise执行的结果集\",{\"1\":{\"102\":2}}],[\"获取symbol的描述字符串\",{\"1\":{\"98\":2}}],[\"获取对象的entries\",{\"1\":{\"88\":1}}],[\"获取对象所有的值\",{\"1\":{\"88\":1}}],[\"获取对象所有的键\",{\"1\":{\"88\":1}}],[\"获取为学内容\",{\"1\":{\"87\":1}}],[\"男\",{\"1\":{\"88\":1}}],[\"訾博\",{\"1\":{\"88\":2,\"91\":1,\"95\":2,\"98\":1}}],[\"测试\",{\"1\":{\"87\":1}}],[\"结论\",{\"1\":{\"232\":1}}],[\"结束前赋值\",{\"1\":{\"116\":1}}],[\"结合发送ajax请求\",{\"1\":{\"87\":1}}],[\"结果是一个数组\",{\"1\":{\"91\":1}}],[\"结果\",{\"1\":{\"67\":1}}],[\"捕获处理\",{\"1\":{\"87\":1}}],[\"右侧的表达式一般为\",{\"1\":{\"87\":1}}],[\"右对齐\",{\"1\":{\"16\":1}}],[\"若返回的是promise对象\",{\"1\":{\"87\":1}}],[\"若报错\",{\"1\":{\"87\":1}}],[\"转base64的条件\",{\"1\":{\"235\":1,\"237\":1,\"244\":1,\"252\":1}}],[\"转化后的js目录\",{\"1\":{\"81\":1}}],[\"转换为\",{\"1\":{\"36\":1}}],[\"转换时推荐使用相对路径可减少代码量\",{\"1\":{\"34\":1}}],[\"安装依赖包\",{\"1\":{\"195\":1}}],[\"安装jquery\",{\"1\":{\"82\":1}}],[\"安装\",{\"1\":{\"81\":1}}],[\"安装工具babel\",{\"1\":{\"81\":1}}],[\"打包形成一个chunk\",{\"1\":{\"263\":1}}],[\"打包来源于同一个chunk\",{\"1\":{\"258\":1}}],[\"打包较满时\",{\"1\":{\"254\":1}}],[\"打包html\",{\"1\":{\"244\":1}}],[\"打包html资源\",{\"1\":{\"244\":1}}],[\"打包其他资源\",{\"0\":{\"236\":1},\"1\":{\"236\":1,\"237\":2}}],[\"打包图片资源\",{\"0\":{\"235\":1}}],[\"打包样式资源\",{\"0\":{\"233\":1}}],[\"打包后会在目录下生成\",{\"1\":{\"256\":1}}],[\"打包后对资源的引入\",{\"1\":{\"235\":1,\"237\":2,\"244\":2,\"252\":2}}],[\"打包后输出到\",{\"1\":{\"232\":2}}],[\"打包后的资源\",{\"1\":{\"227\":1}}],[\"打包生成对应的静态资源\",{\"1\":{\"224\":1}}],[\"打包\",{\"0\":{\"234\":1},\"1\":{\"81\":1,\"237\":1,\"256\":1}}],[\"打包工具\",{\"1\":{\"81\":1}}],[\"打包成一个文件\",{\"1\":{\"81\":1}}],[\"打电话\",{\"1\":{\"71\":1}}],[\"步骤如下\",{\"1\":{\"188\":1}}],[\"步骤\",{\"1\":{\"81\":2}}],[\"统一管理多个数据\",{\"1\":{\"125\":1}}],[\"统一暴露\",{\"1\":{\"80\":1}}],[\"统一导出模块\",{\"1\":{\"80\":1}}],[\"逐个导出\",{\"1\":{\"80\":1}}],[\"导航栏\",{\"1\":{\"170\":1}}],[\"导致无法实现\",{\"1\":{\"149\":1}}],[\"导出资源的源代码\",{\"1\":{\"232\":1}}],[\"导出一个资源的\",{\"1\":{\"232\":1}}],[\"导出\",{\"1\":{\"80\":3}}],[\"导出模块\",{\"1\":{\"80\":1}}],[\"导入模块\",{\"1\":{\"80\":1,\"87\":1}}],[\"之前通过使用\",{\"1\":{\"232\":4}}],[\"之前\",{\"1\":{\"232\":1}}],[\"之前学的object\",{\"1\":{\"95\":2}}],[\"之前的写法\",{\"1\":{\"91\":1,\"93\":1}}],[\"之前的模块化规范有\",{\"1\":{\"80\":1}}],[\"之间的弧和线段依次实现即可\",{\"1\":{\"36\":1}}],[\"防止命名冲突\",{\"1\":{\"80\":1}}],[\"然后将小文件组合起来\",{\"1\":{\"80\":1}}],[\"拆分成许多小的文件\",{\"1\":{\"80\":1}}],[\"深圳\",{\"1\":{\"79\":1}}],[\"北京\",{\"1\":{\"79\":1}}],[\"后\",{\"1\":{\"152\":1}}],[\"后面在某个时刻才会执行回调代码\",{\"1\":{\"163\":1}}],[\"后面是数字前面是么\",{\"1\":{\"92\":1}}],[\"后面的会覆盖前面的\",{\"1\":{\"79\":1}}],[\"后两个属性可选\",{\"1\":{\"24\":1}}],[\"唯一存在\",{\"1\":{\"79\":1}}],[\"跟他自己也如此\",{\"1\":{\"79\":1}}],[\"复用loader\",{\"1\":{\"244\":1}}],[\"复制\",{\"1\":{\"234\":1,\"255\":1,\"256\":1}}],[\"复制到目标对象\",{\"1\":{\"79\":2}}],[\"复杂解构\",{\"1\":{\"55\":1}}],[\"行为基本一致\",{\"1\":{\"79\":2}}],[\"比如样式文件\",{\"1\":{\"228\":1}}],[\"比如集合1和集合2求差集\",{\"1\":{\"69\":1}}],[\"比较单线程与多线程\",{\"1\":{\"160\":1}}],[\"比较两个值是否严格相等\",{\"1\":{\"79\":2}}],[\"新配置要想生效\",{\"1\":{\"247\":1}}],[\"新版ie\",{\"1\":{\"160\":1}}],[\"新创建的对象\",{\"1\":{\"131\":1}}],[\"新增了一些\",{\"1\":{\"79\":1}}],[\"新的\",{\"1\":{\"71\":1}}],[\"负责ajax\",{\"1\":{\"161\":1}}],[\"负责事件的管理\",{\"1\":{\"161\":1}}],[\"负责定时器的管理\",{\"1\":{\"161\":1}}],[\"负责页面的布局和\",{\"1\":{\"161\":1}}],[\"负责页面文本的解析\",{\"1\":{\"161\":1}}],[\"负责\",{\"1\":{\"161\":1}}],[\"负责js程序的编译与运行\",{\"1\":{\"161\":1}}],[\"负数\",{\"1\":{\"78\":2}}],[\"负值对该属性无效\",{\"1\":{\"22\":1}}],[\"例子\",{\"1\":{\"78\":1,\"79\":1,\"178\":1}}],[\"例如promise不能转换\",{\"1\":{\"242\":3,\"244\":1}}],[\"例如\",{\"1\":{\"34\":1,\"198\":2}}],[\"价格属性被修改了\",{\"1\":{\"71\":1}}],[\"价格属性被读取了\",{\"1\":{\"71\":1}}],[\"锤子\",{\"1\":{\"71\":1}}],[\"设置检查规则\",{\"1\":{\"241\":1}}],[\"设置nodejs\",{\"1\":{\"239\":1,\"240\":1}}],[\"设置泛型后即可在函数中使用t来表示该类型\",{\"1\":{\"210\":1}}],[\"设置属性的方法叫做getter方法\",{\"1\":{\"200\":1}}],[\"设置属性的方法\",{\"1\":{\"200\":1}}],[\"设置后相当于开启了所有的严格检查\",{\"1\":{\"186\":1}}],[\"设置后编译后的js文件将会生成到dist目录\",{\"1\":{\"186\":1}}],[\"设置outdir后可以改变编译后文件的位置\",{\"1\":{\"186\":1}}],[\"设置编译后代码使用的模块化系统\",{\"1\":{\"186\":1}}],[\"设置ts代码编译的目标版本\",{\"1\":{\"186\":1}}],[\"设置定时器\",{\"1\":{\"163\":1,\"164\":1}}],[\"设置对象的属性值时\",{\"1\":{\"137\":1}}],[\"设置值\",{\"1\":{\"88\":1}}],[\"设置子级构造函数的原型\",{\"1\":{\"71\":1}}],[\"设置p对象的状态为失败\",{\"1\":{\"68\":1}}],[\"智能手机\",{\"1\":{\"71\":1}}],[\"静态属性\",{\"0\":{\"201\":1},\"1\":{\"71\":1,\"197\":1,\"199\":1,\"201\":2}}],[\"黑色\",{\"1\":{\"71\":5}}],[\"报错private\",{\"1\":{\"101\":1}}],[\"报错\",{\"1\":{\"71\":1,\"143\":1}}],[\"华为\",{\"1\":{\"71\":2}}],[\"添加支持\",{\"1\":{\"247\":1}}],[\"添加配置文件后\",{\"1\":{\"181\":1}}],[\"添加执行上下文的方法\",{\"1\":{\"141\":1}}],[\"添加执行上下文的属性\",{\"1\":{\"141\":1}}],[\"添加为执行上下文的属性\",{\"1\":{\"141\":2}}],[\"添加window的方法\",{\"1\":{\"141\":1}}],[\"添加window的属性\",{\"1\":{\"141\":1}}],[\"添加方法\",{\"1\":{\"71\":1}}],[\"添加标识的\",{\"1\":{\"63\":1}}],[\"手机\",{\"1\":{\"71\":4}}],[\"继承抽象类时抽象方法必须要实现\",{\"1\":{\"205\":1}}],[\"继承时面向对象中的又一个特性\",{\"1\":{\"203\":1}}],[\"继承\",{\"0\":{\"203\":1}}],[\"继承模式\",{\"0\":{\"158\":1}}],[\"继承父类\",{\"1\":{\"71\":1}}],[\"继续往后走\",{\"1\":{\"67\":1}}],[\"到vendors组的chunk中\",{\"1\":{\"268\":1}}],[\"到函数内部的数据\",{\"1\":{\"152\":1}}],[\"到\",{\"1\":{\"71\":1}}],[\"字面量\",{\"1\":{\"178\":2}}],[\"字\",{\"1\":{\"71\":1}}],[\"字符串中可以出现换行符\",{\"1\":{\"56\":1}}],[\"字符串扩展\",{\"1\":{\"51\":1}}],[\"字符串\",{\"1\":{\"51\":1,\"92\":1,\"115\":1}}],[\"类中同样可以使用泛型\",{\"1\":{\"215\":1}}],[\"类名\",{\"1\":{\"197\":1}}],[\"类型会由ts自动推断出来\",{\"1\":{\"212\":1}}],[\"类型断言\",{\"1\":{\"178\":1}}],[\"类型安全的any\",{\"1\":{\"178\":1}}],[\"类型\",{\"1\":{\"178\":7,\"197\":2}}],[\"类型声明给变量设置了类型\",{\"1\":{\"178\":1}}],[\"类型声明是ts非常重要的一个特点\",{\"1\":{\"178\":1}}],[\"类型声明\",{\"1\":{\"178\":1}}],[\"类的私有属性\",{\"0\":{\"101\":1},\"1\":{\"101\":1}}],[\"类继承\",{\"1\":{\"71\":1}}],[\"类\",{\"1\":{\"71\":1}}],[\"类似\",{\"1\":{\"60\":1}}],[\"丞相\",{\"1\":{\"70\":1}}],[\"皇帝\",{\"1\":{\"70\":3}}],[\"中设置\",{\"1\":{\"247\":1}}],[\"中\",{\"1\":{\"230\":2,\"232\":1,\"249\":1}}],[\"中为对象提供了像\",{\"1\":{\"90\":1}}],[\"中为对象提供了\",{\"1\":{\"90\":1}}],[\"中只针对于数组\",{\"1\":{\"90\":2}}],[\"中已经引入\",{\"1\":{\"90\":2}}],[\"中引入指数运算符\",{\"1\":{\"85\":1}}],[\"中是否包含某个元素\",{\"1\":{\"70\":2}}],[\"中文名称为欧洲计算机制\",{\"1\":{\"48\":1}}],[\"型的值\",{\"1\":{\"70\":1}}],[\"各种类\",{\"1\":{\"70\":1}}],[\"键\",{\"1\":{\"70\":1}}],[\"差集\",{\"1\":{\"69\":1}}],[\"差别就是polygon多边形会闭合\",{\"1\":{\"39\":1}}],[\"为true\",{\"1\":{\"247\":1}}],[\"为\",{\"1\":{\"247\":1}}],[\"为入口文件开始打包\",{\"1\":{\"232\":2}}],[\"为了隐藏源代码\",{\"1\":{\"249\":2}}],[\"为了提取成单独的css文件\",{\"1\":{\"244\":1}}],[\"为了确保数据的安全性\",{\"1\":{\"199\":1}}],[\"为了能看到夫类型的方法\",{\"1\":{\"158\":1}}],[\"为全局变量\",{\"1\":{\"149\":1}}],[\"为undefined\",{\"1\":{\"138\":1}}],[\"为什么js要用单线程模式\",{\"1\":{\"163\":1}}],[\"为什么用函数\",{\"1\":{\"129\":1}}],[\"为什么要用对象\",{\"0\":{\"125\":1}}],[\"为扩展运算符\",{\"1\":{\"69\":1}}],[\"为各种不同的数据结构提供统一的访问机制\",{\"1\":{\"66\":1}}],[\"交集\",{\"1\":{\"69\":1}}],[\"交叉轴的中点对齐\",{\"1\":{\"17\":1}}],[\"交叉轴的终点对齐\",{\"1\":{\"17\":1}}],[\"交叉轴的起点对齐\",{\"1\":{\"17\":1,\"18\":1}}],[\"二者区别\",{\"1\":{\"129\":1}}],[\"二维数组\",{\"1\":{\"95\":1}}],[\"二进制和八进制\",{\"0\":{\"74\":1},\"1\":{\"78\":2}}],[\"二姐\",{\"1\":{\"69\":1}}],[\"二哥\",{\"1\":{\"69\":1,\"70\":1}}],[\"自己写的代码\",{\"1\":{\"241\":1}}],[\"自己测试\",{\"1\":{\"90\":1}}],[\"自身只理解\",{\"1\":{\"228\":1}}],[\"自定义构造函数\",{\"1\":{\"157\":1}}],[\"自定义构造函数模式\",{\"1\":{\"157\":1}}],[\"自定义遍历对象\",{\"1\":{\"66\":1}}],[\"自动分析多入口chunk中\",{\"1\":{\"260\":1}}],[\"自动修复eslint\",{\"1\":{\"241\":1}}],[\"自动刷新浏览器\",{\"1\":{\"237\":2}}],[\"自动打开浏览器\",{\"1\":{\"237\":4,\"267\":1}}],[\"自动化编译\",{\"1\":{\"237\":2}}],[\"自动引入打包输出的所有资源\",{\"1\":{\"234\":2,\"255\":2,\"256\":2}}],[\"自动编译整个项目\",{\"0\":{\"181\":1}}],[\"自动编译文件\",{\"0\":{\"180\":1}}],[\"自动类型判断\",{\"1\":{\"178\":1}}],[\"自动释放\",{\"1\":{\"119\":1}}],[\"自动去重\",{\"1\":{\"69\":1}}],[\"四哥\",{\"1\":{\"69\":1}}],[\"三哥\",{\"1\":{\"69\":3}}],[\"大部分配置都在注释中给出解释\",{\"1\":{\"237\":1}}],[\"大家好\",{\"1\":{\"206\":1}}],[\"大计算量的代码交由web\",{\"1\":{\"165\":1}}],[\"大整型\",{\"1\":{\"105\":1}}],[\"大姐\",{\"1\":{\"69\":1}}],[\"大哥\",{\"1\":{\"69\":1,\"70\":1}}],[\"大写主要表示绝对定位\",{\"1\":{\"34\":1}}],[\"增加一个新元素\",{\"1\":{\"69\":2,\"70\":2}}],[\"返回顶部按钮\",{\"1\":{\"170\":1}}],[\"返回undefined\",{\"1\":{\"136\":1}}],[\"返回指定对象所有自身属性的描述对象\",{\"1\":{\"88\":2}}],[\"返回一个给定对象自身可遍历属性\",{\"1\":{\"88\":1}}],[\"返回一个给定对象的所有可枚举属性值的数组\",{\"1\":{\"88\":1}}],[\"返回的是可迭代对象\",{\"1\":{\"100\":1}}],[\"返回的是\",{\"1\":{\"87\":2}}],[\"返回的结果是一个promise对象\",{\"1\":{\"87\":1}}],[\"返回普通数据\",{\"1\":{\"87\":1}}],[\"返回布尔类型值\",{\"1\":{\"84\":1}}],[\"返回整数部分\",{\"1\":{\"77\":1}}],[\"返回值\",{\"1\":{\"71\":2,\"208\":1}}],[\"返回键名对象的键值\",{\"1\":{\"70\":2}}],[\"返回当前\",{\"1\":{\"70\":2}}],[\"返回当前集合\",{\"1\":{\"69\":2}}],[\"返回\",{\"1\":{\"69\":6,\"70\":6}}],[\"返回集合的元素个数\",{\"1\":{\"69\":2}}],[\"返回该对象对应的原始类型值\",{\"1\":{\"65\":1}}],[\"返回该对象的默认遍历器\",{\"1\":{\"65\":1}}],[\"返回该方法的返回值\",{\"1\":{\"65\":2}}],[\"发生继承时\",{\"1\":{\"204\":1}}],[\"发生事件的dom元素\",{\"1\":{\"129\":1}}],[\"发送一个单独的文件并导出\",{\"1\":{\"232\":1}}],[\"发送ajax请求的代码\",{\"1\":{\"164\":1}}],[\"发送ajax请求\",{\"1\":{\"163\":1}}],[\"发送\",{\"1\":{\"68\":2,\"87\":1}}],[\"发现svg预定义的\",{\"1\":{\"26\":1}}],[\"判断对象的具体类型\",{\"1\":{\"115\":1}}],[\"判断\",{\"0\":{\"115\":1}}],[\"判断数组中是否包含某元素\",{\"1\":{\"84\":1}}],[\"判断一个数到底为正数\",{\"1\":{\"78\":2}}],[\"判断一个数是否为整数\",{\"1\":{\"78\":2}}],[\"判断响应状态码\",{\"1\":{\"68\":2}}],[\"判断状态\",{\"1\":{\"68\":2}}],[\"判断如果失败\",{\"1\":{\"68\":1}}],[\"判断是否为该对象的实例时\",{\"1\":{\"65\":1}}],[\"两种语法结合可以让异步代码看起来像同步代码一样\",{\"1\":{\"87\":1}}],[\"两个参数为函数\",{\"1\":{\"68\":1}}],[\"两端对齐\",{\"1\":{\"16\":1}}],[\"运行代码的目录\",{\"1\":{\"267\":1}}],[\"运行缓存更好使用\",{\"1\":{\"258\":1}}],[\"运行\",{\"1\":{\"256\":1}}],[\"运行项目的两个指令\",{\"1\":{\"237\":1}}],[\"运行函数\",{\"1\":{\"118\":1}}],[\"运行结果\",{\"1\":{\"68\":1}}],[\"运算符\",{\"1\":{\"65\":1}}],[\"失败啦\",{\"1\":{\"87\":1,\"102\":1}}],[\"失败啦~\",{\"1\":{\"68\":1}}],[\"失败了\",{\"1\":{\"68\":1,\"87\":1}}],[\"失败\",{\"1\":{\"68\":5,\"87\":1}}],[\"并且配置资源体积限制实现\",{\"1\":{\"232\":1}}],[\"并且区分大小写\",{\"1\":{\"34\":1}}],[\"并在并命令行执行npm\",{\"1\":{\"194\":1}}],[\"并在文件发生变化时对文件进行重新编译\",{\"1\":{\"180\":1}}],[\"并绑定点击事件\",{\"1\":{\"149\":1}}],[\"并不建议这么做\",{\"1\":{\"79\":1}}],[\"并集\",{\"1\":{\"69\":1}}],[\"并设置失败的值\",{\"1\":{\"68\":1}}],[\"并可以获取其成功或失败的结果\",{\"1\":{\"68\":1}}],[\"商品数据\",{\"1\":{\"67\":2,\"102\":1}}],[\"订单数据\",{\"1\":{\"67\":2}}],[\"另一种做法\",{\"1\":{\"67\":1}}],[\"需要考虑源代码要不要隐藏\",{\"1\":{\"249\":1}}],[\"需要考虑速度快\",{\"1\":{\"249\":1}}],[\"需要修改\",{\"1\":{\"247\":1}}],[\"需要做兼容性处理的就做按需加载\",{\"1\":{\"242\":3,\"244\":1}}],[\"需要有结构的html文件\",{\"1\":{\"234\":1,\"255\":1,\"256\":1}}],[\"需要借助\",{\"1\":{\"232\":1}}],[\"需要使用类直接调用\",{\"1\":{\"197\":1}}],[\"需要创建多个类型确定的对象\",{\"1\":{\"157\":1}}],[\"需要创建多个对象\",{\"1\":{\"157\":1}}],[\"需要通过\",{\"1\":{\"87\":1}}],[\"需要注意的是\",{\"1\":{\"33\":1}}],[\"需求\",{\"1\":{\"67\":1,\"91\":1,\"92\":1,\"93\":1,\"149\":1}}],[\"异步代码\",{\"1\":{\"164\":1}}],[\"异步函数\",{\"1\":{\"87\":2}}],[\"异步编程\",{\"1\":{\"67\":1}}],[\"异常处理\",{\"1\":{\"51\":1}}],[\"未定义\",{\"1\":{\"67\":1}}],[\"未发布\",{\"1\":{\"51\":1}}],[\"传递\",{\"1\":{\"122\":1}}],[\"传递的时引用还是传递\",{\"1\":{\"122\":1}}],[\"传统静态导入\",{\"1\":{\"104\":1}}],[\"传统写法\",{\"1\":{\"103\":1}}],[\"传入参数\",{\"1\":{\"67\":1}}],[\"传入的参数作为第一条\",{\"1\":{\"67\":1}}],[\"传奇\",{\"1\":{\"55\":1}}],[\"真奇怪\",{\"1\":{\"67\":1}}],[\"语法检查\",{\"0\":{\"241\":1},\"1\":{\"241\":1}}],[\"语法\",{\"1\":{\"84\":1,\"178\":1}}],[\"语法上\",{\"1\":{\"68\":1}}],[\"语法行为与传统函数完全不同\",{\"1\":{\"67\":1}}],[\"语句太多\",{\"1\":{\"157\":1}}],[\"语句yield\",{\"1\":{\"67\":1}}],[\"语句的返回值\",{\"1\":{\"67\":1}}],[\"语句后的值\",{\"1\":{\"67\":1}}],[\"语言的第七种数据类型\",{\"1\":{\"63\":1}}],[\"沙僧\",{\"1\":{\"66\":1}}],[\"猪八戒\",{\"1\":{\"66\":1,\"199\":3,\"200\":1}}],[\"孙悟空\",{\"1\":{\"66\":1,\"197\":1,\"199\":3,\"200\":1,\"206\":1}}],[\"唐僧\",{\"1\":{\"66\":1}}],[\"接收worker传过来的数据\",{\"1\":{\"165\":1}}],[\"接下来不断调用\",{\"1\":{\"66\":1}}],[\"接口可以去限制一个对象的接口\",{\"1\":{\"206\":1}}],[\"接口主要负责定义一个类的结构\",{\"1\":{\"206\":1}}],[\"接口主要供\",{\"1\":{\"66\":1}}],[\"接口中的所有方法和属性都是没有实值的\",{\"1\":{\"206\":1}}],[\"接口的作用类似于抽象类\",{\"1\":{\"206\":1}}],[\"接口的数据\",{\"1\":{\"66\":1}}],[\"接口\",{\"0\":{\"206\":1},\"1\":{\"66\":1,\"69\":1,\"70\":1}}],[\"遍历加监听\",{\"1\":{\"149\":1}}],[\"遍历对象\",{\"1\":{\"66\":1}}],[\"遍历数组\",{\"1\":{\"66\":1}}],[\"遍历\",{\"1\":{\"66\":1,\"100\":1}}],[\"遍历器\",{\"1\":{\"66\":1}}],[\"原生请求\",{\"1\":{\"68\":2}}],[\"原生具备\",{\"1\":{\"66\":1}}],[\"原型链继承\",{\"1\":{\"158\":1}}],[\"原型链面试题\",{\"0\":{\"138\":1}}],[\"原型链属性问题\",{\"0\":{\"137\":1}}],[\"原型链\",{\"0\":{\"136\":1},\"1\":{\"136\":1}}],[\"原型对象中有一个属性\",{\"1\":{\"134\":1}}],[\"原型对象\",{\"1\":{\"134\":1}}],[\"原型与原型链\",{\"0\":{\"133\":1}}],[\"原型\",{\"0\":{\"134\":1},\"1\":{\"51\":1}}],[\"创造了一种新的遍历命令\",{\"1\":{\"66\":1}}],[\"创建style标签\",{\"1\":{\"233\":1,\"238\":1,\"239\":1,\"240\":1}}],[\"创建symbol\",{\"1\":{\"98\":1}}],[\"创建泛型函数\",{\"0\":{\"210\":1}}],[\"创建package\",{\"1\":{\"189\":1}}],[\"创建prmise对象\",{\"1\":{\"87\":1}}],[\"创建多线程开销\",{\"1\":{\"160\":1}}],[\"创建子类型对象\",{\"1\":{\"158\":1}}],[\"创建父类型的对象赋值给子类型的原型\",{\"1\":{\"158\":1}}],[\"创建两个人\",{\"1\":{\"157\":1}}],[\"创建对应的函数执行上下文对象\",{\"1\":{\"141\":1}}],[\"创建对象\",{\"1\":{\"68\":2,\"87\":1}}],[\"创建map\",{\"1\":{\"88\":1}}],[\"创建一个worker对象\",{\"1\":{\"165\":1}}],[\"创建一个非空\",{\"1\":{\"70\":1}}],[\"创建一个空\",{\"1\":{\"70\":1}}],[\"创建一个指针对象\",{\"1\":{\"66\":1}}],[\"创建衍生对象时\",{\"1\":{\"65\":1}}],[\"创建\",{\"1\":{\"63\":1,\"232\":1,\"256\":1}}],[\"就输出一个bundle\",{\"1\":{\"260\":1}}],[\"就表示某个类型\",{\"1\":{\"210\":1}}],[\"就产生了闭包\",{\"1\":{\"150\":1}}],[\"就确定了\",{\"1\":{\"144\":1}}],[\"就会复用\",{\"1\":{\"268\":1}}],[\"就会自动开启hmr功能\",{\"1\":{\"247\":1}}],[\"就会被base64处理\",{\"1\":{\"235\":1}}],[\"就会抛出内存溢出的而错误\",{\"1\":{\"154\":1}}],[\"就会抛出异常\",{\"1\":{\"87\":1}}],[\"就会创建一个栈来存储管理所有的执行上下文\",{\"1\":{\"142\":1}}],[\"就可以调用\",{\"1\":{\"140\":1}}],[\"就可以完成遍历操作\",{\"1\":{\"66\":1}}],[\"就是一块地盘\",{\"1\":{\"144\":1}}],[\"就是一种机制\",{\"1\":{\"66\":1}}],[\"就是1里面有的\",{\"1\":{\"69\":1}}],[\"迭代器\",{\"0\":{\"66\":1}}],[\"哪些属性会被\",{\"1\":{\"65\":1}}],[\"在偷偷加载资源\",{\"1\":{\"261\":1}}],[\"在package\",{\"1\":{\"259\":1}}],[\"在导出一个\",{\"1\":{\"232\":1}}],[\"在命令行就可以编译打包\",{\"1\":{\"232\":1}}],[\"在webpack\",{\"1\":{\"224\":1}}],[\"在子类中可以使用super来完成对父类的引用\",{\"1\":{\"204\":1}}],[\"在子类型构造函数中通过call\",{\"1\":{\"158\":1}}],[\"在子类型的构造函数中调用父类型构造函数\",{\"1\":{\"158\":1}}],[\"在汪汪叫\",{\"1\":{\"203\":1,\"204\":1}}],[\"在类中\",{\"1\":{\"202\":1}}],[\"在ts中可以对属性的权限进行设置\",{\"1\":{\"199\":1}}],[\"在ts中只能有一个构造器方法\",{\"1\":{\"198\":1}}],[\"在上述步骤的基础上\",{\"1\":{\"195\":1}}],[\"在上一级作用域下的执行上下文中查找对应的属性\",{\"1\":{\"146\":1}}],[\"在src下创建ts文件\",{\"1\":{\"194\":1}}],[\"在compileroptions中包含多个子选项\",{\"1\":{\"186\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"170\":1}}],[\"在主线程执行的\",{\"1\":{\"162\":1}}],[\"在一个进程内\",{\"1\":{\"160\":1}}],[\"在动态添加属性\",{\"1\":{\"157\":1}}],[\"在嵌套内部函数成为垃圾对象时\",{\"1\":{\"153\":1}}],[\"在嵌套内部函数定义执行完成时就产生了\",{\"1\":{\"153\":1}}],[\"在函数外部能直接访问函数内部的局部变量吗\",{\"1\":{\"152\":1}}],[\"在函数执行完之后\",{\"1\":{\"152\":1}}],[\"在当前作用域下的执行上下文中查找对应的属性\",{\"1\":{\"146\":1}}],[\"在当前函数执行完后\",{\"1\":{\"142\":1}}],[\"在编写代码时\",{\"1\":{\"144\":1}}],[\"在执行babel\",{\"1\":{\"244\":1,\"252\":1}}],[\"在执行函数提升\",{\"1\":{\"143\":1}}],[\"在执行全局代码前window确定为全局执行上下文\",{\"1\":{\"141\":1}}],[\"在全局执行上下文\",{\"1\":{\"142\":1}}],[\"在全局代码执行前\",{\"1\":{\"142\":1}}],[\"在调用函数\",{\"1\":{\"141\":1}}],[\"在之前\",{\"1\":{\"140\":1}}],[\"在定义语句之前就可以访问到\",{\"1\":{\"140\":1}}],[\"在定义函数时自动添加的\",{\"1\":{\"135\":1}}],[\"在创建对象时自动添加的\",{\"1\":{\"135\":1}}],[\"在某个时刻\",{\"1\":{\"129\":1}}],[\"在js调用函数的时候传递变量参数时\",{\"1\":{\"122\":1}}],[\"在\",{\"1\":{\"85\":1,\"90\":2,\"142\":1,\"232\":1}}],[\"在app\",{\"1\":{\"82\":1}}],[\"在该对象上面调用\",{\"1\":{\"65\":1}}],[\"在前几年离开了开心麻花`\",{\"1\":{\"56\":1}}],[\"方法会监听\",{\"1\":{\"247\":1}}],[\"方法名\",{\"1\":{\"197\":1}}],[\"方法三\",{\"1\":{\"157\":1}}],[\"方法二\",{\"1\":{\"157\":1}}],[\"方法一\",{\"1\":{\"157\":1}}],[\"方法一般定义在原型中\",{\"1\":{\"137\":1}}],[\"方法用来检测数组中是否包含某个元素\",{\"1\":{\"84\":1}}],[\"方法必须使用该方式写\",{\"1\":{\"71\":1}}],[\"方法是可以传入参数的\",{\"1\":{\"67\":1}}],[\"方法可以传递实参\",{\"1\":{\"67\":1}}],[\"方法可以得到\",{\"1\":{\"67\":1}}],[\"方法返回一个包含\",{\"1\":{\"66\":1}}],[\"方法时\",{\"1\":{\"65\":1}}],[\"方法\",{\"1\":{\"65\":1,\"66\":2,\"67\":1,\"68\":2,\"88\":2,\"126\":1,\"134\":1,\"136\":1,\"138\":1,\"157\":1,\"201\":2}}],[\"方法调用时\",{\"1\":{\"65\":3}}],[\"方式\",{\"1\":{\"260\":1}}],[\"方式四\",{\"1\":{\"157\":1}}],[\"方式三\",{\"1\":{\"64\":1,\"260\":1}}],[\"方式二\",{\"0\":{\"213\":1},\"1\":{\"64\":1,\"260\":1}}],[\"方式一\",{\"0\":{\"212\":1},\"1\":{\"64\":2,\"260\":1}}],[\"会在使用之前\",{\"1\":{\"261\":1}}],[\"会导致所有缓存失效\",{\"1\":{\"258\":1}}],[\"会导致问题\",{\"1\":{\"247\":1}}],[\"会提示构建后代码错误信息\",{\"1\":{\"249\":1}}],[\"会加入\",{\"1\":{\"249\":1}}],[\"会加载里面的配置\",{\"1\":{\"232\":1}}],[\"会执行后面的回调函数\",{\"1\":{\"247\":1}}],[\"会执行yield\",{\"1\":{\"67\":3}}],[\"会将打包结果输出出去\",{\"1\":{\"237\":1}}],[\"会将\",{\"1\":{\"230\":2}}],[\"会重写父类中的run方法\",{\"1\":{\"204\":1}}],[\"会自动到原型链中查找\",{\"1\":{\"137\":1}}],[\"会自动分配一定大小的内存来存放对应的数据\",{\"1\":{\"119\":1}}],[\"会返回该方法的返回值\",{\"1\":{\"65\":3}}],[\"会调用\",{\"1\":{\"65\":1}}],[\"会调用它\",{\"1\":{\"65\":1}}],[\"会调用这个方法\",{\"1\":{\"65\":2}}],[\"会使用该属性\",{\"1\":{\"65\":1}}],[\"时就会自动释放\",{\"1\":{\"145\":1}}],[\"时\",{\"1\":{\"65\":2,\"150\":1}}],[\"属性存取器\",{\"0\":{\"200\":1}}],[\"属性一般通过构造函数定义在对象本身上\",{\"1\":{\"137\":1}}],[\"属性值是函数\",{\"1\":{\"126\":1}}],[\"属性值\",{\"1\":{\"126\":1}}],[\"属性名包含特殊字符串\",{\"1\":{\"128\":1}}],[\"属性名\",{\"0\":{\"128\":1},\"1\":{\"126\":1,\"127\":2,\"197\":2}}],[\"属性\",{\"1\":{\"126\":1,\"135\":1}}],[\"属性特性\",{\"1\":{\"88\":1}}],[\"属性的类型不能确定\",{\"1\":{\"208\":1}}],[\"属性的封装\",{\"0\":{\"207\":1}}],[\"属性的值接近于\",{\"1\":{\"73\":1,\"78\":1}}],[\"属性的对象\",{\"1\":{\"66\":1}}],[\"属性等于的是一个布尔值\",{\"1\":{\"65\":1}}],[\"属性和方法简写\",{\"1\":{\"57\":1}}],[\"当文件需要时才加载\",{\"1\":{\"261\":1}}],[\"当项目中js文件较多\",{\"1\":{\"254\":1}}],[\"当修改了webpack配置\",{\"1\":{\"247\":1}}],[\"当一个文件被多个loader处理时\",{\"1\":{\"244\":1,\"252\":1}}],[\"当一个嵌套的内部\",{\"1\":{\"150\":1}}],[\"当你运行webpack时\",{\"1\":{\"256\":1}}],[\"当你运行\",{\"1\":{\"232\":1}}],[\"当前版本\",{\"1\":{\"231\":1}}],[\"当前类和当前类的子类中使用\",{\"1\":{\"207\":2}}],[\"当前配置文件中会自动包含config目录下base\",{\"1\":{\"184\":1}}],[\"当对变量的声明和赋值是同时进行的\",{\"1\":{\"178\":1}}],[\"当为变量赋值时\",{\"1\":{\"178\":1}}],[\"当事件发生时\",{\"1\":{\"164\":1}}],[\"当程序运行需要的内存超过了剩余的内存时\",{\"1\":{\"154\":1}}],[\"当所有的代码执行完后\",{\"1\":{\"142\":1}}],[\"当该对象被\",{\"1\":{\"65\":3}}],[\"当执行\",{\"1\":{\"65\":1}}],[\"当其他对象使用\",{\"1\":{\"65\":1}}],[\"当空间不足时\",{\"1\":{\"22\":1}}],[\"描述\",{\"1\":{\"65\":1,\"178\":1,\"230\":1}}],[\"还需要在package\",{\"1\":{\"244\":1}}],[\"还是多线程\",{\"1\":{\"160\":1}}],[\"还是零\",{\"1\":{\"78\":2}}],[\"还提供了\",{\"1\":{\"65\":1}}],[\"还能创建更多复杂的形状\",{\"1\":{\"34\":1}}],[\"值\",{\"1\":{\"65\":1,\"69\":4,\"70\":2,\"122\":1,\"140\":2,\"178\":1}}],[\"值以外\",{\"1\":{\"65\":1}}],[\"值不能与其他数据进行运算\",{\"1\":{\"63\":1}}],[\"值不允许修改\",{\"1\":{\"54\":1}}],[\"值不绘制\",{\"1\":{\"28\":2}}],[\"狼人杀\",{\"1\":{\"64\":2}}],[\"我是\",{\"1\":{\"206\":2}}],[\"我是$\",{\"1\":{\"197\":1,\"199\":3}}],[\"我可以进行视频通话\",{\"1\":{\"71\":1}}],[\"我可以玩游戏\",{\"1\":{\"71\":3}}],[\"我可以拍照\",{\"1\":{\"71\":3}}],[\"我可以改变世界\",{\"1\":{\"71\":2}}],[\"我可以打电话\",{\"1\":{\"71\":5}}],[\"我可以自爆\",{\"1\":{\"64\":2}}],[\"我可以发言\",{\"1\":{\"64\":2}}],[\"我可以快速下降\",{\"1\":{\"64\":1}}],[\"我可以快速上升\",{\"1\":{\"64\":1}}],[\"我们所编写的ts代码将会被编译为es6版本的js代码\",{\"1\":{\"186\":1}}],[\"我们会说程序是多线程运行的\",{\"1\":{\"160\":1}}],[\"我们通过变量查找到内存\",{\"1\":{\"121\":1}}],[\"我们想要将其中的电影名称和对应上映时间提取出来\",{\"1\":{\"93\":1}}],[\"我们只想匹配到555\",{\"1\":{\"92\":1}}],[\"我们将此称之为捕获\",{\"1\":{\"91\":1}}],[\"我们可以在类中定义一组读取\",{\"1\":{\"200\":1}}],[\"我们可以将一些\",{\"1\":{\"165\":1}}],[\"我们可以帮你改变人生\",{\"1\":{\"80\":1}}],[\"我们可以帮你找到好工作\",{\"1\":{\"80\":1}}],[\"我们可以教你开发技术\",{\"1\":{\"80\":2}}],[\"我们要往game对象里面添加方法\",{\"1\":{\"64\":1}}],[\"我们常用的\",{\"1\":{\"26\":1}}],[\"俄罗斯方块\",{\"1\":{\"64\":1}}],[\"以后再打包项目时\",{\"1\":{\"256\":1}}],[\"以下配置只会生效一个\",{\"1\":{\"265\":1}}],[\"以下loader只会匹配一个\",{\"1\":{\"252\":1}}],[\"以下版本\",{\"1\":{\"241\":1}}],[\"以下两个等价\",{\"1\":{\"34\":2}}],[\"以及manifest\",{\"1\":{\"256\":1}}],[\"以及如何命名\",{\"1\":{\"227\":1}}],[\"以及操作dom\",{\"1\":{\"163\":1}}],[\"以哪个文件为入口起点开始打包\",{\"1\":{\"226\":1}}],[\"以使其可以兼容到更多的浏览器\",{\"1\":{\"195\":1}}],[\"以\",{\"1\":{\"63\":1}}],[\"但有时编译器无法自动推断时还需要使用下面的方式\",{\"1\":{\"212\":1}}],[\"但此时\",{\"1\":{\"138\":1}}],[\"但object不满足\",{\"1\":{\"136\":2}}],[\"但不能直接从操作隐式原型\",{\"1\":{\"135\":1}}],[\"但是没有任何源代码信息\",{\"1\":{\"249\":1}}],[\"但是没有错误位置\",{\"1\":{\"249\":1}}],[\"但是将所有兼容性代码全部引入\",{\"1\":{\"242\":3,\"244\":1}}],[\"但是不能处理\",{\"1\":{\"232\":1}}],[\"但是很明显这样做是不合适的\",{\"1\":{\"208\":1}}],[\"但是能确定的时其返回值的类型和参数的类型是相同的\",{\"1\":{\"208\":1}}],[\"但是能直接使用tsc命令的前提时\",{\"1\":{\"181\":1}}],[\"但是只支持简单的代码转换\",{\"1\":{\"195\":1}}],[\"但是ts编译器却并不清楚\",{\"1\":{\"178\":1}}],[\"但是子线程完全受主线程控制\",{\"1\":{\"165\":1}}],[\"但是使用h5中的web\",{\"1\":{\"160\":1}}],[\"但是他最终执行了\",{\"1\":{\"129\":1}}],[\"但是\",{\"1\":{\"70\":1}}],[\"但是怕game对象已经存在\",{\"1\":{\"64\":1}}],[\"但成员的值都是唯一的\",{\"1\":{\"69\":1}}],[\"但\",{\"1\":{\"63\":1}}],[\"历\",{\"1\":{\"63\":1}}],[\"历史版本查看网址\",{\"1\":{\"51\":1}}],[\"环遍\",{\"1\":{\"63\":1}}],[\"循环绑定\",{\"1\":{\"149\":1}}],[\"循环\",{\"1\":{\"66\":1}}],[\"循环时\",{\"1\":{\"65\":1}}],[\"循\",{\"1\":{\"63\":1}}],[\"使得代码可以在大部分浏览器中直接使用\",{\"1\":{\"195\":1}}],[\"使得变量只能存储某种类型的值\",{\"1\":{\"178\":1}}],[\"使函数内部的变量\",{\"1\":{\"152\":1}}],[\"使\",{\"1\":{\"63\":2}}],[\"使用插件\",{\"1\":{\"262\":1}}],[\"使用dll技术对某些库进行打包\",{\"1\":{\"256\":1}}],[\"使用流程\",{\"1\":{\"256\":1}}],[\"使用步骤\",{\"1\":{\"254\":1,\"262\":1}}],[\"使用loader的默认配置\",{\"1\":{\"239\":1,\"240\":1}}],[\"使用commonjs解析\",{\"1\":{\"235\":1}}],[\"使用chrome调试查看\",{\"1\":{\"150\":1}}],[\"使用一个loader\",{\"1\":{\"235\":1}}],[\"使用哪些loader\",{\"1\":{\"233\":1}}],[\"使用相应模式的配置\",{\"1\":{\"230\":1}}],[\"使用泛型时\",{\"1\":{\"214\":1}}],[\"使用泛型函数\",{\"0\":{\"211\":1}}],[\"使用时可以直接传递参数使用\",{\"1\":{\"212\":1}}],[\"使用时引入即可\",{\"1\":{\"81\":1}}],[\"使用abstract开头的方法叫做抽象方法\",{\"1\":{\"205\":1}}],[\"使用async和await\",{\"1\":{\"87\":1}}],[\"使用t\",{\"1\":{\"216\":1}}],[\"使用this表示当前对象\",{\"1\":{\"202\":1}}],[\"使用ts编译后的文件将会再次被babel处理\",{\"1\":{\"195\":1}}],[\"使用static开头\",{\"1\":{\"201\":1}}],[\"使用静态属性无需创建实例\",{\"1\":{\"201\":1}}],[\"使用类\",{\"1\":{\"197\":1}}],[\"使用场景\",{\"1\":{\"157\":1}}],[\"使用for\",{\"1\":{\"100\":1}}],[\"使用的时候\",{\"1\":{\"81\":1}}],[\"使用babel转换\",{\"1\":{\"81\":1}}],[\"使用babel转换js代码\",{\"1\":{\"81\":1}}],[\"使用不变\",{\"1\":{\"76\":1}}],[\"使用promise实现\",{\"1\":{\"68\":1}}],[\"使用promise封装\",{\"1\":{\"68\":1}}],[\"使用\",{\"1\":{\"53\":1,\"63\":1,\"66\":1,\"180\":1,\"234\":2,\"235\":4,\"236\":2,\"237\":6,\"247\":1,\"255\":2}}],[\"使用指南\",{\"2\":{\"8\":1,\"171\":1}}],[\"性\",{\"1\":{\"63\":1}}],[\"审判\",{\"1\":{\"61\":1}}],[\"勇气\",{\"1\":{\"61\":1}}],[\"致命打击\",{\"1\":{\"61\":1}}],[\"quiet\",{\"1\":{\"267\":1}}],[\"q\",{\"1\":{\"61\":1,\"90\":2}}],[\"展开对象\",{\"1\":{\"61\":1}}],[\"展开数组\",{\"1\":{\"61\":1}}],[\"德玛西亚正义\",{\"1\":{\"61\":1}}],[\"德玛西亚皇子\",{\"1\":{\"61\":1}}],[\"德玛西亚之翼\",{\"1\":{\"61\":1}}],[\"德玛西亚之力\",{\"1\":{\"61\":1}}],[\"也称为类属性\",{\"1\":{\"201\":1}}],[\"也有可能延迟很久\",{\"1\":{\"162\":1}}],[\"也可以对泛型的范围进行约束\",{\"1\":{\"216\":1}}],[\"也可以在函数后手动指定泛型\",{\"1\":{\"213\":1}}],[\"也可以使用字面量去指定变量的类型\",{\"1\":{\"178\":1}}],[\"也可以认为是函数的分隔符\",{\"1\":{\"67\":1}}],[\"也可能是引用传递\",{\"1\":{\"122\":1}}],[\"也实现了iterator\",{\"1\":{\"70\":1}}],[\"也是键值对的集合\",{\"1\":{\"70\":1}}],[\"也是三个点\",{\"1\":{\"61\":1}}],[\"也不放大\",{\"1\":{\"21\":1}}],[\"扩展运算符在\",{\"1\":{\"90\":2}}],[\"扩展运算符\",{\"0\":{\"90\":1},\"1\":{\"61\":1,\"69\":1,\"70\":1}}],[\"扩展对象\",{\"1\":{\"51\":2}}],[\"作用域链\",{\"0\":{\"146\":1}}],[\"作用域\",{\"1\":{\"145\":1}}],[\"作用域在函数定义时就已经确定了\",{\"1\":{\"145\":1}}],[\"作用域与执行上下文区别\",{\"0\":{\"145\":1}}],[\"作用域与作用域链\",{\"0\":{\"144\":1}}],[\"作用\",{\"1\":{\"130\":1,\"134\":1,\"136\":1,\"144\":1,\"232\":1,\"233\":1,\"238\":1,\"239\":1,\"240\":1,\"247\":1}}],[\"作用与\",{\"1\":{\"60\":1}}],[\"作为浏览器脚本语言\",{\"1\":{\"163\":1}}],[\"作为对象的模板\",{\"1\":{\"71\":1}}],[\"作为对象的属性和方法\",{\"1\":{\"57\":1}}],[\"作为第一个的返回值\",{\"1\":{\"67\":1}}],[\"作为\",{\"1\":{\"67\":1}}],[\"用它来编写js模块\",{\"1\":{\"130\":1}}],[\"用于在webpack中编译ts文件\",{\"1\":{\"190\":1}}],[\"用于接收另一个线程的回调函数\",{\"1\":{\"165\":1}}],[\"用于更大数值的运算\",{\"1\":{\"105\":1}}],[\"用于去除一个数的小数部分\",{\"1\":{\"77\":1}}],[\"用于获取函数的实参\",{\"1\":{\"60\":1}}],[\"用户数据\",{\"1\":{\"67\":2}}],[\"用\",{\"1\":{\"63\":2}}],[\"用来自动化\",{\"1\":{\"237\":2}}],[\"用来自动创建html文件\",{\"1\":{\"190\":1}}],[\"用来拼接绝对路径的方法\",{\"1\":{\"233\":1}}],[\"用来完成对编译的配置\",{\"1\":{\"186\":1}}],[\"用来保存多个数据的容器\",{\"1\":{\"124\":1}}],[\"用来得到正则批量匹配的结果\",{\"1\":{\"100\":2}}],[\"用来判断一个数值是否为整数\",{\"1\":{\"78\":1}}],[\"用来检查一个值是否为\",{\"1\":{\"75\":1}}],[\"用来检查一个数值是否为有限的\",{\"1\":{\"75\":1}}],[\"用来封装异步操作\",{\"1\":{\"68\":1}}],[\"用来解决命名冲突的问题\",{\"1\":{\"63\":1}}],[\"用来代替\",{\"1\":{\"60\":1}}],[\"用反引号\",{\"1\":{\"56\":1}}],[\"uri\",{\"1\":{\"232\":3}}],[\"url\",{\"1\":{\"87\":2,\"91\":2,\"232\":4,\"235\":3}}],[\"usage\",{\"1\":{\"195\":1,\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"use数组中loader执行顺序\",{\"1\":{\"233\":1}}],[\"usebuiltins\",{\"1\":{\"195\":1,\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"use\",{\"1\":{\"191\":1,\"195\":1,\"233\":2,\"235\":2,\"236\":1,\"237\":3,\"238\":1,\"239\":1,\"240\":1,\"244\":2,\"252\":2,\"254\":1,\"265\":1}}],[\"user\",{\"1\":{\"90\":2}}],[\"users\",{\"1\":{\"67\":2}}],[\"username\",{\"1\":{\"59\":3,\"90\":1,\"103\":2}}],[\"umd\",{\"1\":{\"186\":1}}],[\"utilities\",{\"1\":{\"185\":1}}],[\"utf\",{\"1\":{\"80\":2,\"87\":2,\"149\":1,\"165\":1}}],[\"ul>\",{\"1\":{\"93\":1,\"100\":1}}],[\"ul>`\",{\"1\":{\"56\":1}}],[\"unusable\",{\"1\":{\"178\":1}}],[\"unknown\",{\"1\":{\"178\":5}}],[\"uncaught\",{\"1\":{\"71\":1}}],[\"union\",{\"1\":{\"69\":2}}],[\"undefined加括号执行会报错\",{\"1\":{\"138\":1}}],[\"undefined定义了未赋值\",{\"1\":{\"116\":1}}],[\"undefined与null的区别\",{\"1\":{\"116\":1}}],[\"undefined\",{\"1\":{\"66\":1,\"69\":2,\"70\":2,\"71\":1,\"101\":1,\"114\":2,\"115\":2,\"138\":1,\"140\":2,\"141\":2,\"143\":2,\"155\":3,\"178\":2}}],[\"unscopables\",{\"1\":{\"65\":1}}],[\"up\",{\"1\":{\"64\":5}}],[\"潜规则\",{\"1\":{\"59\":1}}],[\"一旦发生变化\",{\"1\":{\"247\":1}}],[\"一旦\",{\"1\":{\"247\":1}}],[\"一定要先引入才能使用\",{\"1\":{\"237\":1}}],[\"一直到重新定义环境中的变量等\",{\"1\":{\"229\":1}}],[\"一种提供源代码到构建后代码的映射的技术\",{\"1\":{\"249\":1}}],[\"一种程序运行出现的错误\",{\"1\":{\"154\":1}}],[\"一种特别的属性\",{\"1\":{\"126\":1}}],[\"一种做法\",{\"1\":{\"67\":1}}],[\"一块内存包含两个数据\",{\"1\":{\"119\":1}}],[\"一切皆数据\",{\"1\":{\"118\":1}}],[\"一般只有在hmr功能中让html热更新生效\",{\"1\":{\"263\":1}}],[\"一般会延迟一丁点\",{\"1\":{\"162\":1}}],[\"一般不存在\",{\"1\":{\"152\":1}}],[\"一般都是方法\",{\"1\":{\"134\":1}}],[\"一般数据\",{\"1\":{\"119\":1}}],[\"一般项目中都需要使用babel进行转换\",{\"1\":{\"81\":1}}],[\"一般写法\",{\"1\":{\"68\":1}}],[\"一般位置要靠后\",{\"1\":{\"59\":1}}],[\"一只没有尾巴\",{\"1\":{\"67\":1}}],[\"一只没有耳朵\",{\"1\":{\"67\":1}}],[\"一个bundle文件\",{\"1\":{\"263\":1}}],[\"一个模块发生变化\",{\"1\":{\"247\":1}}],[\"一个文件只能被一个loader处理\",{\"1\":{\"244\":1,\"252\":1}}],[\"一个基本的生产环境配置\",{\"1\":{\"244\":1}}],[\"一个静态模块打包器\",{\"1\":{\"224\":1}}],[\"一个一个\",{\"1\":{\"164\":1}}],[\"一个应用程序可以同时启动多个实例运行\",{\"1\":{\"160\":1}}],[\"一个进程内的数据可以供其中的多个线程共享\",{\"1\":{\"160\":1}}],[\"一个进程中也可以同时运行多个线程\",{\"1\":{\"160\":1}}],[\"一个进程中至少有一个运行的线程\",{\"1\":{\"160\":1}}],[\"一个代码段所在的区域\",{\"1\":{\"144\":1}}],[\"一个\",{\"1\":{\"36\":1}}],[\"一个是y坐标\",{\"1\":{\"33\":1}}],[\"一个是x坐标\",{\"1\":{\"33\":1}}],[\"一个是`y`坐标\",{\"1\":{\"32\":1}}],[\"一个是`x`坐标\",{\"1\":{\"32\":1}}],[\"具有默认值的参数\",{\"1\":{\"59\":1}}],[\"具体如下\",{\"1\":{\"28\":1,\"29\":1,\"30\":1}}],[\"形成一个chunk\",{\"1\":{\"263\":1}}],[\"形参\",{\"1\":{\"178\":1}}],[\"形参变量==\",{\"1\":{\"141\":1}}],[\"形参初始值\",{\"1\":{\"59\":1}}],[\"形式输出变量\",{\"1\":{\"56\":1}}],[\"尚硅谷\",{\"1\":{\"58\":1,\"63\":4,\"70\":1,\"79\":1,\"80\":4}}],[\"省略对对象是否传入的层层判断\",{\"1\":{\"103\":1}}],[\"省略花括号的情况\",{\"1\":{\"58\":1}}],[\"省略小括号的情况\",{\"1\":{\"58\":1}}],[\"指令时\",{\"1\":{\"232\":1}}],[\"指令\",{\"1\":{\"232\":1}}],[\"指令后\",{\"1\":{\"180\":1}}],[\"指示babel做怎么样的兼容性处理\",{\"1\":{\"242\":3,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"指示webpack干哪些活\",{\"1\":{\"233\":1}}],[\"指示\",{\"1\":{\"226\":1,\"227\":1,\"230\":1,\"232\":1}}],[\"指定名称+目录\",{\"1\":{\"264\":1}}],[\"指定兼容性做到哪个版本的浏览器\",{\"1\":{\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"指定corejs版本\",{\"1\":{\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"指定打包好的入口文件输出位置\",{\"1\":{\"237\":1}}],[\"指定类型\",{\"0\":{\"213\":1}}],[\"指定类型后\",{\"1\":{\"178\":1}}],[\"指定代码的根目录\",{\"1\":{\"186\":1}}],[\"指定代码运行时所包含的库\",{\"1\":{\"186\":1}}],[\"指定被编译文件的列表\",{\"1\":{\"185\":1}}],[\"指定这条线的起点和终点位置\",{\"1\":{\"31\":1}}],[\"指数操作符\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"指针也会重新回到最前面\",{\"1\":{\"66\":1}}],[\"指针一直往后移动\",{\"1\":{\"66\":1}}],[\"指针自动指向数据结构的第一个成员\",{\"1\":{\"66\":1}}],[\"指向当前数据结构的起始位置\",{\"1\":{\"66\":1}}],[\"指向语言内部使用的方法\",{\"1\":{\"65\":1}}],[\"指向声明时所在作用域中\",{\"1\":{\"58\":1}}],[\"指向声明时所在作用域下\",{\"1\":{\"58\":1}}],[\"函数内的局部变量没有释放\",{\"1\":{\"154\":1}}],[\"函数内部声明的局部变量是否还存在\",{\"1\":{\"152\":1}}],[\"函数嵌套\",{\"1\":{\"150\":1}}],[\"函数引用了\",{\"1\":{\"150\":1}}],[\"函数上下文环境\",{\"1\":{\"145\":1}}],[\"函数调用结束\",{\"1\":{\"145\":1}}],[\"函数作用域\",{\"1\":{\"144\":1}}],[\"函数体\",{\"1\":{\"145\":1}}],[\"函数体代码\",{\"1\":{\"141\":1}}],[\"函数体如果只有一条语句\",{\"1\":{\"58\":1}}],[\"函数执行完后\",{\"1\":{\"154\":1}}],[\"函数执行完\",{\"1\":{\"152\":1}}],[\"函数执行完自动释放\",{\"1\":{\"122\":1}}],[\"函数执行上下文是在调用函数时\",{\"1\":{\"145\":1}}],[\"函数执行上下文创建后\",{\"1\":{\"142\":1}}],[\"函数执行上下文\",{\"1\":{\"141\":1}}],[\"函数提升\",{\"1\":{\"140\":1}}],[\"函数定义对象\",{\"1\":{\"140\":1}}],[\"函数的变量\",{\"1\":{\"150\":1}}],[\"函数的显式原型指向的对象默认是空object实例对象\",{\"1\":{\"136\":2}}],[\"函数的所有实例对象自动拥有原型中的属性\",{\"1\":{\"134\":1}}],[\"函数的prototype属性\",{\"1\":{\"134\":1,\"135\":1}}],[\"函数的返回值为该条语句的执行结果\",{\"1\":{\"58\":1}}],[\"函数高级\",{\"0\":{\"132\":1}}],[\"函数声明提升\",{\"1\":{\"140\":1}}],[\"函数声明\",{\"1\":{\"129\":1}}],[\"函数也是数据\",{\"1\":{\"118\":1}}],[\"函数\",{\"0\":{\"129\":1},\"1\":{\"87\":1,\"105\":1,\"141\":1,\"150\":2,\"152\":1}}],[\"函数中声明多个泛型\",{\"0\":{\"214\":1}}],[\"函数中的this\",{\"0\":{\"131\":1}}],[\"函数中\",{\"1\":{\"87\":1}}],[\"函数参数的默认值\",{\"0\":{\"59\":1}}],[\"箭头\",{\"1\":{\"58\":1}}],[\"箭头函数简化写法\",{\"1\":{\"78\":1}}],[\"箭头函数不能作为构造函数实例化\",{\"1\":{\"58\":1}}],[\"箭头函数的注意点\",{\"1\":{\"58\":1}}],[\"箭头函数\",{\"0\":{\"58\":1},\"1\":{\"51\":1,\"58\":1}}],[\"永远18\",{\"1\":{\"57\":1}}],[\"直到全局作用域\",{\"1\":{\"146\":1}}],[\"直到指向最后一个成员\",{\"1\":{\"66\":1}}],[\"直接使用\",{\"0\":{\"212\":1}}],[\"直接将其设置为private将导致无法再通过对象修改其中的属性\",{\"1\":{\"200\":1}}],[\"直接添加此属性并设置其值\",{\"1\":{\"137\":1}}],[\"直接调用\",{\"1\":{\"129\":1}}],[\"直接覆盖\",{\"1\":{\"71\":1}}],[\"直接写\",{\"1\":{\"71\":1}}],[\"直接写入变量和函数\",{\"1\":{\"57\":1}}],[\"直线\",{\"0\":{\"31\":1}}],[\"允许行终止符出现\",{\"1\":{\"93\":1}}],[\"允许给函数参数赋值初始值\",{\"1\":{\"59\":1}}],[\"允许使用\",{\"1\":{\"58\":1}}],[\"允许在大括号里面\",{\"1\":{\"57\":1}}],[\"允许按照一定模式\",{\"1\":{\"55\":1}}],[\"王宁\",{\"1\":{\"56\":1}}],[\"王菲\",{\"1\":{\"55\":1}}],[\"变量的类型对于我们来说是很明确\",{\"1\":{\"178\":1}}],[\"变量的解构赋值\",{\"0\":{\"55\":1}}],[\"变量\",{\"1\":{\"150\":1,\"152\":1,\"178\":2}}],[\"变量声明提升\",{\"1\":{\"140\":1}}],[\"变量提升和函数提升是如何产生的\",{\"1\":{\"140\":1}}],[\"变量提升与函数提升\",{\"0\":{\"140\":1}}],[\"变量提升\",{\"1\":{\"129\":1}}],[\"变量名添加到哪个上\",{\"1\":{\"264\":1}}],[\"变量名不确定\",{\"1\":{\"128\":1}}],[\"变量名用来查找对应的内存\",{\"1\":{\"120\":1}}],[\"变量是内存的标识\",{\"1\":{\"121\":1}}],[\"变量三者之间的关系\",{\"0\":{\"121\":1}}],[\"变量值就是内存中保存的数值数据\",{\"1\":{\"120\":1}}],[\"变量与内存\",{\"0\":{\"117\":1}}],[\"变量类型\",{\"1\":{\"116\":1}}],[\"变量拼接\",{\"1\":{\"56\":1}}],[\"$css\",{\"1\":{\"266\":1}}],[\"$\",{\"1\":{\"56\":1,\"82\":1,\"149\":3,\"165\":2,\"178\":2,\"206\":1,\"235\":2,\"236\":1,\"237\":3,\"244\":2,\"252\":2,\"268\":1}}],[\"可选方案\",{\"1\":{\"249\":1}}],[\"可选\",{\"1\":{\"191\":2}}],[\"可选值\",{\"1\":{\"186\":4}}],[\"可选链操作符写法\",{\"1\":{\"103\":1}}],[\"可选链操作符\",{\"0\":{\"103\":1},\"1\":{\"103\":1}}],[\"可能会把css\",{\"1\":{\"259\":1}}],[\"可能需要一定时间\",{\"1\":{\"164\":1}}],[\"可能是值传递\",{\"1\":{\"122\":1}}],[\"可称为隐式原型\",{\"1\":{\"135\":1}}],[\"可变化的量\",{\"1\":{\"120\":1}}],[\"可运算\",{\"1\":{\"118\":1}}],[\"可传递\",{\"1\":{\"118\":1}}],[\"可用扩展运算符展开\",{\"1\":{\"100\":1}}],[\"可用\",{\"1\":{\"66\":1,\"90\":1}}],[\"可以将node\",{\"1\":{\"260\":1}}],[\"可以将其设置为private\",{\"1\":{\"200\":1}}],[\"可以用于执行范围更广的任务\",{\"1\":{\"229\":1}}],[\"可以同时指定多个泛型\",{\"1\":{\"214\":1}}],[\"可以让一个类去实现接口\",{\"1\":{\"206\":1}}],[\"可以修改\",{\"1\":{\"199\":2}}],[\"可以在类中修改\",{\"1\":{\"199\":2}}],[\"可以在类\",{\"1\":{\"199\":2}}],[\"可以通过对象修改\",{\"1\":{\"199\":1}}],[\"可以通过person类来创建人的对象\",{\"1\":{\"196\":1}}],[\"可以通过类型断言来告诉编译器变量的类型\",{\"1\":{\"178\":1}}],[\"可以通过windows任务管理器来查看进程\",{\"1\":{\"160\":1}}],[\"可以省略掉类型声明\",{\"1\":{\"178\":1}}],[\"可以接受\",{\"1\":{\"162\":1}}],[\"可以调用父类型的方法\",{\"1\":{\"158\":1}}],[\"可以获取到\",{\"1\":{\"138\":1}}],[\"可以存储多个数据\",{\"1\":{\"124\":1}}],[\"可以反复进行操作\",{\"1\":{\"122\":1}}],[\"可以执行\",{\"1\":{\"114\":1}}],[\"可以直接设置对象的原型\",{\"1\":{\"79\":2}}],[\"可以看作只是一个语法糖\",{\"1\":{\"71\":1}}],[\"可以定义类\",{\"1\":{\"71\":1}}],[\"可以称这些方法为魔术方法\",{\"1\":{\"65\":1}}],[\"可以改变你\",{\"1\":{\"57\":1}}],[\"可以提高你的技能\",{\"1\":{\"57\":1}}],[\"可以使用命名规则\",{\"1\":{\"268\":1}}],[\"可以使用hmr功能\",{\"1\":{\"247\":1}}],[\"可以使用constructor定义一个构造器方法\",{\"1\":{\"198\":1}}],[\"可以使用\",{\"1\":{\"56\":1}}],[\"可覆盖align\",{\"1\":{\"25\":1}}],[\"`子类中的run方法\",{\"1\":{\"204\":1}}],[\"`父类中的run方法\",{\"1\":{\"204\":1}}],[\"`大家好\",{\"1\":{\"197\":1,\"199\":3}}],[\"`hello\",{\"1\":{\"178\":1,\"206\":1}}],[\"`bob\",{\"1\":{\"178\":1}}],[\"`button`\",{\"1\":{\"149\":1}}],[\"`分线程向主线程返回的数据\",{\"1\":{\"165\":1}}],[\"`分线程接收到主线程发送的数据\",{\"1\":{\"165\":1}}],[\"`第\",{\"1\":{\"149\":3}}],[\"`$\",{\"1\":{\"56\":1,\"203\":1,\"204\":1}}],[\"`<ul>\",{\"1\":{\"56\":1}}],[\"`\",{\"1\":{\"56\":1,\"93\":2,\"100\":2,\"165\":2,\"178\":1,\"197\":1,\"199\":3,\"203\":1,\"204\":3,\"206\":1,\"268\":1}}],[\"模型的运转流程\",{\"1\":{\"164\":1}}],[\"模型的两个重要组成部分\",{\"1\":{\"164\":1}}],[\"模式\",{\"1\":{\"93\":2,\"230\":1,\"233\":1}}],[\"模块都会刷新\",{\"1\":{\"247\":1}}],[\"模块所有\",{\"1\":{\"247\":1}}],[\"模块热替换\",{\"0\":{\"247\":1},\"1\":{\"247\":1}}],[\"模块功能主要由两个命令构成\",{\"1\":{\"80\":1}}],[\"模块\",{\"1\":{\"68\":1,\"80\":1}}],[\"模块化默认采用\",{\"1\":{\"232\":1}}],[\"模块化编译成浏览器能识别的模块化\",{\"1\":{\"232\":1}}],[\"模块化的优势有以下几点\",{\"1\":{\"80\":1}}],[\"模块化是指将一个大的程序文件\",{\"1\":{\"80\":1}}],[\"模块化\",{\"0\":{\"80\":1},\"1\":{\"51\":1}}],[\"模拟获取\",{\"1\":{\"67\":1}}],[\"模板字符串\",{\"0\":{\"56\":1},\"1\":{\"56\":1}}],[\"overlay\",{\"1\":{\"267\":1}}],[\"occurrenceorderplugin\",{\"1\":{\"230\":1}}],[\"octal\",{\"1\":{\"178\":1}}],[\"op\",{\"1\":{\"239\":1,\"240\":1}}],[\"optimizecssassetswebpackplugin\",{\"1\":{\"240\":2,\"244\":2}}],[\"optimize\",{\"1\":{\"240\":3,\"244\":1}}],[\"optimization配置\",{\"1\":{\"260\":1}}],[\"optimization\",{\"0\":{\"268\":1},\"1\":{\"191\":1,\"260\":1,\"268\":1}}],[\"options\",{\"1\":{\"195\":1,\"235\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":3,\"244\":3,\"252\":1,\"253\":1,\"254\":2,\"265\":1}}],[\"open\",{\"1\":{\"68\":2,\"87\":1,\"193\":1,\"237\":2,\"247\":1,\"267\":1}}],[\"output中的入口js文件\",{\"1\":{\"258\":1}}],[\"output\",{\"0\":{\"227\":1,\"264\":1},\"1\":{\"191\":1,\"227\":1,\"233\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":3,\"244\":2,\"255\":1,\"256\":2,\"258\":1,\"260\":1,\"264\":1}}],[\"outfile\",{\"1\":{\"186\":3}}],[\"outdir\",{\"1\":{\"186\":3}}],[\"old\",{\"1\":{\"178\":1}}],[\"obj\",{\"1\":{\"88\":1,\"129\":2,\"131\":2,\"147\":2,\"157\":3,\"178\":1}}],[\"object对象\",{\"1\":{\"157\":1}}],[\"object构造函数模式\",{\"1\":{\"157\":1}}],[\"object2\",{\"1\":{\"155\":2}}],[\"object的显式原型对象上并没有\",{\"1\":{\"138\":1}}],[\"object的原型对象是原型链的尽头\",{\"1\":{\"136\":1}}],[\"object和array\",{\"1\":{\"115\":1}}],[\"object\",{\"0\":{\"95\":1},\"1\":{\"79\":10,\"88\":9,\"95\":3,\"114\":1,\"115\":2,\"136\":9,\"138\":1,\"155\":5,\"157\":1,\"178\":3,\"235\":1,\"263\":1}}],[\"o\",{\"1\":{\"78\":1,\"80\":5,\"81\":1,\"155\":2,\"232\":2}}],[\"onmessage\",{\"1\":{\"165\":3}}],[\"onclick\",{\"1\":{\"104\":1,\"149\":3,\"165\":1,\"261\":1}}],[\"onreadystatechange\",{\"1\":{\"68\":2,\"87\":1}}],[\"oneof\",{\"0\":{\"252\":1},\"1\":{\"252\":1,\"265\":1}}],[\"one\",{\"1\":{\"55\":1,\"67\":4}}],[\"of\",{\"1\":{\"65\":1,\"66\":6,\"69\":1,\"70\":1,\"100\":2}}],[\"ownkeys\",{\"1\":{\"63\":1,\"64\":2}}],[\"org\",{\"1\":{\"40\":1,\"41\":1,\"50\":1,\"51\":1}}],[\"orders\",{\"1\":{\"67\":2}}],[\"order\",{\"1\":{\"20\":1}}],[\"order属性定义项目的排列顺序\",{\"1\":{\"20\":1}}],[\"order属性\",{\"0\":{\"20\":1}}],[\"谢霆锋\",{\"1\":{\"55\":1}}],[\"李亚鹏\",{\"1\":{\"55\":1}}],[\"窦唯\",{\"1\":{\"55\":1}}],[\"暧昧\",{\"1\":{\"55\":1}}],[\"流年\",{\"1\":{\"55\":1}}],[\"红豆\",{\"1\":{\"55\":1}}],[\"演员\",{\"1\":{\"55\":1}}],[\"小兰\",{\"1\":{\"101\":1}}],[\"小米\",{\"1\":{\"71\":2}}],[\"小旋风\",{\"1\":{\"55\":1}}],[\"小写表示相对定位\",{\"1\":{\"34\":1}}],[\"歌手\",{\"1\":{\"55\":1}}],[\"车手\",{\"1\":{\"55\":1}}],[\"t是我们给这个类型起的名字\",{\"1\":{\"210\":1}}],[\"t\",{\"1\":{\"210\":2,\"214\":1,\"215\":2,\"216\":1}}],[\"targets\",{\"1\":{\"195\":1,\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"target\",{\"1\":{\"186\":3,\"192\":1,\"267\":1}}],[\"tags\",{\"1\":{\"55\":2}}],[\"tuple\",{\"1\":{\"178\":2}}],[\"ts添加属性修饰符\",{\"1\":{\"207\":2}}],[\"ts中属性具有三种修饰符\",{\"1\":{\"199\":1}}],[\"ts中新增类型\",{\"1\":{\"178\":1}}],[\"ts无法直接转换\",{\"1\":{\"195\":1}}],[\"ts测试\",{\"1\":{\"191\":1}}],[\"ts$\",{\"1\":{\"191\":1,\"195\":1}}],[\"ts加载器\",{\"1\":{\"190\":1}}],[\"ts编译器\",{\"1\":{\"190\":1}}],[\"ts编译器会自动监视文件的变化\",{\"1\":{\"180\":1}}],[\"ts编译器会自动判断变量的类型\",{\"1\":{\"178\":1}}],[\"ts编译器会自动检查值是否符合类型声明\",{\"1\":{\"178\":1}}],[\"ts同样也可以结合构建工具一起使用\",{\"1\":{\"188\":1}}],[\"ts\",{\"1\":{\"180\":1,\"185\":9,\"190\":2,\"191\":3,\"195\":1}}],[\"tsconfig\",{\"1\":{\"181\":2}}],[\"tsc\",{\"1\":{\"180\":1,\"181\":1,\"185\":1}}],[\"ts新增类型\",{\"1\":{\"178\":1}}],[\"ts拥有自动的类型判断机制\",{\"1\":{\"178\":1}}],[\"time\",{\"1\":{\"93\":1}}],[\"title\",{\"1\":{\"93\":1,\"191\":1}}],[\"title>\",{\"1\":{\"80\":2,\"87\":2,\"149\":1,\"165\":1}}],[\"t0\",{\"1\":{\"87\":2}}],[\"tree\",{\"0\":{\"259\":1},\"1\":{\"259\":1}}],[\"trident+\",{\"1\":{\"161\":1}}],[\"trident\",{\"1\":{\"161\":1}}],[\"trimright\",{\"1\":{\"96\":1}}],[\"trimleft\",{\"1\":{\"96\":1}}],[\"trimstart\",{\"1\":{\"96\":2}}],[\"trimstart和\",{\"0\":{\"96\":1}}],[\"trimend\",{\"0\":{\"96\":1},\"1\":{\"96\":2}}],[\"try\",{\"1\":{\"87\":1}}],[\"trunc\",{\"0\":{\"77\":1},\"1\":{\"78\":3}}],[\"true\",{\"1\":{\"66\":1,\"78\":1,\"88\":3,\"114\":1,\"136\":3,\"178\":2,\"186\":3,\"192\":1,\"237\":4,\"241\":2,\"242\":3,\"244\":6,\"247\":4,\"253\":2,\"254\":1,\"260\":2,\"261\":1,\"262\":3,\"267\":4,\"268\":5}}],[\"txt\",{\"1\":{\"68\":5,\"87\":1}}],[\"terserwebpackplugin\",{\"1\":{\"268\":1}}],[\"terserplugin\",{\"1\":{\"230\":1}}],[\"teach\",{\"1\":{\"80\":4}}],[\"test<number\",{\"1\":{\"214\":1}}],[\"test<number>\",{\"1\":{\"213\":1}}],[\"test<t\",{\"1\":{\"214\":1,\"216\":1}}],[\"test<t>\",{\"1\":{\"210\":1}}],[\"test函数有一个参数类型不确定\",{\"1\":{\"208\":1}}],[\"tests\",{\"1\":{\"182\":1}}],[\"test3\",{\"1\":{\"136\":1}}],[\"test\",{\"1\":{\"79\":2,\"129\":6,\"131\":3,\"134\":4,\"143\":3,\"147\":2,\"155\":3,\"191\":1,\"193\":2,\"195\":1,\"207\":1,\"208\":1,\"212\":1,\"233\":2,\"235\":6,\"236\":1,\"237\":5,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":3,\"244\":6,\"252\":5,\"253\":1,\"254\":1,\"260\":5,\"261\":2,\"265\":2,\"268\":1}}],[\"test2\",{\"1\":{\"68\":1,\"79\":2,\"136\":3,\"138\":1}}],[\"test1\",{\"1\":{\"68\":1,\"136\":3,\"138\":1}}],[\"text\",{\"1\":{\"68\":3,\"87\":1,\"91\":2,\"165\":1}}],[\"template\",{\"1\":{\"56\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":3,\"244\":2,\"255\":1,\"256\":1}}],[\"types\",{\"1\":{\"185\":1}}],[\"typescript打包\",{\"0\":{\"187\":1}}],[\"typescript中的基本类型\",{\"1\":{\"178\":1}}],[\"typescript相关\",{\"0\":{\"177\":1}}],[\"typescript\",{\"0\":{\"175\":1},\"1\":{\"190\":2},\"2\":{\"176\":1}}],[\"type\",{\"1\":{\"90\":1,\"232\":1,\"235\":1,\"236\":1,\"237\":3,\"244\":2,\"252\":2}}],[\"type=\",{\"1\":{\"80\":2,\"81\":1,\"165\":1}}],[\"typeerror\",{\"1\":{\"71\":1}}],[\"typedarray\",{\"1\":{\"66\":1}}],[\"typeof\",{\"1\":{\"63\":1,\"69\":1,\"105\":1,\"115\":1,\"143\":1}}],[\"tfboys\",{\"1\":{\"61\":2}}],[\"that\",{\"1\":{\"155\":2}}],[\"thread\",{\"1\":{\"254\":2}}],[\"three\",{\"1\":{\"55\":1,\"67\":4}}],[\"throw\",{\"1\":{\"68\":1,\"87\":1,\"178\":1}}],[\"then\",{\"1\":{\"68\":8,\"87\":2,\"104\":1,\"260\":1,\"261\":1,\"262\":1}}],[\"this===\",{\"1\":{\"141\":1}}],[\"this==\",{\"1\":{\"141\":1}}],[\"this是什么\",{\"1\":{\"131\":1}}],[\"this\",{\"0\":{\"202\":1},\"1\":{\"58\":6,\"66\":5,\"71\":17,\"101\":6,\"131\":1,\"136\":1,\"149\":1,\"155\":5,\"157\":5,\"158\":14,\"165\":1,\"178\":2,\"197\":4,\"198\":4,\"199\":12,\"200\":3,\"203\":3,\"204\":3,\"206\":1,\"207\":7,\"215\":1}}],[\"third\",{\"1\":{\"55\":1}}],[\"two\",{\"1\":{\"55\":1,\"67\":4}}],[\"tools\",{\"1\":{\"201\":3}}],[\"tostring\",{\"1\":{\"65\":1,\"68\":3,\"87\":1,\"115\":1,\"136\":2}}],[\"tostringtag\",{\"1\":{\"65\":1}}],[\"to\",{\"0\":{\"36\":1,\"37\":1,\"38\":1,\"39\":1},\"1\":{\"40\":1}}],[\"toprimitive\",{\"1\":{\"65\":1}}],[\"top\",{\"1\":{\"11\":1,\"68\":3,\"87\":2}}],[\"林志颖\",{\"1\":{\"55\":1}}],[\"郭富城\",{\"1\":{\"55\":1}}],[\"黎明\",{\"1\":{\"55\":1}}],[\"刘德华\",{\"1\":{\"55\":1}}],[\"张学友\",{\"1\":{\"55\":1}}],[\"对样式做兼容性处理\",{\"1\":{\"244\":1}}],[\"对于一些不希望被任意修改的属性\",{\"1\":{\"200\":1}}],[\"对于例如\",{\"1\":{\"195\":1}}],[\"对应\",{\"1\":{\"145\":1}}],[\"对局部数据进行预处理\",{\"1\":{\"141\":1}}],[\"对全局数据进行预处理\",{\"1\":{\"141\":1}}],[\"对匹配进行筛选\",{\"1\":{\"92\":1}}],[\"对父类方法的重写\",{\"1\":{\"71\":1}}],[\"对数组进行解包\",{\"1\":{\"61\":1}}],[\"对象只有包含接口中定义的所有属性和方法时才能匹配接口\",{\"1\":{\"206\":1}}],[\"对象实质上就是属性和方法的容器\",{\"1\":{\"199\":1}}],[\"对象没有一个具体的类型\",{\"1\":{\"157\":1}}],[\"对象字面量模式\",{\"1\":{\"157\":1}}],[\"对象创建模式\",{\"0\":{\"157\":1}}],[\"对象高级\",{\"0\":{\"156\":1}}],[\"对象类型\",{\"1\":{\"116\":1}}],[\"对象合并\",{\"1\":{\"90\":1}}],[\"对象方法扩展\",{\"0\":{\"88\":1},\"1\":{\"88\":1}}],[\"对象扩展\",{\"0\":{\"79\":1},\"1\":{\"79\":1}}],[\"对象上面\",{\"1\":{\"76\":1}}],[\"对象三种状态\",{\"1\":{\"68\":1}}],[\"对象\",{\"0\":{\"123\":1},\"1\":{\"68\":1,\"87\":1,\"106\":1,\"119\":1,\"122\":1}}],[\"对象进行\",{\"1\":{\"65\":1}}],[\"对象的属性是可以任意的修改的\",{\"1\":{\"199\":1}}],[\"对象的隐式原型的值为其对应构造函数的显式原型的值\",{\"1\":{\"135\":1}}],[\"对象的组成\",{\"0\":{\"126\":1}}],[\"对象的合并\",{\"1\":{\"79\":2}}],[\"对象的方法\",{\"1\":{\"79\":1}}],[\"对象的then方法\",{\"1\":{\"68\":1}}],[\"对象的状态就会变成成功\",{\"1\":{\"68\":1}}],[\"对象的\",{\"1\":{\"65\":1,\"135\":1}}],[\"对象的解构赋值\",{\"1\":{\"55\":1}}],[\"对象属\",{\"1\":{\"63\":1}}],[\"对象解构赋值\",{\"1\":{\"51\":1}}],[\"对变量进行赋值\",{\"1\":{\"55\":1}}],[\"从下到上\",{\"1\":{\"233\":1}}],[\"从右到左\",{\"1\":{\"233\":1}}],[\"从打包优化和压缩\",{\"1\":{\"229\":1}}],[\"从任务队列中循环取出回调函数放入执行栈中处理\",{\"1\":{\"164\":1}}],[\"从内到外\",{\"1\":{\"146\":1}}],[\"从数组和对象中提取值\",{\"1\":{\"55\":1}}],[\"从es6开始\",{\"1\":{\"51\":1}}],[\"标记\",{\"1\":{\"93\":1}}],[\"标识内存可以再分配使用\",{\"1\":{\"119\":1}}],[\"标识\",{\"1\":{\"56\":1}}],[\"标识符一般为大写\",{\"1\":{\"54\":1}}],[\"标准化的脚本程序设计语言\",{\"1\":{\"49\":1}}],[\"声明为static的属性或方法不再属于实例\",{\"1\":{\"199\":1}}],[\"声明\",{\"1\":{\"140\":1}}],[\"声明变量和函数或创建对象时\",{\"1\":{\"119\":1}}],[\"声明两个promise对象\",{\"1\":{\"102\":1}}],[\"声明子类的方法\",{\"1\":{\"71\":1}}],[\"声明类\",{\"1\":{\"71\":1}}],[\"声明一个字符串\",{\"1\":{\"91\":1}}],[\"声明一个\",{\"1\":{\"87\":1}}],[\"声明一个数组\",{\"1\":{\"66\":1}}],[\"声明一个对象\",{\"1\":{\"64\":1}}],[\"声明必须赋初始值\",{\"1\":{\"54\":1}}],[\"声明有以下特点\",{\"1\":{\"54\":1}}],[\"声明的变量有几个特点\",{\"1\":{\"53\":1}}],[\"块儿级作用域\",{\"1\":{\"53\":1,\"54\":1}}],[\"注册serviceworker\",{\"1\":{\"262\":2}}],[\"注2\",{\"1\":{\"198\":1}}],[\"注1\",{\"1\":{\"198\":1}}],[\"注意区别\",{\"1\":{\"102\":1}}],[\"注意这里调用方法的时候需要加上default\",{\"1\":{\"80\":1}}],[\"注意这里参数是一个对象\",{\"1\":{\"59\":1}}],[\"注意下面的区别\",{\"1\":{\"79\":1}}],[\"注意\",{\"1\":{\"60\":1,\"71\":2,\"150\":1,\"241\":1,\"247\":1,\"259\":1,\"262\":1}}],[\"注意特别要区分大小写\",{\"1\":{\"34\":1}}],[\"注\",{\"1\":{\"51\":1}}],[\"动物在叫~\",{\"1\":{\"205\":1}}],[\"动态导入模块\",{\"1\":{\"104\":1}}],[\"动态import导入\",{\"0\":{\"104\":1}}],[\"动态指向下一个版本\",{\"1\":{\"51\":1}}],[\"动画\",{\"1\":{\"26\":1}}],[\"n均可以获取到对应的值\",{\"1\":{\"138\":1}}],[\"null定义且赋值了\",{\"1\":{\"116\":1}}],[\"null\",{\"1\":{\"88\":1,\"114\":2,\"115\":2,\"136\":1}}],[\"num2\",{\"1\":{\"201\":2}}],[\"num1\",{\"1\":{\"201\":2}}],[\"number\",{\"0\":{\"73\":1,\"75\":2,\"76\":2,\"78\":1},\"1\":{\"73\":1,\"75\":2,\"76\":1,\"78\":23,\"105\":1,\"114\":1,\"165\":7,\"178\":11,\"197\":2,\"198\":6,\"199\":9,\"201\":2,\"203\":2,\"204\":2,\"207\":5,\"216\":2}}],[\"num\",{\"1\":{\"58\":2,\"178\":1,\"198\":6,\"207\":4}}],[\"npx\",{\"1\":{\"81\":2,\"237\":3}}],[\"npm\",{\"1\":{\"81\":2,\"82\":1,\"189\":1,\"190\":1,\"195\":1,\"231\":1,\"233\":1,\"234\":1,\"235\":1,\"237\":1,\"238\":2,\"239\":3,\"240\":4,\"241\":2,\"242\":6,\"244\":1,\"254\":1,\"256\":1,\"262\":2}}],[\"navigator全局变量\",{\"1\":{\"262\":1}}],[\"navigator\",{\"1\":{\"262\":2}}],[\"nan与任何数值做===比较都是false\",{\"1\":{\"79\":1}}],[\"nan\",{\"1\":{\"75\":1,\"78\":2,\"79\":6}}],[\"namedmodulesplugin\",{\"1\":{\"230\":1}}],[\"namedchunksplugin\",{\"1\":{\"230\":1}}],[\"name2\",{\"1\":{\"155\":3}}],[\"name\",{\"1\":{\"55\":6,\"57\":2,\"58\":1,\"64\":3,\"66\":1,\"70\":1,\"71\":6,\"79\":3,\"88\":3,\"95\":2,\"101\":6,\"155\":3,\"157\":17,\"158\":13,\"178\":1,\"197\":5,\"198\":9,\"199\":30,\"200\":12,\"203\":5,\"204\":5,\"206\":6,\"207\":8,\"235\":1,\"237\":2,\"244\":2,\"252\":2,\"256\":5,\"260\":2,\"264\":3,\"268\":3}}],[\"n\",{\"1\":{\"68\":1,\"80\":5,\"105\":3,\"138\":5,\"155\":2,\"165\":4}}],[\"never\",{\"1\":{\"178\":3}}],[\"new\",{\"1\":{\"68\":9,\"69\":8,\"70\":2,\"71\":9,\"87\":6,\"88\":1,\"95\":1,\"101\":1,\"102\":2,\"129\":1,\"131\":1,\"135\":1,\"136\":1,\"138\":3,\"157\":2,\"158\":3,\"165\":1,\"178\":1,\"191\":2,\"197\":1,\"199\":3,\"200\":1,\"203\":1,\"204\":1,\"207\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":2,\"238\":2,\"239\":2,\"240\":3,\"241\":2,\"242\":6,\"244\":6,\"255\":1,\"256\":4,\"258\":1,\"262\":1,\"268\":1}}],[\"next\",{\"1\":{\"51\":1,\"66\":10,\"67\":19,\"178\":1,\"260\":1}}],[\"nosources\",{\"1\":{\"249\":3}}],[\"no\",{\"1\":{\"193\":1}}],[\"nounusedparameters\",{\"1\":{\"186\":1}}],[\"nounusedlocals\",{\"1\":{\"186\":1}}],[\"nofallthroughcasesinswitch\",{\"1\":{\"186\":1}}],[\"noimplicitreturns\",{\"1\":{\"186\":1}}],[\"noimplicitthis\",{\"1\":{\"186\":1}}],[\"noimplicitany\",{\"1\":{\"186\":1}}],[\"noemitonerrorsplugin\",{\"1\":{\"230\":1}}],[\"noemitonerror\",{\"1\":{\"186\":1}}],[\"noemit\",{\"1\":{\"186\":1}}],[\"node\",{\"1\":{\"183\":1,\"191\":1,\"195\":1,\"230\":2,\"239\":1,\"240\":1,\"241\":2,\"242\":6,\"244\":5,\"252\":1,\"253\":1,\"254\":1,\"260\":1,\"264\":1,\"265\":1,\"266\":2,\"267\":1,\"268\":2}}],[\"nodejs的变量\",{\"1\":{\"233\":1}}],[\"nodejs\",{\"1\":{\"80\":1,\"232\":1}}],[\"nodelist\",{\"1\":{\"66\":1}}],[\"notsure\",{\"1\":{\"178\":2}}],[\"not\",{\"1\":{\"71\":1,\"143\":1,\"147\":1,\"239\":2,\"240\":2,\"275\":1}}],[\"nokia\",{\"1\":{\"71\":7}}],[\"none\",{\"1\":{\"24\":2,\"40\":1,\"41\":1,\"186\":1,\"267\":1}}],[\"nowrap\",{\"1\":{\"14\":2,\"15\":1}}],[\"幂运算符\",{\"1\":{\"51\":1}}],[\"日期方法\",{\"1\":{\"51\":1}}],[\"数值\",{\"1\":{\"115\":1,\"165\":1}}],[\"数值扩展\",{\"0\":{\"72\":1},\"1\":{\"78\":1}}],[\"数值越小\",{\"1\":{\"20\":1}}],[\"数据的特点\",{\"1\":{\"118\":1}}],[\"数据下标\",{\"1\":{\"114\":1}}],[\"数据类型\",{\"0\":{\"113\":1},\"1\":{\"116\":1}}],[\"数据结构\",{\"1\":{\"70\":1}}],[\"数据\",{\"0\":{\"117\":1,\"121\":1},\"1\":{\"68\":1,\"118\":1}}],[\"数据库操作\",{\"1\":{\"67\":1}}],[\"数组一样的\",{\"1\":{\"90\":1}}],[\"数组去重\",{\"1\":{\"69\":1}}],[\"数组的解构赋值\",{\"1\":{\"55\":1}}],[\"数组方法\",{\"1\":{\"51\":1}}],[\"数组扩展\",{\"1\":{\"51\":1}}],[\"数组解构赋值等等\",{\"1\":{\"51\":1}}],[\"数组\",{\"1\":{\"51\":1}}],[\"过于激进\",{\"1\":{\"51\":1}}],[\"开启缓存\",{\"1\":{\"268\":1}}],[\"开启production模式\",{\"1\":{\"259\":1}}],[\"开启多进程打包\",{\"1\":{\"254\":1,\"268\":1}}],[\"开启babel缓存\",{\"1\":{\"253\":1,\"254\":1}}],[\"开启hmr功能\",{\"1\":{\"247\":1,\"267\":1}}],[\"开发\",{\"1\":{\"249\":1}}],[\"开发服务器\",{\"1\":{\"237\":2}}],[\"开发环境性能优化配置\",{\"0\":{\"245\":1}}],[\"开发环境配置主要是为了能让代码运行\",{\"1\":{\"232\":1}}],[\"开发环境\",{\"1\":{\"232\":1,\"249\":1}}],[\"开发中还经常需要结合babel来对代码进行转换\",{\"1\":{\"195\":1}}],[\"开发和认可电信和计算机标准\",{\"1\":{\"48\":1}}],[\"开始执行\",{\"1\":{\"141\":1}}],[\"开始执行全局代码\",{\"1\":{\"141\":1}}],[\"开始支持\",{\"1\":{\"51\":1}}],[\"格式化输出等\",{\"1\":{\"51\":1}}],[\"较小改动\",{\"1\":{\"51\":1}}],[\"制定了语言的基本语法\",{\"1\":{\"51\":1}}],[\"年\",{\"1\":{\"51\":10}}],[\"年后该\",{\"1\":{\"48\":1}}],[\"版本号比年份最后一位大1\",{\"1\":{\"51\":1}}],[\"版\",{\"1\":{\"51\":10}}],[\"第三方库不用检查\",{\"1\":{\"241\":1}}],[\"第三个元素是第二个\",{\"1\":{\"91\":1}}],[\"第三步\",{\"1\":{\"81\":1}}],[\"第六步\",{\"1\":{\"81\":1}}],[\"第五步\",{\"1\":{\"81\":1}}],[\"第四步\",{\"1\":{\"81\":1}}],[\"第二种\",{\"1\":{\"178\":1}}],[\"第二个元素是第一个\",{\"1\":{\"91\":1}}],[\"第二步\",{\"1\":{\"81\":1,\"82\":1}}],[\"第二次调用next\",{\"1\":{\"67\":1}}],[\"第一种\",{\"1\":{\"178\":1}}],[\"第一个元素是所匹配的所有字符串\",{\"1\":{\"91\":1}}],[\"第一步\",{\"1\":{\"81\":1,\"82\":1}}],[\"第一次调用对象的\",{\"1\":{\"66\":1}}],[\"第一行在下方\",{\"1\":{\"14\":1}}],[\"第一行在上方\",{\"1\":{\"14\":1}}],[\"第\",{\"1\":{\"51\":10}}],[\"所谓的类可以理解为对象的模型\",{\"1\":{\"196\":1}}],[\"所有资源引入公共路径前缀\",{\"1\":{\"264\":1}}],[\"所有入口文件最终只会形成一个chunk\",{\"1\":{\"263\":1}}],[\"所有入口文件最终会形成一个chunk\",{\"1\":{\"263\":1}}],[\"所有的构建工具都是基于nodejs平台运行的模块化\",{\"1\":{\"233\":1}}],[\"所有构建工具都是基于\",{\"1\":{\"232\":1}}],[\"所有src目录和tests目录下的文件都会被编译\",{\"1\":{\"182\":1}}],[\"所有代码没有副作用\",{\"1\":{\"259\":1}}],[\"所有代码都是在此空间中执行的\",{\"1\":{\"164\":1}}],[\"所有代码分类\",{\"1\":{\"164\":1}}],[\"所有函数都是function实例\",{\"1\":{\"136\":1}}],[\"所有函数内部都有一个变量this\",{\"1\":{\"131\":1}}],[\"所有标准列表查看\",{\"1\":{\"50\":1}}],[\"所以同属于一个chunk\",{\"1\":{\"258\":1}}],[\"所以在生产环境不用内联\",{\"1\":{\"249\":1}}],[\"所以泛型其实很好理解\",{\"1\":{\"210\":1}}],[\"所以如果你的变量的声明和赋值时同时进行的\",{\"1\":{\"178\":1}}],[\"所以可以使用\",{\"1\":{\"69\":1,\"70\":1}}],[\"所以可以放在一起讨论\",{\"1\":{\"37\":1}}],[\"所以我们这时使用到了symbol\",{\"1\":{\"64\":1}}],[\"所以\",{\"1\":{\"16\":1,\"18\":1,\"81\":1,\"165\":1}}],[\"而生产环境的配置需要考虑以下几个方面\",{\"1\":{\"237\":1}}],[\"而html\",{\"1\":{\"235\":1}}],[\"而是属于类的属性\",{\"1\":{\"199\":1}}],[\"而不是重新打包模块\",{\"1\":{\"268\":1}}],[\"而不是打包所有模块\",{\"1\":{\"247\":1}}],[\"而不是在函数调用时\",{\"1\":{\"145\":1}}],[\"而不采用多线程模式\",{\"1\":{\"163\":1}}],[\"而f作为function的实例对象\",{\"1\":{\"138\":1}}],[\"而构造函数f的显式原型又指向了空object对象\",{\"1\":{\"138\":1}}],[\"而\",{\"1\":{\"50\":1}}],[\"而复杂图形的绘制则需要使用\",{\"1\":{\"27\":1}}],[\"国际制定了许多标准\",{\"1\":{\"50\":1}}],[\"国际通过\",{\"1\":{\"49\":1}}],[\"国际\",{\"1\":{\"48\":1}}],[\"造商协会\",{\"1\":{\"48\":1}}],[\"gzip压缩\",{\"1\":{\"237\":2,\"267\":1}}],[\"green\",{\"1\":{\"178\":6}}],[\"groups\",{\"1\":{\"91\":3}}],[\"grow\",{\"1\":{\"21\":1,\"24\":2}}],[\"grow属性为2\",{\"1\":{\"21\":1}}],[\"grow属性都为1\",{\"1\":{\"21\":1}}],[\"grow属性定义项目的放大比例\",{\"1\":{\"21\":1}}],[\"grow属性\",{\"0\":{\"21\":1}}],[\"global\",{\"1\":{\"143\":2,\"264\":1}}],[\"globalthis\",{\"1\":{\"106\":1}}],[\"globalthis对象\",{\"0\":{\"106\":1}}],[\"gb\",{\"1\":{\"143\":1}}],[\"girl\",{\"1\":{\"101\":6}}],[\"gs\",{\"1\":{\"93\":1}}],[\"goods\",{\"1\":{\"67\":2}}],[\"gecko\",{\"1\":{\"161\":1}}],[\"ge\",{\"1\":{\"143\":1}}],[\"getelementsbytagname\",{\"1\":{\"149\":1}}],[\"getelementbyid\",{\"1\":{\"104\":1,\"165\":2,\"261\":1}}],[\"getownpropertydescriptors\",{\"1\":{\"88\":2}}],[\"getorders\",{\"1\":{\"67\":2}}],[\"getprototypeof\",{\"1\":{\"79\":2}}],[\"get\",{\"1\":{\"68\":2,\"70\":3,\"71\":1,\"87\":1,\"88\":1,\"200\":1,\"207\":1}}],[\"getjoke\",{\"1\":{\"68\":3,\"87\":2}}],[\"getgoods\",{\"1\":{\"67\":2}}],[\"getusers\",{\"1\":{\"67\":2}}],[\"getnamefunction\",{\"1\":{\"155\":4}}],[\"getname\",{\"1\":{\"58\":1,\"207\":2}}],[\"generatesw\",{\"1\":{\"262\":1}}],[\"generator\",{\"1\":{\"235\":1,\"237\":2,\"244\":2,\"252\":2}}],[\"generic\",{\"0\":{\"208\":1}}],[\"gen\",{\"1\":{\"67\":8}}],[\"g\",{\"1\":{\"66\":1,\"231\":1,\"262\":1}}],[\"game\",{\"1\":{\"64\":5,\"71\":6}}],[\"gailun\",{\"1\":{\"61\":1}}],[\"guo\",{\"1\":{\"55\":1}}],[\"g>\",{\"1\":{\"40\":1}}],[\"jpg\",{\"1\":{\"264\":2}}],[\"jpg|png|gif\",{\"1\":{\"235\":2,\"237\":1,\"244\":1,\"252\":1}}],[\"jquery\",{\"1\":{\"82\":2,\"255\":2,\"256\":6}}],[\"javascript单线程的本质\",{\"1\":{\"165\":1}}],[\"javascript的主要用途是与用户交互\",{\"1\":{\"163\":1}}],[\"javascript的单线程与他的用途有关\",{\"1\":{\"163\":1}}],[\"javascript\",{\"1\":{\"63\":1,\"73\":1,\"78\":2,\"81\":1}}],[\"jsx\",{\"1\":{\"266\":1}}],[\"js做兼容性配置\",{\"1\":{\"244\":1,\"252\":1}}],[\"js语法检查\",{\"1\":{\"244\":2}}],[\"js兼容性处理\",{\"1\":{\"242\":3,\"244\":1}}],[\"js$\",{\"1\":{\"241\":1,\"242\":3,\"244\":2,\"252\":1,\"253\":1,\"254\":1,\"265\":1}}],[\"js中的css成单独文件\",{\"1\":{\"238\":1,\"239\":1,\"240\":1}}],[\"js中使用jquery\",{\"1\":{\"82\":1}}],[\"js配置文件\",{\"1\":{\"195\":1,\"237\":1}}],[\"js用来使老版本的浏览器支持新版es语法\",{\"1\":{\"195\":1}}],[\"jspm\",{\"1\":{\"183\":1}}],[\"js主线程\",{\"1\":{\"165\":1}}],[\"js是单线程执行的\",{\"0\":{\"163\":1}}],[\"js是单线程的\",{\"1\":{\"162\":1}}],[\"js是单线程\",{\"1\":{\"160\":1}}],[\"js代码马上执行之前创建\",{\"1\":{\"145\":1}}],[\"js引擎执行代码的基本流程\",{\"1\":{\"163\":1,\"164\":1}}],[\"js引擎模块\",{\"1\":{\"161\":1,\"164\":1}}],[\"js引擎如何内存管理\",{\"1\":{\"122\":1}}],[\"js引擎\",{\"1\":{\"119\":1,\"142\":1}}],[\"js知识相关\",{\"0\":{\"111\":1}}],[\"js5201314你知道么555啦啦啦\",{\"1\":{\"92\":1}}],[\"js目录\",{\"1\":{\"81\":1}}],[\"js模块内容\",{\"1\":{\"80\":4}}],[\"json中eslintconfig配置\",{\"1\":{\"262\":1}}],[\"json中配置\",{\"1\":{\"241\":1,\"259\":1}}],[\"json中配置browserslist\",{\"1\":{\"239\":1,\"244\":1}}],[\"json中\",{\"1\":{\"241\":1}}],[\"json中browserslist里面的配置\",{\"1\":{\"239\":1,\"240\":1}}],[\"json中的所有配置信息\",{\"1\":{\"184\":1}}],[\"json添加如下配置\",{\"1\":{\"193\":1}}],[\"json配置\",{\"0\":{\"193\":1}}],[\"json文件\",{\"1\":{\"189\":1,\"256\":1}}],[\"json是一个json文件\",{\"1\":{\"181\":1}}],[\"json\",{\"1\":{\"51\":1,\"181\":1,\"192\":1,\"224\":1,\"231\":1,\"232\":1,\"241\":1,\"242\":3,\"244\":2,\"256\":3,\"266\":1}}],[\"js\",{\"0\":{\"168\":1,\"241\":1,\"242\":1,\"243\":1},\"1\":{\"80\":8,\"81\":8,\"104\":4,\"165\":2,\"186\":2,\"191\":3,\"195\":2,\"224\":1,\"228\":2,\"232\":13,\"233\":3,\"234\":4,\"235\":5,\"236\":4,\"237\":9,\"238\":4,\"239\":4,\"240\":4,\"241\":5,\"242\":17,\"244\":11,\"247\":10,\"252\":1,\"255\":5,\"256\":11,\"258\":2,\"260\":6,\"261\":1,\"262\":1,\"263\":11,\"264\":4,\"266\":1,\"268\":1},\"2\":{\"43\":1,\"108\":1,\"167\":1,\"169\":1,\"218\":1,\"270\":1}}],[\"join\",{\"1\":{\"39\":4,\"68\":1}}],[\"justify\",{\"0\":{\"16\":1},\"1\":{\"16\":2}}],[\"相应的dll目录\",{\"1\":{\"256\":1}}],[\"相关api\",{\"1\":{\"165\":1}}],[\"相关重要概念\",{\"1\":{\"164\":1}}],[\"相关知识\",{\"1\":{\"160\":1}}],[\"相关问题\",{\"0\":{\"116\":1,\"122\":1},\"1\":{\"160\":1}}],[\"相当于函数的暂停标记\",{\"1\":{\"67\":1}}],[\"相等的椭圆\",{\"1\":{\"37\":1}}],[\"相对于上下文对象\",{\"1\":{\"144\":1}}],[\"相对来说比较简单\",{\"1\":{\"38\":1}}],[\"相对路径节省代码量\",{\"1\":{\"36\":1}}],[\"相对坐标\",{\"1\":{\"34\":1}}],[\"相对与绝对坐标情况\",{\"1\":{\"34\":1}}],[\"与output\",{\"1\":{\"235\":1,\"237\":2,\"244\":2,\"252\":2}}],[\"与解构赋值结合\",{\"1\":{\"59\":1}}],[\"与\",{\"0\":{\"75\":1,\"76\":1},\"1\":{\"37\":1,\"79\":4,\"97\":1}}],[\"与交叉轴两端对齐\",{\"1\":{\"18\":1}}],[\"与交叉轴的中点对齐\",{\"1\":{\"18\":1}}],[\"与交叉轴的终点对齐\",{\"1\":{\"18\":1}}],[\"zibo\",{\"1\":{\"79\":1,\"96\":1}}],[\"zibao\",{\"1\":{\"64\":3}}],[\"zhang\",{\"1\":{\"55\":1}}],[\"z\",{\"1\":{\"36\":3,\"37\":1,\"39\":1,\"41\":2,\"90\":1}}],[\"zj\",{\"1\":{\"10\":1}}],[\"+this\",{\"1\":{\"206\":1}}],[\"+bigint\",{\"1\":{\"105\":2}}],[\"+0\",{\"1\":{\"79\":2}}],[\"+\",{\"1\":{\"36\":67,\"37\":19,\"38\":8,\"39\":7,\"58\":2,\"59\":2,\"78\":3,\"87\":1,\"126\":1,\"143\":5,\"149\":3,\"165\":1,\"178\":1,\"201\":1}}],[\"非数值单位计算\",{\"1\":{\"36\":1,\"37\":1,\"38\":1}}],[\"~\",{\"1\":{\"36\":1,\"268\":1}}],[\"只改动一个文件\",{\"1\":{\"258\":1}}],[\"只隐藏源代码\",{\"1\":{\"249\":1}}],[\"只生成一个内联\",{\"1\":{\"249\":1}}],[\"只会重新打包构建这一个模块\",{\"1\":{\"247\":1}}],[\"只会在内存中编译打包\",{\"1\":{\"237\":3}}],[\"只要解决部分\",{\"1\":{\"242\":3,\"244\":1}}],[\"只要函数定义好了就一直存在\",{\"1\":{\"145\":1}}],[\"只能把错误精确到整行\",{\"1\":{\"249\":1}}],[\"只能提示到构建后代码的错误位置\",{\"1\":{\"249\":1}}],[\"只能处理非入口\",{\"1\":{\"247\":1}}],[\"只能转换基本语法\",{\"1\":{\"242\":3,\"244\":1}}],[\"只能在开发模式下使用\",{\"1\":{\"247\":1}}],[\"只能在\",{\"1\":{\"207\":2}}],[\"只能在类的内部修改\",{\"1\":{\"207\":2}}],[\"只检查src下的js文件\",{\"1\":{\"265\":1}}],[\"只检查\",{\"1\":{\"241\":1}}],[\"只读属性\",{\"1\":{\"199\":1}}],[\"只需要在\",{\"1\":{\"247\":1}}],[\"只需要将\",{\"1\":{\"36\":1}}],[\"只需只需\",{\"1\":{\"181\":1}}],[\"只有工作消耗比较长\",{\"1\":{\"254\":1}}],[\"只有这个模块会重新打包构建\",{\"1\":{\"247\":1}}],[\"只有需要编译的文件少时才会用到\",{\"1\":{\"185\":1}}],[\"只有当初始化代码执行完成后\",{\"1\":{\"164\":1}}],[\"只有函数是可以执行的\",{\"1\":{\"129\":1}}],[\"只是其中的一个\",{\"1\":{\"50\":1}}],[\"只是由\",{\"1\":{\"36\":1}}],[\"个按钮被点击了`\",{\"1\":{\"149\":3}}],[\"个内置的\",{\"1\":{\"65\":1}}],[\"个线段构成\",{\"1\":{\"36\":2}}],[\"个弧和\",{\"1\":{\"36\":1}}],[\"绝对坐标\",{\"1\":{\"34\":1}}],[\"来替换所有这些\",{\"1\":{\"232\":1}}],[\"来获取对象的所有键名\",{\"1\":{\"63\":1}}],[\"来实现\",{\"1\":{\"34\":1}}],[\"来定义路径\",{\"1\":{\"34\":1}}],[\"vendor\",{\"1\":{\"268\":1}}],[\"vendors~xxx\",{\"1\":{\"268\":1}}],[\"version\",{\"1\":{\"239\":3,\"240\":3,\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"vue3\",{\"0\":{\"273\":1}}],[\"vue2\",{\"0\":{\"271\":1}}],[\"vue\",{\"0\":{\"219\":1},\"1\":{\"256\":1},\"2\":{\"220\":1,\"272\":1,\"274\":1}}],[\"void\",{\"1\":{\"178\":3,\"205\":1,\"206\":2}}],[\"values\",{\"1\":{\"88\":2}}],[\"value=>\",{\"1\":{\"68\":1,\"87\":1}}],[\"value\",{\"1\":{\"66\":3,\"68\":14,\"71\":1,\"87\":3,\"88\":2,\"165\":1,\"207\":4}}],[\"var定义的局部变量==\",{\"1\":{\"141\":1}}],[\"var定义的全局变量==\",{\"1\":{\"141\":1}}],[\"var\",{\"1\":{\"36\":3,\"37\":1,\"38\":1,\"39\":2,\"129\":1,\"135\":1,\"136\":1,\"138\":4,\"140\":2,\"143\":4,\"147\":4,\"149\":7,\"155\":8,\"157\":6,\"158\":1,\"165\":6}}],[\"viewbox=\",{\"1\":{\"41\":1}}],[\"v\",{\"1\":{\"34\":2,\"36\":3,\"66\":4,\"100\":2}}],[\"hot\",{\"1\":{\"247\":6,\"267\":1}}],[\"host\",{\"1\":{\"59\":3,\"79\":2,\"90\":3,\"103\":4,\"267\":1}}],[\"hmr\",{\"1\":{\"247\":7}}],[\"hidden\",{\"1\":{\"249\":2}}],[\"hi\",{\"1\":{\"178\":3}}],[\"history\",{\"1\":{\"55\":2}}],[\"h5规范提供了js分线程的实现\",{\"1\":{\"165\":1}}],[\"h5\",{\"0\":{\"165\":1}}],[\"href=\",{\"1\":{\"91\":3}}],[\"hex\",{\"1\":{\"178\":1}}],[\"hello\",{\"1\":{\"104\":6,\"178\":3,\"183\":1,\"214\":1}}],[\"head>\",{\"1\":{\"80\":2,\"87\":2,\"149\":1,\"165\":1}}],[\"height=\",{\"1\":{\"28\":2,\"40\":2}}],[\"height\",{\"1\":{\"10\":1,\"28\":2,\"36\":7}}],[\"huawei\",{\"1\":{\"71\":6}}],[\"hash值\",{\"1\":{\"258\":1}}],[\"hash\",{\"0\":{\"258\":1},\"1\":{\"235\":2,\"237\":3,\"244\":3,\"252\":3,\"256\":2,\"258\":1}}],[\"has\",{\"1\":{\"69\":5,\"70\":3}}],[\"hasinstance\",{\"1\":{\"65\":1}}],[\"html资源\",{\"1\":{\"236\":1,\"237\":3,\"244\":1,\"252\":1}}],[\"html$\",{\"1\":{\"235\":2,\"237\":1,\"244\":1,\"252\":1}}],[\"htmlwebpackplugin\",{\"1\":{\"191\":2,\"234\":2,\"235\":4,\"236\":2,\"237\":4,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":6,\"244\":4,\"255\":2,\"256\":2}}],[\"html\",{\"0\":{\"234\":1,\"244\":1},\"1\":{\"161\":1,\"190\":1,\"191\":1,\"234\":5,\"235\":6,\"236\":3,\"237\":7,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":6,\"244\":5,\"247\":7,\"252\":1,\"255\":4,\"256\":6}}],[\"html>\",{\"1\":{\"80\":4,\"87\":4,\"149\":2,\"165\":2}}],[\"htm\",{\"1\":{\"50\":1,\"51\":1}}],[\"https\",{\"1\":{\"68\":3,\"87\":2}}],[\"http\",{\"1\":{\"40\":1,\"41\":1,\"50\":1,\"51\":1,\"79\":1,\"91\":2,\"267\":1}}],[\"h\",{\"1\":{\"34\":2,\"36\":7}}],[\"last\",{\"1\":{\"239\":3,\"240\":3}}],[\"laoder\",{\"1\":{\"235\":2}}],[\"lang=\",{\"1\":{\"149\":1,\"165\":1}}],[\"ll\",{\"1\":{\"178\":1}}],[\"load\",{\"1\":{\"262\":1}}],[\"loader配置\",{\"1\":{\"265\":1}}],[\"loader的\",{\"1\":{\"235\":1}}],[\"loader的配置\",{\"1\":{\"233\":1,\"234\":1,\"255\":1,\"256\":1}}],[\"loader引入图片是common\",{\"1\":{\"235\":1}}],[\"loader默认使用es6模块化解析\",{\"1\":{\"235\":1}}],[\"loader处理使用use\",{\"1\":{\"235\":2}}],[\"loader\",{\"0\":{\"228\":1},\"1\":{\"190\":2,\"191\":2,\"195\":6,\"228\":1,\"232\":9,\"233\":8,\"234\":1,\"235\":16,\"236\":5,\"237\":18,\"238\":4,\"239\":10,\"240\":9,\"241\":3,\"242\":10,\"244\":16,\"247\":1,\"249\":1,\"252\":7,\"253\":2,\"254\":5,\"255\":1,\"265\":4}}],[\"lolyfill\",{\"1\":{\"259\":1}}],[\"loop\",{\"1\":{\"164\":1}}],[\"localhost\",{\"1\":{\"79\":1,\"267\":2}}],[\"logging\",{\"1\":{\"267\":1}}],[\"log\",{\"1\":{\"57\":2,\"58\":2,\"59\":5,\"60\":2,\"61\":1,\"63\":3,\"64\":6,\"66\":9,\"67\":20,\"68\":10,\"69\":12,\"70\":5,\"71\":27,\"78\":24,\"79\":6,\"80\":12,\"84\":1,\"85\":2,\"87\":6,\"88\":6,\"90\":4,\"91\":6,\"92\":2,\"93\":3,\"95\":2,\"96\":4,\"97\":6,\"98\":1,\"100\":2,\"101\":7,\"102\":2,\"103\":1,\"105\":8,\"134\":4,\"135\":3,\"136\":9,\"138\":3,\"140\":2,\"143\":7,\"147\":3,\"155\":1,\"158\":2,\"165\":4,\"197\":1,\"199\":3,\"200\":1,\"201\":2,\"203\":1,\"204\":3,\"205\":2,\"206\":2,\"207\":1,\"260\":2,\"261\":1,\"262\":2}}],[\"less$\",{\"1\":{\"233\":1,\"235\":2,\"237\":1,\"244\":1,\"252\":1}}],[\"less\",{\"1\":{\"224\":1,\"233\":2,\"235\":2,\"237\":1,\"244\":1,\"252\":1}}],[\"length\",{\"1\":{\"66\":1,\"149\":9,\"178\":2,\"216\":2}}],[\"let关键字\",{\"0\":{\"53\":1}}],[\"let\",{\"1\":{\"51\":1,\"53\":2,\"55\":4,\"56\":3,\"57\":4,\"58\":6,\"59\":1,\"61\":6,\"63\":5,\"64\":4,\"66\":6,\"67\":13,\"68\":2,\"69\":10,\"70\":2,\"71\":5,\"78\":4,\"80\":3,\"84\":1,\"87\":3,\"88\":1,\"91\":1,\"92\":1,\"93\":3,\"96\":1,\"98\":1,\"100\":2,\"105\":3,\"178\":28}}],[\"limit\",{\"1\":{\"235\":1}}],[\"librarytarget\",{\"1\":{\"264\":1}}],[\"library\",{\"1\":{\"256\":1,\"264\":1}}],[\"lib\",{\"1\":{\"186\":2}}],[\"list\",{\"1\":{\"178\":2}}],[\"li>\",{\"1\":{\"56\":4,\"93\":2,\"100\":2}}],[\"lin\",{\"1\":{\"55\":2}}],[\"linear\",{\"1\":{\"40\":1}}],[\"line2path\",{\"1\":{\"38\":1}}],[\"line绘制直线\",{\"1\":{\"31\":1}}],[\"line\",{\"0\":{\"38\":1},\"1\":{\"26\":1,\"27\":1,\"260\":1}}],[\"li\",{\"1\":{\"55\":1}}],[\"liu\",{\"1\":{\"55\":1}}],[\"lightgrey\",{\"1\":{\"41\":1}}],[\"l215\",{\"1\":{\"40\":3}}],[\"l\",{\"1\":{\"34\":4,\"38\":1,\"39\":2,\"40\":1}}],[\"mul\",{\"1\":{\"261\":2}}],[\"must\",{\"1\":{\"101\":1}}],[\"minchunks\",{\"1\":{\"260\":2,\"268\":2}}],[\"minremainingsize\",{\"1\":{\"260\":1}}],[\"minsize\",{\"1\":{\"260\":1,\"268\":1}}],[\"minify\",{\"1\":{\"244\":2}}],[\"minicssextractplugin\",{\"1\":{\"238\":3,\"239\":3,\"240\":3,\"244\":4,\"258\":1}}],[\"mini\",{\"1\":{\"238\":3,\"239\":3,\"240\":3,\"244\":1}}],[\"minimizer\",{\"1\":{\"268\":1}}],[\"minimize\",{\"1\":{\"191\":1}}],[\"minus\",{\"1\":{\"60\":2}}],[\"media\",{\"1\":{\"237\":1,\"244\":1,\"252\":1}}],[\"message\",{\"1\":{\"178\":2}}],[\"methods\",{\"1\":{\"64\":5}}],[\"moudles\",{\"1\":{\"265\":1}}],[\"moudule\",{\"1\":{\"235\":1}}],[\"mode=production\",{\"1\":{\"232\":1}}],[\"mode=development\",{\"1\":{\"232\":1}}],[\"mode\",{\"0\":{\"230\":1},\"1\":{\"230\":1,\"233\":2,\"234\":1,\"235\":2,\"236\":1,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":3,\"244\":2,\"255\":1,\"256\":2}}],[\"moduleconcatenationplugin\",{\"1\":{\"230\":1}}],[\"modules文件会被打包\",{\"1\":{\"268\":1}}],[\"modules下的文件\",{\"1\":{\"265\":1}}],[\"modules中的代码单独打包成一个chunk最终输出\",{\"1\":{\"260\":1}}],[\"modules\",{\"1\":{\"183\":1,\"191\":1,\"195\":1,\"241\":2,\"242\":6,\"244\":4,\"252\":1,\"253\":1,\"254\":1,\"260\":1,\"266\":3,\"267\":1,\"268\":1}}],[\"module\",{\"0\":{\"265\":1},\"1\":{\"80\":2,\"81\":1,\"104\":2,\"186\":2,\"191\":2,\"192\":1,\"195\":1,\"224\":1,\"232\":1,\"233\":2,\"234\":2,\"235\":4,\"236\":2,\"237\":4,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":6,\"244\":4,\"247\":4,\"249\":6,\"252\":1,\"255\":2,\"256\":3,\"265\":1}}],[\"month\",{\"1\":{\"178\":1}}],[\"myinter表示泛型t必须是myinter的子类\",{\"1\":{\"216\":1}}],[\"myinter>\",{\"1\":{\"216\":1}}],[\"myinter\",{\"1\":{\"216\":1}}],[\"myclass<t>\",{\"1\":{\"215\":1}}],[\"my\",{\"1\":{\"155\":3,\"178\":1}}],[\"myobject\",{\"1\":{\"65\":4}}],[\"m属性\",{\"1\":{\"138\":1}}],[\"m1\",{\"1\":{\"104\":1}}],[\"m2\",{\"1\":{\"70\":2}}],[\"m20\",{\"1\":{\"41\":2}}],[\"maxinitialrequests\",{\"1\":{\"260\":1,\"268\":1}}],[\"maxasyncrequests\",{\"1\":{\"260\":1,\"268\":1}}],[\"maxsize\",{\"1\":{\"235\":1,\"237\":1,\"244\":1,\"252\":1,\"268\":1}}],[\"max+2\",{\"1\":{\"105\":1}}],[\"max+1\",{\"1\":{\"105\":1}}],[\"max\",{\"1\":{\"105\":6}}],[\"manifest\",{\"1\":{\"256\":4}}],[\"mangseng\",{\"1\":{\"90\":2}}],[\"manufacturers\",{\"1\":{\"48\":1}}],[\"master\",{\"1\":{\"90\":1}}],[\"math\",{\"0\":{\"77\":1},\"1\":{\"78\":10,\"85\":1}}],[\"matchall\",{\"0\":{\"100\":1},\"1\":{\"100\":2}}],[\"match\",{\"1\":{\"65\":2}}],[\"map的位置|给出的错误代码信息\",{\"1\":{\"249\":1}}],[\"map集合\",{\"0\":{\"70\":1},\"1\":{\"70\":1}}],[\"map\",{\"0\":{\"249\":1},\"1\":{\"66\":1,\"70\":13,\"88\":4,\"95\":1,\"97\":2,\"191\":1,\"249\":24,\"268\":1}}],[\"main\",{\"1\":{\"23\":1,\"87\":4,\"103\":2,\"260\":1}}],[\"m5\",{\"1\":{\"40\":3}}],[\"m\",{\"1\":{\"34\":5,\"36\":3,\"37\":1,\"38\":1,\"39\":2,\"40\":1,\"70\":8,\"80\":10,\"95\":4,\"105\":2,\"138\":4,\"155\":2}}],[\"通常使用\",{\"1\":{\"232\":1}}],[\"通常情况下\",{\"1\":{\"188\":1}}],[\"通常大部分形状\",{\"1\":{\"34\":1}}],[\"通电\",{\"1\":{\"119\":1}}],[\"通过js代码\",{\"1\":{\"260\":1}}],[\"通过import\",{\"1\":{\"260\":1}}],[\"通过映射可以追踪源代码错误\",{\"1\":{\"249\":1}}],[\"通过配置加载指定的css兼容性样式\",{\"1\":{\"239\":1,\"240\":1}}],[\"通过添加\",{\"1\":{\"232\":1}}],[\"通过在类中添加方法使私有属性可以访问\",{\"1\":{\"207\":2}}],[\"通过继承可以在不修改类的情况下完成对类的扩展\",{\"1\":{\"203\":1}}],[\"通过继承可以将其他类中的属性和方法引入到当前类中\",{\"1\":{\"203\":1}}],[\"通过类即可直接使用\",{\"1\":{\"201\":1}}],[\"通过类型声明可以指定ts中变量\",{\"1\":{\"178\":1}}],[\"通过dog类创建狗的对象\",{\"1\":{\"196\":1}}],[\"通过以下步骤再将babel引入到项目中\",{\"1\":{\"195\":1}}],[\"通过rootdir可以手动指定根目录\",{\"1\":{\"186\":1}}],[\"通过字面量可以确定变量的取值范围\",{\"1\":{\"178\":1}}],[\"通过new创建对象\",{\"1\":{\"157\":1}}],[\"通过工厂函数动态创建对象并返回\",{\"1\":{\"157\":1}}],[\"通过闭包可以让外部操作\",{\"1\":{\"152\":1}}],[\"通过function声明的函数\",{\"1\":{\"140\":1}}],[\"通过var定义\",{\"1\":{\"140\":1}}],[\"通过对匹配结果前面的内容进行判断\",{\"1\":{\"92\":1}}],[\"通过\",{\"1\":{\"71\":1}}],[\"通过属性\",{\"1\":{\"34\":1}}],[\"通用写法\",{\"1\":{\"58\":1}}],[\"ignored\",{\"1\":{\"267\":1}}],[\"id=\",{\"1\":{\"165\":2}}],[\"i++\",{\"1\":{\"149\":3}}],[\"iife\",{\"0\":{\"130\":1}}],[\"i\",{\"1\":{\"81\":1,\"82\":1,\"143\":8,\"149\":15,\"178\":1,\"190\":1,\"195\":1,\"231\":2,\"233\":1,\"234\":1,\"235\":1,\"237\":1,\"238\":2,\"239\":3,\"240\":4,\"241\":2,\"242\":6,\"244\":1,\"254\":1,\"256\":1,\"262\":2}}],[\"iterator1\",{\"1\":{\"66\":2}}],[\"iterator\",{\"1\":{\"65\":2,\"66\":13,\"67\":19,\"69\":1}}],[\"item\",{\"1\":{\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"69\":4,\"97\":6}}],[\"items\",{\"1\":{\"17\":1}}],[\"items属性定义项目在交叉轴上如何对齐\",{\"1\":{\"17\":1}}],[\"items属性\",{\"0\":{\"17\":1},\"1\":{\"25\":2}}],[\"isdone\",{\"1\":{\"178\":1}}],[\"isinteger\",{\"0\":{\"78\":1},\"1\":{\"78\":5}}],[\"isfinite\",{\"0\":{\"75\":1},\"1\":{\"75\":1,\"78\":5}}],[\"is\",{\"1\":{\"71\":1,\"79\":4,\"143\":1,\"147\":1,\"178\":3}}],[\"isconcatspreadable\",{\"1\":{\"65\":2}}],[\"isnan\",{\"0\":{\"75\":1},\"1\":{\"36\":1,\"37\":1,\"38\":1,\"75\":1,\"78\":3}}],[\"image\",{\"1\":{\"244\":1,\"252\":1}}],[\"immediately\",{\"1\":{\"130\":1}}],[\"implements\",{\"1\":{\"206\":1}}],[\"import\",{\"1\":{\"80\":6,\"82\":1,\"104\":2,\"241\":4,\"242\":6,\"244\":2,\"260\":1,\"261\":1}}],[\"improve\",{\"1\":{\"57\":2}}],[\"imgs\",{\"1\":{\"264\":2}}],[\"img了\",{\"1\":{\"235\":1,\"237\":2,\"244\":2,\"252\":2}}],[\"img\",{\"1\":{\"34\":1,\"36\":1,\"37\":1,\"224\":1,\"232\":1,\"235\":1,\"237\":1}}],[\"ie\",{\"1\":{\"51\":1,\"161\":1,\"195\":1,\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"inline\",{\"1\":{\"191\":1,\"232\":1,\"249\":3}}],[\"include\",{\"1\":{\"182\":1,\"265\":1}}],[\"includes\",{\"0\":{\"84\":1},\"1\":{\"84\":4}}],[\"input\",{\"1\":{\"165\":2}}],[\"invoked\",{\"1\":{\"130\":1}}],[\"interface\",{\"0\":{\"206\":1},\"1\":{\"206\":2,\"216\":1}}],[\"international\",{\"1\":{\"50\":1,\"51\":1}}],[\"integer\",{\"1\":{\"105\":1}}],[\"intro\",{\"1\":{\"101\":2}}],[\"init\",{\"1\":{\"81\":1,\"189\":1,\"231\":1}}],[\"infinity\",{\"1\":{\"78\":1}}],[\"infinite\",{\"1\":{\"40\":1}}],[\"index++\",{\"1\":{\"66\":1}}],[\"index\",{\"1\":{\"66\":3,\"149\":2,\"191\":1,\"232\":4,\"233\":1,\"234\":3,\"235\":4,\"236\":2,\"237\":4,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":7,\"244\":5,\"247\":2,\"255\":3,\"256\":3,\"260\":1,\"263\":8}}],[\"indefinite\",{\"1\":{\"40\":1,\"41\":1}}],[\"instanceof\",{\"1\":{\"65\":1,\"115\":1,\"136\":3}}],[\"in\",{\"1\":{\"63\":1,\"101\":1,\"143\":1,\"262\":1}}],[\"if\",{\"1\":{\"36\":2,\"37\":1,\"38\":1,\"66\":1,\"68\":6,\"87\":3,\"143\":2,\"247\":1,\"262\":1}}],[\"多入口\",{\"1\":{\"260\":1,\"263\":2}}],[\"多进程打包\",{\"0\":{\"254\":1}}],[\"多进程\",{\"1\":{\"160\":1}}],[\"多进程运行\",{\"1\":{\"160\":1}}],[\"多线程运行的\",{\"1\":{\"160\":1}}],[\"多线程\",{\"1\":{\"160\":3}}],[\"多个进程间\",{\"1\":{\"160\":1}}],[\"多个上下级关系的作用域形成的链\",{\"1\":{\"146\":1}}],[\"多个数据的封装体\",{\"1\":{\"124\":1}}],[\"多边形\",{\"0\":{\"33\":1}}],[\"多行\",{\"1\":{\"18\":1}}],[\"终极一班\",{\"1\":{\"66\":1}}],[\"终止命令符或者换行符分隔开\",{\"1\":{\"32\":1,\"33\":1}}],[\"终点的y位置\",{\"1\":{\"31\":1}}],[\"终点的x位置\",{\"1\":{\"31\":1}}],[\"逗号\",{\"1\":{\"32\":1,\"33\":1}}],[\"点集数列\",{\"1\":{\"32\":1,\"33\":1}}],[\"9\",{\"0\":{\"61\":1},\"1\":{\"51\":1,\"97\":1,\"231\":1,\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"95\",{\"1\":{\"32\":1}}],[\"90kg\",{\"1\":{\"101\":1}}],[\"90\",{\"1\":{\"32\":1}}],[\"8\",{\"0\":{\"60\":1},\"1\":{\"51\":1,\"80\":2,\"87\":2,\"97\":1,\"149\":1,\"164\":1,\"165\":1,\"235\":1}}],[\"85\",{\"1\":{\"32\":1}}],[\"80\",{\"1\":{\"32\":1}}],[\"7\",{\"0\":{\"59\":1,\"106\":1,\"155\":1},\"1\":{\"51\":1,\"78\":2,\"97\":2,\"164\":1}}],[\"70\",{\"1\":{\"32\":1,\"33\":1}}],[\"75\",{\"1\":{\"30\":2,\"32\":1,\"40\":1}}],[\"折线的的所有点位置都放在一个points属性中\",{\"1\":{\"32\":1}}],[\"折线\",{\"0\":{\"32\":1}}],[\"它将根据模块的依赖关系进行静态分析\",{\"1\":{\"224\":1}}],[\"它只能被其他类所继承不能用来创建实例\",{\"1\":{\"205\":1}}],[\"它占有一片独有的内存空间\",{\"1\":{\"160\":1}}],[\"它指向函数对象\",{\"1\":{\"134\":1}}],[\"它默认指向一个object空对象\",{\"1\":{\"134\":1}}],[\"它的主要作用就是存储属性和方法\",{\"1\":{\"199\":1}}],[\"它的方向是从下向上的\",{\"1\":{\"146\":1}}],[\"它的隐式原型指向构造函数function的显式原型\",{\"1\":{\"138\":1}}],[\"它的值是调用当前函数的当前对象\",{\"1\":{\"131\":1}}],[\"它的绝大部分功能\",{\"1\":{\"71\":1}}],[\"它的默认值为auto\",{\"1\":{\"23\":1}}],[\"它类似于对象\",{\"1\":{\"70\":1}}],[\"它类似于数组\",{\"1\":{\"69\":1}}],[\"它是一种接口\",{\"1\":{\"66\":1}}],[\"它是\",{\"1\":{\"63\":1}}],[\"它好比\",{\"1\":{\"61\":1}}],[\"它不仅能创建基本形状\",{\"1\":{\"34\":1}}],[\"它们都是由连接一组点集的直线构成\",{\"1\":{\"33\":1}}],[\"它取两个点的位置作为属性\",{\"1\":{\"31\":1}}],[\"是生产环境\",{\"1\":{\"232\":1}}],[\"是开发环境\",{\"1\":{\"232\":1}}],[\"是什么\",{\"0\":{\"224\":1}}],[\"是否生成sourcemap\",{\"1\":{\"186\":1}}],[\"是否删除注释\",{\"1\":{\"186\":1}}],[\"是否对js文件进行检查\",{\"1\":{\"186\":1}}],[\"是否对js文件编译\",{\"1\":{\"186\":1}}],[\"是否可以展开\",{\"1\":{\"65\":1}}],[\"是cpu最小的调度单元\",{\"1\":{\"160\":1}}],[\"是circle元素更通用的形式\",{\"1\":{\"30\":1}}],[\"是程序执行的一个完整流程\",{\"1\":{\"160\":1}}],[\"是进程内的一个独立单元\",{\"1\":{\"160\":1}}],[\"是静态的\",{\"1\":{\"145\":1}}],[\"是\",{\"1\":{\"68\":1,\"73\":1,\"78\":2,\"232\":1}}],[\"是可\",{\"1\":{\"63\":1}}],[\"是一种前端资源构建工具\",{\"1\":{\"224\":1}}],[\"是一种类似于字符串的数据类型\",{\"1\":{\"63\":1}}],[\"是一个\",{\"1\":{\"81\":1}}],[\"是一个构造函数\",{\"1\":{\"68\":1}}],[\"是一系列命令的集合\",{\"1\":{\"34\":1}}],[\"是增强版的字符串\",{\"1\":{\"56\":1}}],[\"是由\",{\"1\":{\"36\":1,\"49\":1}}],[\"是以操作path中两个属性值stroke\",{\"1\":{\"26\":1}}],[\"椭圆可以看成a点到c做180度顺时针画弧\",{\"1\":{\"37\":1}}],[\"椭圆y半径\",{\"1\":{\"30\":1}}],[\"椭圆x半径\",{\"1\":{\"30\":1}}],[\"椭圆\",{\"0\":{\"30\":1}}],[\"椭圆等\",{\"1\":{\"27\":1}}],[\"半径\",{\"1\":{\"29\":1}}],[\"含有4个基本属性用于控制椭圆的形状以及坐标\",{\"1\":{\"30\":1}}],[\"含有3个基本属性用于控制圆形的坐标以及半径\",{\"1\":{\"29\":1}}],[\"含有6个基本属性用于控制矩形的形状以及坐标\",{\"1\":{\"28\":1}}],[\"圆可视为是一种特殊的椭圆\",{\"1\":{\"37\":1}}],[\"圆心y位置\",{\"1\":{\"29\":1,\"30\":1}}],[\"圆心x位置\",{\"1\":{\"29\":1,\"30\":1}}],[\"圆形\",{\"0\":{\"29\":1}}],[\"圆角无效\",{\"1\":{\"28\":1}}],[\"圆角y方向半径\",{\"1\":{\"28\":1}}],[\"圆角x方向半径\",{\"1\":{\"28\":1}}],[\"圆角矩形\",{\"1\":{\"28\":1}}],[\"有几个文件就形成几个chunk\",{\"1\":{\"263\":1}}],[\"有没有公共的文件\",{\"1\":{\"260\":1}}],[\"有错误的情况下不进行编译\",{\"1\":{\"186\":1}}],[\"有些情况下无法确定其中要使用的具体类型\",{\"1\":{\"208\":1}}],[\"有些情况下\",{\"1\":{\"178\":1}}],[\"有一个入口\",{\"1\":{\"260\":1}}],[\"有一个被设置\",{\"1\":{\"28\":1}}],[\"有一个值为0\",{\"1\":{\"28\":1}}],[\"有利于实现路径动画\",{\"1\":{\"26\":1}}],[\"=啦\",{\"1\":{\"92\":1}}],[\"=>`runtime\",{\"1\":{\"268\":1}}],[\"=>\",{\"1\":{\"58\":6,\"67\":9,\"68\":13,\"69\":2,\"78\":1,\"80\":3,\"87\":7,\"90\":1,\"97\":3,\"102\":4,\"104\":1,\"261\":1,\"262\":3}}],[\"==>\",{\"1\":{\"164\":1}}],[\"===\",{\"1\":{\"63\":2,\"78\":1,\"79\":4,\"115\":1,\"134\":2,\"135\":1,\"136\":1,\"138\":1}}],[\"==\",{\"1\":{\"36\":2,\"68\":2,\"87\":1,\"141\":2,\"143\":1,\"145\":2}}],[\"=\",{\"1\":{\"28\":4,\"36\":7,\"37\":1,\"38\":5,\"39\":4,\"55\":6,\"56\":3,\"57\":4,\"58\":6,\"59\":3,\"61\":6,\"63\":5,\"64\":6,\"66\":7,\"67\":13,\"68\":12,\"69\":10,\"70\":2,\"71\":35,\"78\":5,\"79\":4,\"80\":3,\"84\":1,\"87\":9,\"88\":3,\"90\":5,\"91\":5,\"92\":5,\"93\":6,\"95\":3,\"96\":1,\"97\":6,\"98\":1,\"100\":3,\"101\":4,\"102\":4,\"103\":2,\"104\":2,\"105\":3,\"129\":1,\"134\":1,\"135\":1,\"136\":3,\"138\":8,\"140\":2,\"143\":2,\"147\":4,\"149\":14,\"155\":8,\"157\":14,\"158\":19,\"165\":8,\"178\":33,\"191\":4,\"197\":4,\"198\":4,\"199\":15,\"200\":4,\"201\":1,\"203\":3,\"204\":3,\"207\":6,\"215\":1,\"233\":2,\"234\":3,\"235\":6,\"236\":3,\"237\":6,\"238\":4,\"239\":5,\"240\":6,\"241\":4,\"242\":12,\"244\":12,\"255\":3,\"256\":8,\"261\":1}}],[\"都在\",{\"1\":{\"249\":1}}],[\"都会作为模块处理\",{\"1\":{\"224\":1}}],[\"都是object类型\",{\"1\":{\"157\":1}}],[\"都是值\",{\"1\":{\"122\":1}}],[\"都是绝对坐标\",{\"1\":{\"34\":1}}],[\"都可以进行tree\",{\"1\":{\"259\":1}}],[\"都可以获取到\",{\"1\":{\"138\":1}}],[\"都可以做\",{\"1\":{\"71\":1}}],[\"都可以当作键\",{\"1\":{\"70\":1}}],[\"都可以通过指令m\",{\"1\":{\"34\":1}}],[\"都没有设置\",{\"1\":{\"28\":1}}],[\"都将等比例缩小\",{\"1\":{\"22\":1}}],[\"的处理\",{\"1\":{\"247\":1}}],[\"的错误\",{\"1\":{\"241\":1}}],[\"的环境变量\",{\"1\":{\"239\":1,\"240\":1}}],[\"的不同\",{\"1\":{\"237\":1}}],[\"的配置文件\",{\"1\":{\"232\":1}}],[\"的基本语法转化为\",{\"1\":{\"232\":1}}],[\"的文件\",{\"1\":{\"228\":1}}],[\"的类型\",{\"1\":{\"178\":1}}],[\"的请求\",{\"1\":{\"161\":1}}],[\"的对象\",{\"1\":{\"161\":1}}],[\"的对齐方式\",{\"1\":{\"18\":1}}],[\"的函数作用域\",{\"1\":{\"145\":1}}],[\"的变量\",{\"1\":{\"140\":1}}],[\"的显式原型\",{\"1\":{\"138\":1}}],[\"的数据是不能直接共享的\",{\"1\":{\"160\":1}}],[\"的数据不能执行\",{\"1\":{\"129\":1}}],[\"的数组\",{\"1\":{\"88\":1}}],[\"的方式\",{\"0\":{\"128\":1}}],[\"的元素个数\",{\"1\":{\"70\":2}}],[\"的属性和方法\",{\"1\":{\"70\":1}}],[\"的范围不限于字符串\",{\"1\":{\"70\":1}}],[\"的位置没有限制\",{\"1\":{\"67\":1}}],[\"的\",{\"1\":{\"63\":1,\"71\":1,\"87\":1,\"249\":1}}],[\"的值设置为\",{\"1\":{\"230\":2}}],[\"的值是唯一的\",{\"1\":{\"63\":1}}],[\"的值\",{\"1\":{\"58\":2,\"131\":1}}],[\"的规则是\",{\"1\":{\"36\":1}}],[\"的路径``功能非常强大\",{\"1\":{\"34\":1}}],[\"的一半\",{\"1\":{\"28\":2}}],[\"的最大值为\",{\"1\":{\"28\":2}}],[\"的还有如下规则\",{\"1\":{\"28\":1}}],[\"years\",{\"1\":{\"178\":1}}],[\"yellow\",{\"1\":{\"40\":1}}],[\"yield\",{\"1\":{\"67\":14}}],[\"youxi2\",{\"1\":{\"64\":5}}],[\"youxi\",{\"1\":{\"64\":3}}],[\"y3\",{\"1\":{\"39\":2}}],[\"y+ry\",{\"1\":{\"36\":1}}],[\"y2\",{\"1\":{\"31\":1,\"38\":5,\"39\":2}}],[\"y2=\",{\"1\":{\"31\":1}}],[\"y1\",{\"1\":{\"31\":1,\"38\":5,\"39\":2}}],[\"y1=\",{\"1\":{\"31\":1}}],[\"y\",{\"1\":{\"28\":1,\"36\":5,\"189\":1}}],[\"y=\",{\"1\":{\"28\":2,\"40\":1}}],[\"xiaoqu\",{\"1\":{\"79\":1}}],[\"xiyou\",{\"1\":{\"66\":4}}],[\"xmlhttprequest\",{\"1\":{\"68\":2,\"87\":1}}],[\"xmlns=\",{\"1\":{\"40\":1,\"41\":1}}],[\"xhr\",{\"1\":{\"68\":18}}],[\"xxx\",{\"1\":{\"56\":1,\"180\":1}}],[\"x3\",{\"1\":{\"39\":2}}],[\"x2\",{\"1\":{\"31\":1,\"38\":5,\"39\":2}}],[\"x2=\",{\"1\":{\"31\":1}}],[\"x1\",{\"1\":{\"31\":1,\"38\":5,\"39\":2}}],[\"x1=\",{\"1\":{\"31\":1}}],[\"x\",{\"1\":{\"28\":1,\"36\":7,\"78\":2,\"87\":9,\"147\":3,\"178\":2,\"198\":1}}],[\"x=\",{\"1\":{\"28\":2,\"40\":1}}],[\"矩形也是一种多边形\",{\"1\":{\"33\":1}}],[\"矩形的高度\",{\"1\":{\"28\":1}}],[\"矩形的宽度\",{\"1\":{\"28\":1}}],[\"矩形左上角y位置\",{\"1\":{\"28\":1}}],[\"矩形左上角x位置\",{\"1\":{\"28\":1}}],[\"矩形\",{\"0\":{\"28\":1}}],[\"路径没有提示\",{\"1\":{\"266\":1}}],[\"路径导航\",{\"1\":{\"170\":1}}],[\"路径\",{\"0\":{\"34\":1}}],[\"路径绘制完闭合图形\",{\"1\":{\"33\":1}}],[\"路径来实现\",{\"1\":{\"27\":1}}],[\"路径动画\",{\"1\":{\"26\":1}}],[\"这就称为方法的重写\",{\"1\":{\"204\":1}}],[\"这就是所谓的封装\",{\"1\":{\"199\":1}}],[\"这决定了它只能是单线程\",{\"1\":{\"163\":1}}],[\"这种对属性读取或设置的属性被称为属性的存取器\",{\"1\":{\"200\":1}}],[\"这种方式\",{\"1\":{\"149\":1}}],[\"这种操作有点秀啊\",{\"1\":{\"67\":1}}],[\"这时还要用到babel来做转换\",{\"1\":{\"195\":1}}],[\"这时\",{\"1\":{\"138\":1}}],[\"这条链向上查找\",{\"1\":{\"136\":1}}],[\"这个loader取代style\",{\"1\":{\"238\":1,\"239\":1,\"240\":1}}],[\"这个写法引入的时候也会添加好这个路径\",{\"1\":{\"235\":1,\"237\":2,\"244\":2,\"252\":2}}],[\"这个新标准并没有改变\",{\"1\":{\"165\":1}}],[\"这个概念\",{\"1\":{\"71\":1}}],[\"这个promise\",{\"1\":{\"68\":1}}],[\"这个组织的目标是评估\",{\"1\":{\"48\":1}}],[\"这里的<t>就是泛型\",{\"1\":{\"210\":1}}],[\"这里的结果多了一个groups\",{\"1\":{\"91\":1}}],[\"这里将data传入\",{\"1\":{\"67\":3}}],[\"这里需要注意\",{\"1\":{\"28\":1}}],[\"这样\",{\"1\":{\"247\":1}}],[\"这样的书写更加简洁\",{\"1\":{\"57\":1}}],[\"这样可以在一定程度上减少代码量\",{\"1\":{\"26\":1}}],[\"这被称为解构赋值\",{\"1\":{\"55\":1}}],[\"这些形状可以直接用来绘制一些基本的形状\",{\"1\":{\"27\":1}}],[\"不要全屏提示\",{\"1\":{\"267\":1}}],[\"不要显示启动服务器日志信息\",{\"1\":{\"267\":1}}],[\"不需要再多次打包\",{\"1\":{\"256\":1}}],[\"不需要再优化\",{\"1\":{\"247\":1}}],[\"不需要配置\",{\"1\":{\"232\":1}}],[\"不用做\",{\"1\":{\"247\":1}}],[\"不一定非要使用接口类和抽象类同样适用\",{\"1\":{\"216\":1}}],[\"不一定非叫t\",{\"1\":{\"210\":1}}],[\"不可达代码将引起错误\",{\"1\":{\"186\":1}}],[\"不对代码进行编译\",{\"1\":{\"186\":1}}],[\"不是每个浏览器都支持这个新特性\",{\"1\":{\"165\":1}}],[\"不是在调用\",{\"1\":{\"153\":1}}],[\"不足\",{\"1\":{\"165\":1}}],[\"不同文件hash值一定不一样\",{\"1\":{\"258\":1}}],[\"不同文件必须配置不同loader配置\",{\"1\":{\"233\":1}}],[\"不同点在于\",{\"1\":{\"206\":1}}],[\"不同的类可以用来创建不同的对象\",{\"1\":{\"196\":1}}],[\"不同的浏览器可能不一样\",{\"1\":{\"161\":1}}],[\"不同的是\",{\"1\":{\"33\":1}}],[\"不同作用域下同名变量不会有冲突\",{\"1\":{\"144\":1}}],[\"不会自动打包构建\",{\"1\":{\"247\":1}}],[\"不会有任何输出\",{\"1\":{\"237\":2}}],[\"不会查找原型链\",{\"1\":{\"137\":1}}],[\"不会污染外部命名空间\",{\"1\":{\"130\":1}}],[\"不过\",{\"1\":{\"90\":2}}],[\"不断提高行业标准\",{\"1\":{\"70\":1}}],[\"不能追踪源代码错误\",{\"1\":{\"249\":1}}],[\"不能处理\",{\"1\":{\"232\":1}}],[\"不能修改\",{\"1\":{\"199\":2}}],[\"不能通过实例调用\",{\"1\":{\"197\":1}}],[\"不能是任何值\",{\"1\":{\"178\":1}}],[\"不能跨域加载js\",{\"1\":{\"165\":1}}],[\"不能接受\",{\"1\":{\"162\":1}}],[\"不能区别的\",{\"1\":{\"115\":1}}],[\"不能\",{\"1\":{\"63\":1,\"152\":1}}],[\"不能使用\",{\"1\":{\"58\":1}}],[\"不能为负值否则报错\",{\"1\":{\"28\":4}}],[\"不影响作用域链\",{\"1\":{\"53\":1}}],[\"不存在变量提升\",{\"1\":{\"53\":1}}],[\"不允许重复声明\",{\"1\":{\"53\":1,\"54\":1}}],[\"不推荐用绝对路径\",{\"1\":{\"36\":1}}],[\"不仅如此\",{\"1\":{\"26\":1}}],[\"不换行\",{\"1\":{\"14\":1}}],[\"pwa\",{\"0\":{\"262\":1},\"1\":{\"262\":1}}],[\"per\",{\"1\":{\"206\":2,\"207\":3}}],[\"person\",{\"1\":{\"101\":2,\"157\":2,\"158\":6,\"197\":2,\"199\":9,\"200\":2,\"206\":4,\"207\":3}}],[\"pig\",{\"1\":{\"207\":1}}],[\"piggy\",{\"1\":{\"157\":1}}],[\"pi\",{\"1\":{\"201\":2}}],[\"plugins中的css文件\",{\"1\":{\"258\":1}}],[\"plugins的配置\",{\"1\":{\"234\":1,\"255\":1,\"256\":1}}],[\"plugins的二配置\",{\"1\":{\"233\":1}}],[\"plugins\",{\"0\":{\"229\":1},\"1\":{\"191\":1,\"229\":1,\"233\":1,\"234\":2,\"235\":4,\"236\":2,\"237\":5,\"238\":1,\"239\":2,\"240\":2,\"241\":1,\"242\":3,\"244\":3,\"255\":2,\"256\":2}}],[\"plugin\",{\"1\":{\"190\":3,\"191\":2,\"234\":3,\"235\":2,\"236\":1,\"237\":4,\"238\":4,\"239\":3,\"240\":6,\"241\":7,\"242\":12,\"244\":8,\"255\":2,\"256\":4,\"262\":2}}],[\"placeholder=\",{\"1\":{\"165\":1}}],[\"p2\",{\"1\":{\"102\":3,\"157\":1}}],[\"p1\",{\"1\":{\"102\":3,\"157\":1,\"200\":3}}],[\"p>\",{\"1\":{\"93\":4,\"100\":3}}],[\"photo\",{\"1\":{\"71\":6}}],[\"phone\",{\"1\":{\"71\":26}}],[\"prefetch\",{\"1\":{\"261\":1}}],[\"pre\",{\"1\":{\"244\":1,\"252\":1,\"265\":1}}],[\"presets\",{\"1\":{\"195\":1,\"242\":3,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"presets=babel\",{\"1\":{\"81\":1}}],[\"preset\",{\"1\":{\"81\":3,\"195\":3,\"239\":4,\"240\":3,\"242\":10,\"244\":5,\"252\":1,\"253\":1,\"254\":1}}],[\"priority\",{\"1\":{\"260\":2,\"268\":2}}],[\"print\",{\"1\":{\"247\":3}}],[\"private\",{\"1\":{\"199\":4,\"200\":1,\"207\":4}}],[\"price\",{\"1\":{\"71\":25,\"158\":9}}],[\"proxy\",{\"1\":{\"267\":1}}],[\"production\",{\"1\":{\"230\":2,\"233\":1,\"239\":1,\"240\":1,\"244\":3,\"255\":1,\"256\":2}}],[\"process\",{\"1\":{\"230\":2,\"239\":1,\"240\":1,\"244\":1}}],[\"prop\",{\"1\":{\"215\":4}}],[\"property\",{\"1\":{\"158\":2}}],[\"protexted\",{\"1\":{\"207\":1}}],[\"protected\",{\"1\":{\"198\":2,\"199\":4,\"207\":2}}],[\"protp\",{\"1\":{\"135\":1}}],[\"proto\",{\"1\":{\"79\":2,\"135\":3,\"136\":3}}],[\"prototype\",{\"0\":{\"84\":1,\"97\":1,\"98\":1,\"100\":1},\"1\":{\"65\":1,\"68\":2,\"71\":7,\"97\":1,\"98\":1,\"100\":1,\"115\":1,\"134\":4,\"135\":2,\"136\":8,\"138\":4,\"158\":8,\"165\":2}}],[\"promise等es6特性\",{\"1\":{\"195\":1}}],[\"promise对象的结果有async函数执行的返回值决定\",{\"1\":{\"87\":1}}],[\"promise对象的catch方法\",{\"1\":{\"68\":1}}],[\"promise对象\",{\"1\":{\"87\":1}}],[\"promise对象catch方法\",{\"1\":{\"68\":1}}],[\"promise解决回调地狱\",{\"1\":{\"68\":1}}],[\"promise封装ajax请求\",{\"1\":{\"68\":1}}],[\"promise封装读取文件\",{\"1\":{\"68\":2}}],[\"promise\",{\"0\":{\"68\":1,\"102\":1},\"1\":{\"51\":1,\"68\":17,\"87\":8,\"102\":5}}],[\"publicpath\",{\"1\":{\"235\":1,\"237\":2,\"244\":2,\"252\":2,\"256\":1,\"264\":1}}],[\"public\",{\"1\":{\"198\":2,\"199\":4,\"206\":1,\"207\":2}}],[\"publications\",{\"1\":{\"50\":1,\"51\":1}}],[\"push\",{\"1\":{\"68\":1,\"93\":1}}],[\"p\",{\"1\":{\"68\":11,\"87\":2,\"131\":3,\"157\":5,\"197\":2,\"199\":6}}],[\"parallel\",{\"1\":{\"268\":1}}],[\"parser\",{\"1\":{\"185\":1,\"235\":1,\"237\":1,\"244\":1,\"252\":1}}],[\"parsefloat字符串转整数\",{\"1\":{\"78\":2}}],[\"parsefloat\",{\"0\":{\"76\":1},\"1\":{\"76\":1,\"78\":1}}],[\"parseint\",{\"0\":{\"76\":1},\"1\":{\"76\":1,\"78\":3}}],[\"package\",{\"1\":{\"231\":1,\"239\":1,\"241\":2}}],[\"packages\",{\"1\":{\"183\":1}}],[\"pass\",{\"1\":{\"79\":2}}],[\"password\",{\"1\":{\"59\":3,\"90\":1}}],[\"pathrewrite\",{\"1\":{\"267\":1}}],[\"path=\",{\"1\":{\"40\":1,\"41\":1}}],[\"path\",{\"0\":{\"34\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1},\"1\":{\"26\":1,\"27\":1,\"36\":5,\"37\":2,\"38\":2,\"39\":4,\"191\":4,\"233\":2,\"234\":2,\"235\":4,\"236\":2,\"237\":4,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":6,\"244\":4,\"255\":2,\"256\":5,\"258\":1,\"260\":1,\"264\":1}}],[\"post\",{\"1\":{\"265\":1}}],[\"postcssoptions\",{\"1\":{\"239\":1,\"240\":1,\"244\":1}}],[\"postcss\",{\"1\":{\"239\":12,\"240\":9,\"244\":2}}],[\"postmessage\",{\"1\":{\"165\":3}}],[\"pow\",{\"1\":{\"85\":1}}],[\"port\",{\"1\":{\"59\":3,\"79\":2,\"90\":3,\"237\":2,\"247\":1,\"267\":1}}],[\"points\",{\"1\":{\"33\":1,\"39\":8}}],[\"points`\",{\"1\":{\"32\":1}}],[\"points=\",{\"1\":{\"32\":1,\"33\":1}}],[\"polyfill\",{\"1\":{\"242\":9,\"244\":3}}],[\"polygon2path\",{\"1\":{\"39\":1}}],[\"polygon多边形转换\",{\"1\":{\"39\":1}}],[\"polygon多边形的转换为path比较类似\",{\"1\":{\"39\":1}}],[\"polygon折线转换\",{\"1\":{\"39\":1}}],[\"polygon\",{\"0\":{\"39\":1}}],[\"polygon的路径在最后一个点处自动回到第一个点\",{\"1\":{\"33\":1}}],[\"polygon和折线很像\",{\"1\":{\"33\":1}}],[\"polygon六种基本形状用于图形绘制\",{\"1\":{\"27\":1}}],[\"polygon六种基本形状可通过path路径转换实现\",{\"1\":{\"26\":1}}],[\"polyline2path\",{\"1\":{\"39\":1}}],[\"polyline折线\",{\"1\":{\"39\":1}}],[\"polyline是一组连接在一起的直线\",{\"1\":{\"32\":1}}],[\"polyline\",{\"0\":{\"39\":1},\"1\":{\"26\":1,\"27\":1}}],[\"python\",{\"0\":{\"5\":1},\"2\":{\"6\":1}}],[\"eval\",{\"1\":{\"249\":8}}],[\"event\",{\"1\":{\"164\":1,\"165\":5}}],[\"edge\",{\"1\":{\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"employee\",{\"1\":{\"199\":3}}],[\"echo\",{\"1\":{\"193\":1}}],[\"ecmascript\",{\"1\":{\"49\":1,\"51\":1}}],[\"ecma\",{\"0\":{\"109\":1},\"1\":{\"48\":2,\"49\":2,\"50\":3,\"51\":3},\"2\":{\"110\":1}}],[\"ecma相关\",{\"0\":{\"46\":1}}],[\"enforcesizethreshold\",{\"1\":{\"260\":1}}],[\"enforce\",{\"1\":{\"244\":1,\"252\":1,\"265\":2}}],[\"entrypoint\",{\"1\":{\"268\":2}}],[\"entry\",{\"0\":{\"226\":1,\"263\":1},\"1\":{\"191\":1,\"226\":1,\"233\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":4,\"244\":3,\"247\":2,\"255\":1,\"256\":2,\"260\":1,\"263\":4}}],[\"entries是将对象转换成二维数组\",{\"1\":{\"95\":2}}],[\"entries\",{\"1\":{\"88\":3}}],[\"enum\",{\"1\":{\"178\":6}}],[\"enumerable\",{\"1\":{\"88\":1}}],[\"en\",{\"1\":{\"149\":1,\"165\":1}}],[\"enclosing\",{\"1\":{\"101\":1}}],[\"environment\",{\"1\":{\"191\":1}}],[\"env\",{\"1\":{\"81\":3,\"195\":3,\"230\":4,\"239\":6,\"240\":5,\"242\":10,\"244\":7,\"252\":1,\"253\":1,\"254\":1,\"262\":1}}],[\"end\",{\"1\":{\"16\":2,\"17\":2,\"18\":2,\"25\":1,\"143\":2}}],[\"equal\",{\"1\":{\"78\":3}}],[\"epsilon\",{\"0\":{\"73\":1},\"1\":{\"73\":2,\"78\":5}}],[\"externals主要作用是拒绝将某些包打包到文件中\",{\"1\":{\"255\":1}}],[\"externals\",{\"0\":{\"255\":1},\"1\":{\"255\":1}}],[\"extensions\",{\"1\":{\"191\":1,\"241\":1,\"242\":3,\"244\":2,\"266\":1}}],[\"extends\",{\"1\":{\"71\":3,\"184\":1,\"198\":1,\"199\":3,\"203\":1,\"204\":1,\"205\":1,\"207\":1,\"216\":2,\"241\":2,\"242\":3,\"244\":1,\"262\":1}}],[\"extract\",{\"1\":{\"238\":3,\"239\":2,\"240\":2,\"244\":1}}],[\"ext\",{\"1\":{\"235\":2,\"237\":3,\"244\":3,\"252\":3}}],[\"exe\",{\"1\":{\"193\":1}}],[\"execution\",{\"1\":{\"164\":1}}],[\"exec\",{\"1\":{\"91\":2,\"92\":2,\"93\":2}}],[\"exit\",{\"1\":{\"193\":1}}],[\"exclude\",{\"1\":{\"183\":1,\"191\":1,\"195\":1,\"236\":1,\"237\":2,\"241\":2,\"242\":6,\"244\":5,\"252\":2,\"253\":1,\"254\":1,\"265\":1}}],[\"excutor\",{\"1\":{\"68\":1}}],[\"expression\",{\"1\":{\"130\":1}}],[\"exports\",{\"1\":{\"191\":1,\"233\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":3,\"244\":2,\"255\":1,\"256\":2}}],[\"export\",{\"1\":{\"80\":8,\"104\":1}}],[\"error\",{\"1\":{\"68\":1,\"87\":1,\"178\":2,\"193\":1,\"260\":1}}],[\"err\",{\"1\":{\"68\":11,\"87\":3}}],[\"e\",{\"1\":{\"61\":1,\"66\":1,\"90\":1}}],[\"eslint不认识\",{\"1\":{\"262\":1}}],[\"eslintconfig\",{\"1\":{\"241\":2,\"242\":3,\"244\":1,\"262\":1}}],[\"eslintplugin\",{\"1\":{\"241\":2,\"242\":6,\"244\":4}}],[\"eslint\",{\"1\":{\"241\":15,\"242\":15,\"244\":6,\"260\":1,\"265\":1}}],[\"esmodule\",{\"1\":{\"235\":1}}],[\"esnext\",{\"1\":{\"186\":3}}],[\"es2020\",{\"1\":{\"186\":3}}],[\"es2019\",{\"1\":{\"186\":2}}],[\"es2018\",{\"1\":{\"186\":2}}],[\"es2017\",{\"1\":{\"186\":2}}],[\"es2016\",{\"1\":{\"186\":2}}],[\"es2015\",{\"1\":{\"186\":2,\"192\":2}}],[\"es3\",{\"1\":{\"186\":1}}],[\"es11\",{\"0\":{\"99\":1}}],[\"es10\",{\"0\":{\"94\":1}}],[\"es9\",{\"0\":{\"89\":1},\"1\":{\"90\":2,\"92\":1}}],[\"es8\",{\"0\":{\"86\":1}}],[\"es7\",{\"0\":{\"83\":1},\"1\":{\"85\":1,\"186\":2}}],[\"es转换工具\",{\"1\":{\"81\":1}}],[\"es5构造函数继承\",{\"1\":{\"71\":1}}],[\"es5构造函数实现继承\",{\"1\":{\"71\":1}}],[\"es5写法\",{\"1\":{\"71\":2}}],[\"es5\",{\"1\":{\"71\":1,\"186\":2,\"232\":1}}],[\"es6模块化\",{\"1\":{\"235\":1}}],[\"es6模块化引入npm包\",{\"0\":{\"82\":1}}],[\"es6之前\",{\"1\":{\"135\":1}}],[\"es6暴露数据语法汇总\",{\"1\":{\"80\":1}}],[\"es6class类继承\",{\"1\":{\"71\":2}}],[\"es6写法\",{\"1\":{\"71\":2}}],[\"es6\",{\"0\":{\"52\":1},\"1\":{\"55\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"63\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":3,\"74\":1,\"76\":1,\"79\":1,\"80\":1,\"90\":4,\"186\":5,\"232\":2}}],[\"es\",{\"1\":{\"51\":1}}],[\"european\",{\"1\":{\"48\":1}}],[\"else\",{\"1\":{\"36\":1,\"66\":1,\"68\":2,\"87\":1}}],[\"ellipse2path\",{\"1\":{\"37\":1}}],[\"ellipse\",{\"0\":{\"37\":1},\"1\":{\"26\":1,\"27\":1}}],[\"前提\",{\"1\":{\"259\":1}}],[\"前端的所有资源文件\",{\"1\":{\"224\":1}}],[\"前面是数字后面是啦\",{\"1\":{\"92\":1}}],[\"前段时间研究\",{\"1\":{\"26\":1}}],[\"前者不缩小\",{\"1\":{\"22\":1}}],[\">0\",{\"1\":{\"239\":1,\"240\":1}}],[\">计算<\",{\"1\":{\"165\":1}}],[\">訾博<\",{\"1\":{\"91\":1}}],[\">=\",{\"1\":{\"68\":2,\"87\":1}}],[\"><\",{\"1\":{\"29\":1,\"81\":1}}],[\">\",{\"1\":{\"24\":3,\"28\":2,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"36\":2,\"40\":8,\"41\":4,\"80\":4,\"87\":2,\"91\":2,\"149\":2,\"165\":3,\"239\":1,\"240\":1,\"242\":12,\"244\":4,\"247\":2,\"249\":5,\"256\":3,\"264\":2}}],[\"和之前已经被提取的模块时\",{\"1\":{\"268\":1}}],[\"和发送一个单独的文件之间自动选择\",{\"1\":{\"232\":1}}],[\"和\",{\"1\":{\"24\":2,\"28\":4,\"36\":2,\"66\":1,\"69\":1,\"70\":1,\"74\":1,\"76\":1,\"80\":1,\"87\":2,\"96\":1,\"230\":2,\"237\":1,\"249\":6}}],[\"该方法\",{\"1\":{\"88\":1}}],[\"该对象指定了使用\",{\"1\":{\"65\":1}}],[\"该对象被转为原始类型的值时\",{\"1\":{\"65\":1}}],[\"该属性有两个快捷值\",{\"1\":{\"24\":1}}],[\"该属性不起作用\",{\"1\":{\"18\":1}}],[\"该项目将缩小\",{\"1\":{\"22\":1}}],[\"0xf00d\",{\"1\":{\"178\":1}}],[\"0xff\",{\"1\":{\"78\":1}}],[\"06<\",{\"1\":{\"93\":1,\"100\":1}}],[\"07\",{\"1\":{\"93\":1,\"100\":1}}],[\"09\",{\"1\":{\"93\":1,\"100\":1}}],[\"0o744\",{\"1\":{\"178\":1}}],[\"0o777\",{\"1\":{\"78\":1}}],[\"0o\",{\"1\":{\"74\":1}}],[\"0b1010\",{\"1\":{\"78\":1,\"178\":1}}],[\"0b\",{\"1\":{\"74\":1}}],[\"0\",{\"1\":{\"21\":1,\"24\":2,\"28\":8,\"29\":2,\"30\":2,\"32\":1,\"33\":1,\"36\":14,\"37\":6,\"38\":4,\"39\":2,\"40\":6,\"41\":2,\"59\":2,\"66\":1,\"78\":12,\"90\":2,\"149\":3,\"155\":8,\"260\":1,\"268\":1}}],[\"则属性便成了只读属性无法修改\",{\"1\":{\"199\":1}}],[\"则可以自动将当前项目下的所有ts文件编译为js文件\",{\"1\":{\"181\":1}}],[\"则返回的promise对象也是错误的\",{\"1\":{\"87\":1}}],[\"则输出内容\",{\"1\":{\"68\":1}}],[\"则花括号可以省略\",{\"1\":{\"58\":1}}],[\"则小括号可以省略\",{\"1\":{\"58\":1}}],[\"则移除\",{\"1\":{\"36\":1,\"37\":1,\"38\":1}}],[\"则圆角不生效\",{\"1\":{\"36\":2}}],[\"则全部取这个被设置的值\",{\"1\":{\"28\":1}}],[\"则相当于\",{\"1\":{\"28\":1}}],[\"则\",{\"1\":{\"28\":1,\"36\":1}}],[\"则等同于stretch\",{\"1\":{\"25\":1}}],[\"则空间不足时\",{\"1\":{\"22\":1}}],[\"则前者占据的剩余空间将比其他项多一倍\",{\"1\":{\"21\":1}}],[\"则它们将等分剩余空间\",{\"1\":{\"21\":1}}],[\"即显式原型\",{\"1\":{\"135\":1}}],[\"即成为\",{\"1\":{\"134\":1}}],[\"即\",{\"1\":{\"37\":1}}],[\"即项目的本来大小\",{\"1\":{\"23\":1}}],[\"即项目的排列方向\",{\"1\":{\"13\":1}}],[\"即如果空间不足\",{\"1\":{\"22\":1}}],[\"即如果存在剩余空间\",{\"1\":{\"21\":1}}],[\"<input\",{\"1\":{\"165\":1}}],[\"<integer>\",{\"1\":{\"20\":1}}],[\"<button\",{\"1\":{\"165\":1}}],[\"<button>测试三<\",{\"1\":{\"149\":1}}],[\"<button>测试二<\",{\"1\":{\"149\":1}}],[\"<button>测试一<\",{\"1\":{\"149\":1}}],[\"<body>\",{\"1\":{\"80\":2,\"87\":2,\"149\":1,\"165\":1}}],[\"<ul>\",{\"1\":{\"93\":1,\"100\":1}}],[\"<url>\",{\"1\":{\"91\":1}}],[\"<text>\",{\"1\":{\"91\":1}}],[\"<title>title<\",{\"1\":{\"149\":1,\"165\":1}}],[\"<title>await表达式<\",{\"1\":{\"87\":1}}],[\"<title>async函数<\",{\"1\":{\"87\":1}}],[\"<title>模块化<\",{\"1\":{\"80\":2}}],[\"<a>\",{\"1\":{\"93\":1,\"100\":1}}],[\"<a>阿甘正传<\",{\"1\":{\"93\":1,\"100\":1}}],[\"<a>肖生克的救赎<\",{\"1\":{\"93\":1,\"100\":1}}],[\"<a\",{\"1\":{\"91\":3}}],[\"<animatemotion\",{\"1\":{\"40\":1,\"41\":1}}],[\"<meta\",{\"1\":{\"80\":2,\"87\":2,\"149\":1,\"165\":1}}],[\"<html\",{\"1\":{\"149\":1,\"165\":1}}],[\"<html>\",{\"1\":{\"80\":2,\"87\":2}}],[\"<head>\",{\"1\":{\"80\":2,\"87\":2,\"149\":1,\"165\":1}}],[\"<=么\",{\"1\":{\"92\":1}}],[\"<=\",{\"1\":{\"68\":2,\"87\":1}}],[\"<g\",{\"1\":{\"40\":1}}],[\"<string>somevalue\",{\"1\":{\"178\":1}}],[\"<style>\",{\"1\":{\"40\":1}}],[\"<script>\",{\"1\":{\"87\":2,\"149\":1,\"165\":1}}],[\"<script\",{\"1\":{\"80\":2,\"81\":1}}],[\"<svg\",{\"1\":{\"40\":1,\"41\":1}}],[\"<p>\",{\"1\":{\"93\":1,\"100\":1}}],[\"<p>上映日期\",{\"1\":{\"93\":2,\"100\":2}}],[\"<path\",{\"1\":{\"40\":3,\"41\":1}}],[\"<path>\",{\"1\":{\"34\":1}}],[\"<path>路径是由一些命令来控制的\",{\"1\":{\"34\":1}}],[\"<polygon\",{\"1\":{\"33\":1}}],[\"<polyline\",{\"1\":{\"32\":1}}],[\"<li>\",{\"1\":{\"93\":4,\"100\":3}}],[\"<li>艾伦<\",{\"1\":{\"56\":1}}],[\"<li>魏翔<\",{\"1\":{\"56\":1}}],[\"<li>玛丽<\",{\"1\":{\"56\":1}}],[\"<li>沈腾<\",{\"1\":{\"56\":1}}],[\"<line\",{\"1\":{\"31\":1}}],[\"<length>\",{\"1\":{\"23\":1}}],[\"<ellipse\",{\"1\":{\"30\":1}}],[\"<circle\",{\"1\":{\"29\":1,\"40\":1,\"41\":1}}],[\"<rect\",{\"1\":{\"28\":2,\"40\":1}}],[\"<\",{\"1\":{\"24\":3,\"40\":4,\"41\":2,\"56\":1,\"66\":1,\"78\":2,\"80\":10,\"87\":10,\"91\":2,\"93\":7,\"100\":5,\"149\":8,\"165\":6}}],[\"<number>\",{\"1\":{\"21\":1,\"22\":1}}],[\"<flex\",{\"1\":{\"15\":2}}],[\"每一个文件都生成对应的\",{\"1\":{\"249\":1}}],[\"每一个命令对应一个字母\",{\"1\":{\"34\":1}}],[\"每种文件实现热模块替换的情况\",{\"1\":{\"247\":1}}],[\"每次构建都会先清除目录\",{\"1\":{\"190\":1}}],[\"每调用一次\",{\"1\":{\"67\":1}}],[\"每调用\",{\"1\":{\"66\":1}}],[\"每年发布一个版本\",{\"1\":{\"51\":1}}],[\"每个对象都有相同的数据\",{\"1\":{\"157\":1}}],[\"每个实例对象都有一个\",{\"1\":{\"135\":1}}],[\"每个函数都会创建自己的作用域\",{\"1\":{\"145\":1}}],[\"每个函数都有一个prototype属性\",{\"1\":{\"134\":1}}],[\"每个函数function都有一个prototype\",{\"1\":{\"135\":1}}],[\"每个变量对应一块内存\",{\"1\":{\"120\":1}}],[\"每个点必须包含2个数字\",{\"1\":{\"33\":1}}],[\"每个点必须包含`2`个数字\",{\"1\":{\"32\":1}}],[\"每个数字用空白\",{\"1\":{\"32\":1,\"33\":1}}],[\"每个项目两侧的间隔相等\",{\"1\":{\"16\":1}}],[\"每根轴线两侧的间隔都相等\",{\"1\":{\"18\":1}}],[\"62\",{\"1\":{\"231\":1}}],[\"637\",{\"1\":{\"40\":1}}],[\"65\",{\"1\":{\"32\":1,\"33\":1}}],[\"60\",{\"1\":{\"28\":1,\"32\":1,\"33\":1,\"40\":1,\"242\":2,\"244\":4,\"252\":2,\"253\":2,\"254\":2}}],[\"6\",{\"0\":{\"18\":1,\"25\":1,\"58\":1,\"105\":1,\"131\":1,\"154\":1,\"263\":1,\"264\":1,\"265\":1,\"266\":1,\"267\":1,\"268\":2},\"1\":{\"51\":1,\"69\":1,\"78\":2,\"97\":2,\"122\":1,\"164\":1,\"178\":1,\"235\":2,\"237\":3,\"244\":3,\"252\":3}}],[\"将当前模块记录其他模块的hash单独打包成为一个文件\",{\"1\":{\"268\":1}}],[\"将来所有资源输出的公共目录\",{\"1\":{\"264\":1}}],[\"将打包后的js代码按照不同的方式进行分割\",{\"1\":{\"260\":1}}],[\"将打包生成的css文件放在一个统一的目录下\",{\"1\":{\"244\":1}}],[\"将\",{\"1\":{\"247\":1}}],[\"将mode设置为production即可自动压缩js文件\",{\"1\":{\"243\":1}}],[\"将css文件整合到js文件中\",{\"1\":{\"238\":1,\"239\":1,\"240\":1}}],[\"将css文件变成commonjs模块加载js中\",{\"1\":{\"233\":1}}],[\"将样式放入\",{\"1\":{\"238\":1,\"239\":1,\"240\":1}}],[\"将less文件编译成css文件\",{\"1\":{\"233\":1}}],[\"将js中的样式资源插入到head中生效\",{\"1\":{\"233\":1}}],[\"将文件发送到输出目录\",{\"1\":{\"232\":1}}],[\"将文件作为\",{\"1\":{\"232\":1}}],[\"将文件导入为字符串\",{\"1\":{\"232\":1}}],[\"将所有的文件编译为一个js文件\",{\"1\":{\"186\":1}}],[\"将事件回调函数交给对应模块管理\",{\"1\":{\"164\":1}}],[\"将子类型原型的构造属性设置为子类型\",{\"1\":{\"158\":1}}],[\"将函数作为实参传递给另一个函数调用\",{\"1\":{\"151\":1}}],[\"将函数作为另外一个函数的返回值\",{\"1\":{\"151\":1}}],[\"将每个btn的索引存储到btn对象上\",{\"1\":{\"149\":1}}],[\"将栈顶对象移除\",{\"1\":{\"142\":1}}],[\"将其添加到栈中\",{\"1\":{\"142\":2}}],[\"将三维数组转换成一维数组\",{\"1\":{\"97\":1}}],[\"将三维数组转换成二维数组\",{\"1\":{\"97\":1}}],[\"将二维数组转换成一维数组\",{\"1\":{\"97\":1}}],[\"将二维数组或者map转换成对象\",{\"1\":{\"95\":2}}],[\"将多维数组转换成低维数组\",{\"1\":{\"97\":2}}],[\"将源对象的所有可枚举属性\",{\"1\":{\"79\":2}}],[\"将数字的小数部分抹掉\",{\"1\":{\"78\":2}}],[\"将数组转化为逗号分隔的序列\",{\"1\":{\"69\":1}}],[\"将全局方法\",{\"1\":{\"76\":1}}],[\"将一个数组转为用逗号分隔的参数序列\",{\"1\":{\"61\":1}}],[\"将占满整个容器的高度\",{\"1\":{\"17\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"0\":1}}],[\"58\",{\"1\":{\"195\":1}}],[\"581\",{\"1\":{\"40\":1}}],[\"5211314love\",{\"1\":{\"78\":1}}],[\"5inch\",{\"1\":{\"71\":1}}],[\"5999\",{\"1\":{\"71\":2}}],[\"55\",{\"1\":{\"33\":1}}],[\"50000\",{\"1\":{\"260\":1}}],[\"50\",{\"1\":{\"29\":1,\"31\":1,\"33\":2,\"40\":1,\"41\":10}}],[\"5\",{\"0\":{\"17\":1,\"24\":1,\"26\":1,\"57\":1,\"104\":1,\"130\":1,\"138\":1,\"153\":1,\"230\":1,\"245\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"255\":1,\"256\":2,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"261\":1,\"262\":2,\"267\":1},\"1\":{\"30\":1,\"40\":7,\"41\":1,\"51\":1,\"60\":2,\"69\":4,\"70\":1,\"71\":3,\"78\":5,\"84\":1,\"97\":3,\"122\":1,\"142\":1,\"164\":2,\"178\":3,\"231\":1,\"232\":1,\"268\":1}}],[\"项目使用\",{\"0\":{\"194\":1}}],[\"项目选项\",{\"1\":{\"186\":1}}],[\"项目中使用的是webpack\",{\"1\":{\"81\":1}}],[\"项目占据的主轴空间\",{\"1\":{\"23\":1}}],[\"项目的属性\",{\"0\":{\"19\":1}}],[\"项目的第一行文字的基线对齐\",{\"1\":{\"17\":1}}],[\"项目之间的间隔比项目与边框的间隔大一倍\",{\"1\":{\"16\":1}}],[\"项目之间的间隔都相等\",{\"1\":{\"16\":1}}],[\"项目都排在一条线\",{\"1\":{\"14\":1}}],[\"居中\",{\"1\":{\"16\":1}}],[\"左对齐\",{\"1\":{\"16\":1}}],[\"accept\",{\"1\":{\"247\":1}}],[\"aa\",{\"1\":{\"186\":1}}],[\"aaa\",{\"1\":{\"67\":1,\"138\":1}}],[\"admin\",{\"1\":{\"103\":1}}],[\"addeventlistener\",{\"1\":{\"262\":1}}],[\"addassethtmlwebpackplugin\",{\"1\":{\"256\":2}}],[\"add\",{\"1\":{\"59\":2,\"60\":2,\"69\":3,\"256\":2,\"263\":6}}],[\"alias\",{\"1\":{\"266\":1}}],[\"align\",{\"0\":{\"17\":1,\"18\":1,\"25\":1},\"1\":{\"17\":2,\"18\":2,\"25\":2}}],[\"alwaysstrict\",{\"1\":{\"186\":1}}],[\"alert\",{\"1\":{\"104\":1,\"149\":3,\"155\":2,\"165\":1}}],[\"allowunreachablecode\",{\"1\":{\"186\":1}}],[\"allowjs\",{\"1\":{\"186\":2}}],[\"all\",{\"1\":{\"102\":1,\"239\":1,\"240\":1,\"260\":1,\"268\":1}}],[\"allsettled方法\",{\"1\":{\"102\":1}}],[\"allsettled\",{\"0\":{\"102\":1},\"1\":{\"102\":2}}],[\"animals\",{\"1\":{\"205\":1}}],[\"animal\",{\"1\":{\"203\":2,\"204\":2,\"205\":1}}],[\"animation\",{\"1\":{\"40\":1}}],[\"any\",{\"1\":{\"178\":3,\"208\":2}}],[\"an\",{\"1\":{\"101\":1}}],[\"a>\",{\"1\":{\"91\":3,\"93\":4,\"100\":3}}],[\"apply\",{\"1\":{\"129\":1}}],[\"app\",{\"1\":{\"81\":1,\"104\":1,\"186\":1}}],[\"apiopen\",{\"1\":{\"68\":3,\"87\":2}}],[\"api\",{\"1\":{\"68\":3,\"87\":2,\"267\":1}}],[\"amd\",{\"1\":{\"80\":1,\"186\":1}}],[\"abstract\",{\"0\":{\"205\":1},\"1\":{\"205\":2}}],[\"abs\",{\"1\":{\"78\":2}}],[\"ajax请求回调\",{\"1\":{\"129\":1}}],[\"ajax\",{\"1\":{\"67\":1,\"164\":1}}],[\"atguigu\",{\"1\":{\"57\":1,\"59\":1}}],[\"age\",{\"1\":{\"55\":1,\"88\":1,\"95\":2,\"101\":8,\"157\":8,\"158\":10,\"178\":2,\"197\":5,\"198\":5,\"199\":18,\"203\":4,\"204\":4,\"207\":6}}],[\"await表达式\",{\"1\":{\"87\":2}}],[\"await\",{\"1\":{\"51\":2,\"87\":10}}],[\"as\",{\"1\":{\"80\":4,\"104\":1,\"178\":1}}],[\"assets\",{\"1\":{\"240\":3,\"244\":1}}],[\"assetmodulefilename是相同的\",{\"1\":{\"235\":1,\"237\":2,\"244\":2,\"252\":2}}],[\"asset\",{\"1\":{\"232\":5,\"235\":1,\"236\":1,\"237\":3,\"244\":2,\"252\":2,\"256\":2}}],[\"assign\",{\"1\":{\"79\":3}}],[\"association\",{\"1\":{\"48\":1}}],[\"async与await结合读取文件\",{\"1\":{\"87\":1}}],[\"async函数\",{\"1\":{\"87\":2}}],[\"async函数的返回值为\",{\"1\":{\"87\":1}}],[\"async和await结合发送ajax请求\",{\"1\":{\"87\":1}}],[\"async和await\",{\"0\":{\"87\":1}}],[\"async\",{\"1\":{\"51\":2,\"87\":8}}],[\"aribnb\",{\"1\":{\"241\":1}}],[\"arg\",{\"1\":{\"67\":2,\"208\":2,\"210\":2,\"216\":2}}],[\"args\",{\"1\":{\"60\":4}}],[\"arg3\",{\"1\":{\"58\":2}}],[\"arg2\",{\"1\":{\"58\":2}}],[\"arg1\",{\"1\":{\"58\":2}}],[\"arguments==\",{\"1\":{\"141\":1}}],[\"arguments\",{\"1\":{\"58\":1,\"60\":2,\"61\":1,\"66\":1}}],[\"arrowfunction\",{\"1\":{\"191\":1}}],[\"arr3\",{\"1\":{\"97\":4}}],[\"arr2\",{\"1\":{\"69\":4,\"97\":3}}],[\"array<number>\",{\"1\":{\"178\":1}}],[\"array\",{\"0\":{\"84\":1,\"97\":1},\"1\":{\"65\":1,\"66\":1,\"97\":1,\"114\":1,\"178\":2,\"263\":1}}],[\"arr\",{\"1\":{\"55\":2,\"69\":5,\"84\":3,\"97\":2}}],[\"arch\",{\"1\":{\"51\":1}}],[\"around\",{\"1\":{\"16\":2,\"18\":2}}],[\"a\",{\"1\":{\"34\":2,\"36\":5,\"37\":2,\"59\":2,\"60\":2,\"66\":3,\"71\":1,\"78\":4,\"129\":1,\"138\":10,\"140\":3,\"143\":4,\"155\":4,\"178\":2,\"198\":2,\"214\":1,\"264\":2}}],[\"automaticnamedelimiter\",{\"1\":{\"268\":1}}],[\"auto\",{\"1\":{\"23\":2,\"24\":4,\"25\":1}}],[\"airbnb\",{\"1\":{\"241\":5,\"242\":6,\"244\":2,\"262\":1}}],[\"ai\",{\"0\":{\"1\":1},\"2\":{\"2\":1}}],[\"binder\",{\"1\":{\"185\":1}}],[\"binary\",{\"1\":{\"178\":1}}],[\"big\",{\"1\":{\"178\":1}}],[\"bigint\",{\"0\":{\"105\":1},\"1\":{\"105\":5,\"114\":1,\"178\":1}}],[\"bulit\",{\"1\":{\"235\":2,\"236\":1,\"237\":2}}],[\"built\",{\"1\":{\"232\":4,\"233\":1,\"234\":1,\"238\":2,\"239\":2,\"240\":2,\"244\":2,\"255\":1,\"256\":1,\"258\":2}}],[\"build文件夹\",{\"1\":{\"237\":1}}],[\"build对代码进行编译\",{\"1\":{\"194\":1}}],[\"build\",{\"1\":{\"193\":1,\"232\":4,\"233\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":4,\"238\":1,\"239\":1,\"240\":1,\"241\":2,\"242\":6,\"244\":3,\"247\":1,\"255\":1,\"256\":1,\"258\":1,\"260\":1,\"262\":1,\"264\":1,\"267\":2}}],[\"button>\",{\"1\":{\"149\":3,\"165\":1}}],[\"bundles\",{\"1\":{\"227\":1}}],[\"bundler\",{\"1\":{\"224\":1}}],[\"bundle\",{\"1\":{\"81\":2,\"191\":1,\"224\":1,\"232\":1}}],[\"b=1\",{\"1\":{\"143\":1}}],[\"btns\",{\"1\":{\"149\":7}}],[\"btn\",{\"1\":{\"104\":3,\"149\":7,\"165\":2,\"261\":1}}],[\"begin\",{\"1\":{\"143\":2}}],[\"be\",{\"1\":{\"101\":1,\"178\":1}}],[\"between\",{\"1\":{\"16\":2,\"18\":2}}],[\"browserslist\",{\"1\":{\"239\":1,\"240\":1}}],[\"browser\",{\"1\":{\"164\":1,\"262\":1,\"264\":1}}],[\"browserify\",{\"1\":{\"80\":1,\"81\":3}}],[\"brand\",{\"1\":{\"71\":21}}],[\"bbb\",{\"1\":{\"67\":1,\"138\":1}}],[\"bark\",{\"1\":{\"203\":2,\"204\":2,\"205\":1}}],[\"baidu\",{\"1\":{\"91\":2}}],[\"babel缓存\",{\"0\":{\"253\":1},\"1\":{\"253\":1}}],[\"babel在webpack中的加载器\",{\"1\":{\"195\":1}}],[\"babel的预定义环境\",{\"1\":{\"195\":1}}],[\"babel的核心工具\",{\"1\":{\"195\":1}}],[\"babel\",{\"0\":{\"195\":1},\"1\":{\"81\":6,\"195\":8,\"242\":30,\"244\":11,\"252\":2,\"253\":2,\"254\":2,\"259\":1}}],[\"babel对es6模块化代码转换\",{\"0\":{\"81\":1}}],[\"banji\",{\"1\":{\"66\":2}}],[\"base\",{\"1\":{\"184\":1,\"241\":5,\"242\":6,\"244\":2,\"262\":1}}],[\"baseline\",{\"1\":{\"17\":2,\"25\":1}}],[\"basis的简写\",{\"1\":{\"24\":1}}],[\"basis\",{\"1\":{\"23\":1,\"24\":1}}],[\"basis属性定义了在分配多余空间之前\",{\"1\":{\"23\":1}}],[\"basis属性\",{\"0\":{\"23\":1}}],[\"b\",{\"1\":{\"59\":2,\"60\":2,\"66\":3,\"78\":5,\"138\":10,\"143\":2,\"155\":1,\"207\":1,\"214\":2}}],[\"black\",{\"1\":{\"40\":2,\"178\":1}}],[\"blue\",{\"1\":{\"40\":1,\"178\":5}}],[\"bower\",{\"1\":{\"183\":1}}],[\"bobbington`\",{\"1\":{\"178\":1}}],[\"body>\",{\"1\":{\"80\":2,\"87\":2,\"149\":1,\"165\":1}}],[\"boolean\",{\"1\":{\"69\":4,\"70\":2,\"114\":1,\"178\":3}}],[\"box\",{\"1\":{\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1}}],[\"border\",{\"1\":{\"11\":1}}],[\"skipwaiting\",{\"1\":{\"262\":1}}],[\"skillfour\",{\"1\":{\"61\":2,\"90\":2}}],[\"skillthree\",{\"1\":{\"61\":2,\"90\":2}}],[\"skilltwo\",{\"1\":{\"61\":2,\"90\":2}}],[\"skillone\",{\"1\":{\"61\":2,\"90\":3}}],[\"system或amd则会将模块一起合并到文件之中\",{\"1\":{\"186\":1}}],[\"system\",{\"1\":{\"186\":1}}],[\"sys\",{\"1\":{\"185\":1}}],[\"symbol\",{\"0\":{\"62\":1,\"98\":1},\"1\":{\"63\":13,\"64\":8,\"65\":15,\"66\":3,\"98\":2,\"114\":1}}],[\"src下hello目录下的文件都不会被编译\",{\"1\":{\"183\":1}}],[\"src\",{\"1\":{\"182\":1,\"183\":1,\"186\":1,\"191\":1,\"232\":5,\"233\":1,\"234\":3,\"235\":4,\"236\":2,\"237\":4,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":7,\"244\":5,\"247\":2,\"255\":3,\"256\":3,\"260\":2,\"263\":11,\"265\":1,\"266\":1}}],[\"src=\",{\"1\":{\"81\":1}}],[\"sum\",{\"1\":{\"201\":2}}],[\"subprop\",{\"1\":{\"158\":2}}],[\"sub\",{\"1\":{\"158\":8}}],[\"supprop\",{\"1\":{\"158\":2}}],[\"supper\",{\"1\":{\"158\":4}}],[\"super\",{\"1\":{\"71\":3,\"198\":1,\"199\":3}}],[\"shaking\",{\"0\":{\"259\":1},\"1\":{\"259\":2}}],[\"showsubprop\",{\"1\":{\"158\":1}}],[\"showsupperprop\",{\"1\":{\"158\":1}}],[\"show\",{\"1\":{\"147\":2}}],[\"shrink属性为0\",{\"1\":{\"22\":1}}],[\"shrink属性都为1\",{\"1\":{\"22\":1}}],[\"shrink属性定义了项目的缩小比例\",{\"1\":{\"22\":1}}],[\"shrink\",{\"0\":{\"22\":1},\"1\":{\"22\":1,\"24\":2}}],[\"safari\",{\"1\":{\"161\":1,\"239\":1,\"240\":1,\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"safe\",{\"1\":{\"105\":1}}],[\"sayhello\",{\"1\":{\"197\":2,\"199\":3,\"206\":5}}],[\"say\",{\"1\":{\"64\":3}}],[\"sg\",{\"1\":{\"100\":1}}],[\"s+<p>\",{\"1\":{\"93\":1}}],[\"s+<a>\",{\"1\":{\"93\":1}}],[\"sideeffects\",{\"1\":{\"259\":2}}],[\"sideeffectsflagplugin\",{\"1\":{\"230\":1}}],[\"sign\",{\"1\":{\"78\":5}}],[\"size\",{\"1\":{\"23\":1,\"69\":3,\"70\":3,\"71\":9}}],[\"smartphone\",{\"1\":{\"71\":11}}],[\"s\",{\"1\":{\"69\":3,\"71\":3,\"93\":1,\"98\":2,\"262\":1}}],[\"s3\",{\"1\":{\"63\":4}}],[\"s2\",{\"1\":{\"63\":4}}],[\"s1\",{\"1\":{\"63\":3,\"69\":12}}],[\"specified\",{\"1\":{\"193\":1}}],[\"species\",{\"1\":{\"65\":1}}],[\"splitchunks\",{\"1\":{\"260\":1,\"268\":1}}],[\"split\",{\"0\":{\"260\":1},\"1\":{\"65\":2}}],[\"spread\",{\"0\":{\"90\":1},\"1\":{\"61\":1,\"90\":2}}],[\"spread扩展运算符\",{\"0\":{\"61\":1}}],[\"space\",{\"1\":{\"16\":4,\"18\":4}}],[\"scripts\",{\"1\":{\"193\":1}}],[\"scripthost\",{\"1\":{\"186\":1}}],[\"script>\",{\"1\":{\"80\":2,\"81\":1,\"87\":2,\"149\":1,\"165\":1}}],[\"scanner\",{\"1\":{\"185\":1}}],[\"school\",{\"1\":{\"58\":1,\"79\":4,\"80\":9,\"88\":6}}],[\"score\",{\"1\":{\"58\":2}}],[\"slogon\",{\"1\":{\"57\":2,\"70\":1}}],[\"slice\",{\"1\":{\"39\":4}}],[\"souce\",{\"1\":{\"249\":6}}],[\"source\",{\"0\":{\"249\":1},\"1\":{\"191\":1,\"232\":1,\"249\":18}}],[\"sourcemap\",{\"1\":{\"186\":1,\"268\":1}}],[\"somevalue\",{\"1\":{\"178\":3}}],[\"sola\",{\"1\":{\"57\":1,\"157\":4,\"207\":1}}],[\"songs\",{\"1\":{\"55\":2}}],[\"service\",{\"1\":{\"262\":2}}],[\"serviceworker注册失败了\",{\"1\":{\"262\":1}}],[\"serviceworker注册成功了\",{\"1\":{\"262\":1}}],[\"serviceworker\",{\"1\":{\"262\":2}}],[\"serve\",{\"1\":{\"193\":1,\"237\":2,\"262\":2}}],[\"server\",{\"1\":{\"190\":2,\"237\":2}}],[\"sentence\",{\"1\":{\"178\":1}}],[\"sendajax\",{\"1\":{\"87\":3}}],[\"send\",{\"1\":{\"68\":2,\"87\":1}}],[\"sex\",{\"1\":{\"88\":1}}],[\"seajs\",{\"1\":{\"80\":1}}],[\"season\",{\"1\":{\"68\":2}}],[\"search\",{\"1\":{\"65\":2}}],[\"settings\",{\"1\":{\"241\":1,\"242\":3,\"244\":1}}],[\"settimeout的回调函数是在主线程执行的\",{\"1\":{\"163\":1}}],[\"settimeout\",{\"1\":{\"67\":9,\"68\":2,\"102\":2}}],[\"setprice\",{\"1\":{\"158\":1}}],[\"setprototypeof\",{\"1\":{\"79\":4}}],[\"setname\",{\"1\":{\"157\":3,\"158\":1,\"207\":2}}],[\"set实例\",{\"1\":{\"69\":1}}],[\"set集合实践\",{\"1\":{\"69\":1}}],[\"set集合\",{\"0\":{\"69\":1},\"1\":{\"69\":1}}],[\"set\",{\"1\":{\"66\":1,\"69\":9,\"70\":4,\"71\":1,\"95\":2,\"200\":1,\"207\":1}}],[\"second\",{\"1\":{\"55\":1}}],[\"self\",{\"1\":{\"25\":1}}],[\"self属性允许单个项目有与其他项目不一样的对齐方式\",{\"1\":{\"25\":1}}],[\"self属性\",{\"0\":{\"25\":1}}],[\"svg沿路径移动特效\",{\"0\":{\"41\":1}}],[\"svg>\",{\"1\":{\"40\":1,\"41\":1}}],[\"svg流动虚线\",{\"0\":{\"40\":1}}],[\"svg中ellipse元素用于绘制椭圆\",{\"1\":{\"30\":1}}],[\"svg中circle元素用于绘制圆形\",{\"1\":{\"29\":1}}],[\"svg中rect元素用于绘制矩形\",{\"1\":{\"28\":1}}],[\"svg基本形状\",{\"0\":{\"27\":1}}],[\"svg\",{\"0\":{\"26\":1,\"34\":1,\"35\":1},\"1\":{\"26\":2,\"27\":1,\"34\":1,\"40\":1,\"41\":1}}],[\"style\",{\"1\":{\"233\":3,\"235\":2,\"236\":1,\"237\":3,\"238\":1,\"239\":1,\"240\":1,\"247\":1,\"265\":1}}],[\"style>\",{\"1\":{\"40\":1}}],[\"student\",{\"1\":{\"158\":6,\"206\":1}}],[\"stus\",{\"1\":{\"66\":3}}],[\"stack\",{\"1\":{\"164\":1}}],[\"static\",{\"1\":{\"71\":3,\"197\":1,\"199\":1,\"201\":2,\"237\":2,\"267\":1}}],[\"status\",{\"1\":{\"68\":6,\"87\":3}}],[\"star\",{\"1\":{\"56\":2}}],[\"start来启动开发服务器\",{\"1\":{\"194\":1}}],[\"start\",{\"1\":{\"16\":2,\"17\":2,\"18\":2,\"25\":1,\"193\":1}}],[\"standard\",{\"1\":{\"50\":1}}],[\"standards\",{\"1\":{\"50\":1,\"51\":1}}],[\"strictpropertyinitialization\",{\"1\":{\"186\":1}}],[\"strictnullchecks\",{\"1\":{\"186\":1}}],[\"strictfunctiontypes\",{\"1\":{\"186\":1}}],[\"strictbindcallapply\",{\"1\":{\"186\":1}}],[\"strict\",{\"1\":{\"186\":1,\"192\":1}}],[\"string>\",{\"1\":{\"214\":1}}],[\"string\",{\"0\":{\"100\":1},\"1\":{\"56\":1,\"66\":1,\"100\":1,\"114\":1,\"178\":10,\"197\":2,\"198\":5,\"199\":9,\"200\":3,\"203\":2,\"204\":2,\"206\":3,\"207\":3,\"263\":1}}],[\"strlength\",{\"1\":{\"178\":2}}],[\"str\",{\"1\":{\"56\":1,\"65\":4,\"91\":3,\"92\":3,\"93\":3,\"96\":5,\"100\":2}}],[\"stroke=\",{\"1\":{\"40\":3,\"41\":1}}],[\"stroke\",{\"1\":{\"40\":10}}],[\"stretch\",{\"1\":{\"17\":2,\"18\":2,\"25\":1}}],[\"456\",{\"1\":{\"201\":1}}],[\"45\",{\"1\":{\"33\":1}}],[\"4\",{\"0\":{\"16\":1,\"19\":1,\"23\":1,\"56\":1,\"93\":1,\"98\":1,\"103\":1,\"121\":1,\"129\":1,\"137\":1,\"143\":1,\"148\":1,\"152\":1,\"159\":1,\"229\":1,\"255\":1,\"261\":1,\"266\":1},\"1\":{\"36\":3,\"40\":1,\"51\":1,\"58\":1,\"60\":2,\"68\":4,\"69\":5,\"70\":1,\"78\":2,\"84\":1,\"87\":2,\"97\":3,\"135\":1,\"140\":1,\"142\":1,\"143\":1,\"154\":1,\"163\":1,\"164\":2,\"178\":5,\"203\":1,\"204\":1,\"231\":1,\"232\":1,\"263\":1}}],[\"404\",{\"1\":{\"275\":1}}],[\"40\",{\"1\":{\"10\":1,\"33\":1,\"40\":1}}],[\"默认查找\",{\"1\":{\"256\":1}}],[\"默认不能使用\",{\"1\":{\"247\":1}}],[\"默认不能使用hmr功能\",{\"1\":{\"247\":1}}],[\"默认会创建一个空的html\",{\"1\":{\"234\":1,\"255\":1,\"256\":1}}],[\"默认会将所有的编写在全局作用域中的代码合并为一个js文件\",{\"1\":{\"186\":1}}],[\"默认采用commonjs\",{\"1\":{\"233\":1}}],[\"默认暴露\",{\"1\":{\"80\":1}}],[\"默认导出模块\",{\"1\":{\"80\":1}}],[\"默认为\",{\"1\":{\"29\":2,\"30\":2}}],[\"默认为1\",{\"1\":{\"22\":1}}],[\"默认为0\",{\"1\":{\"20\":1,\"21\":1}}],[\"默认值可以不用写\",{\"1\":{\"268\":1}}],[\"默认值是一个\",{\"1\":{\"135\":1}}],[\"默认值为true\",{\"1\":{\"186\":1}}],[\"默认值为构造函数的prototype属性值\",{\"1\":{\"135\":1}}],[\"默认值为\",{\"1\":{\"28\":2}}],[\"默认值为auto\",{\"1\":{\"25\":1}}],[\"默认值为0\",{\"1\":{\"24\":1}}],[\"默认值为row\",{\"1\":{\"15\":1}}],[\"默认值\",{\"1\":{\"16\":1,\"17\":1,\"18\":1,\"182\":1,\"183\":1,\"186\":4,\"199\":1,\"207\":2}}],[\"默认\",{\"1\":{\"14\":1,\"186\":1}}],[\"默认情况下编译后文件的目录结构会以最长的公共目录为根目录\",{\"1\":{\"186\":1}}],[\"默认情况下\",{\"1\":{\"14\":1,\"186\":1,\"199\":1}}],[\"如此一来\",{\"1\":{\"195\":1}}],[\"如上设置\",{\"1\":{\"186\":1}}],[\"如何证明js是单线程执行的\",{\"1\":{\"163\":1}}],[\"如何产生闭包\",{\"1\":{\"150\":1}}],[\"如何确定\",{\"1\":{\"131\":1}}],[\"如何调用\",{\"1\":{\"129\":1}}],[\"如何定义函数\",{\"1\":{\"129\":1}}],[\"如何访问内部数据\",{\"0\":{\"127\":1}}],[\"如何换行\",{\"1\":{\"14\":1}}],[\"如下\",{\"1\":{\"38\":1}}],[\"如下图所示\",{\"1\":{\"36\":1}}],[\"如当宽度像100\",{\"1\":{\"36\":1,\"37\":1,\"38\":1}}],[\"如0\",{\"1\":{\"33\":1}}],[\"如`0\",{\"1\":{\"32\":1}}],[\"如矩形\",{\"1\":{\"27\":1}}],[\"如果当前要打包的模块\",{\"1\":{\"268\":1}}],[\"如果当前对象中没有此属性\",{\"1\":{\"137\":1}}],[\"如果出错了\",{\"1\":{\"267\":1}}],[\"如果重新打包\",{\"1\":{\"258\":1}}],[\"如果构建后代码出错了\",{\"1\":{\"249\":1}}],[\"如果没使用alias下面的不用配置\",{\"1\":{\"241\":1,\"242\":3,\"244\":1}}],[\"如果没有\",{\"1\":{\"136\":1}}],[\"如果没有直接指定就是window\",{\"1\":{\"131\":1}}],[\"如果没有出错\",{\"1\":{\"68\":1}}],[\"如果没有父元素\",{\"1\":{\"25\":1}}],[\"如果子类中的方法会替换掉父类中的同名方法\",{\"1\":{\"204\":1}}],[\"如果子类中也定义了构造方法\",{\"1\":{\"198\":1}}],[\"如果在声明属性时添加一个readonly\",{\"1\":{\"199\":1}}],[\"如果在x类中不调用super将会报错\",{\"1\":{\"198\":1}}],[\"如果module制定了none\",{\"1\":{\"186\":1}}],[\"如果直接使用tsc指令\",{\"1\":{\"181\":1}}],[\"如果还找不到就抛出异常\",{\"1\":{\"146\":1}}],[\"如果最终没找到\",{\"1\":{\"136\":1}}],[\"如果存在则往下走\",{\"1\":{\"103\":1}}],[\"如果失败\",{\"1\":{\"87\":1}}],[\"如果失败则抛出错误\",{\"1\":{\"68\":1}}],[\"如果前后都有\",{\"1\":{\"79\":1}}],[\"如果前边有后边没有会添加\",{\"1\":{\"79\":1}}],[\"如果成功\",{\"1\":{\"68\":1,\"87\":1}}],[\"如果该属性存在\",{\"1\":{\"65\":1}}],[\"如果形参只有一个\",{\"1\":{\"58\":1}}],[\"如果有会打包成单独一个chunk\",{\"1\":{\"260\":1}}],[\"如果有直接返回\",{\"1\":{\"146\":2}}],[\"如果有一个没有设置则取值为另一个\",{\"1\":{\"36\":1}}],[\"如果有的话\",{\"1\":{\"21\":1}}],[\"如果其中一个设置为\",{\"1\":{\"36\":2}}],[\"如果\",{\"1\":{\"36\":1,\"258\":1}}],[\"如果需要更多灵活性的话\",{\"1\":{\"33\":1}}],[\"如果一个项目的flex\",{\"1\":{\"21\":1,\"22\":1}}],[\"如果一条轴线排不下\",{\"1\":{\"14\":1}}],[\"如果所有项目的flex\",{\"1\":{\"21\":1,\"22\":1}}],[\"如果项目只有一根轴线\",{\"1\":{\"18\":1}}],[\"如果项目未设置高度或设为auto\",{\"1\":{\"17\":1}}],[\"上例中\",{\"1\":{\"208\":1}}],[\"上面两种定义方法是完全相同的\",{\"1\":{\"198\":1}}],[\"上述示例中\",{\"1\":{\"182\":1,\"183\":1,\"184\":1}}],[\"上一篇\",{\"1\":{\"170\":1}}],[\"上一条\",{\"1\":{\"67\":1}}],[\"上海\",{\"1\":{\"79\":1}}],[\"上\",{\"1\":{\"14\":1}}],[\"轴线占满整个交叉轴\",{\"1\":{\"18\":1}}],[\"轴线之间的间隔比轴线与边框的间隔大一倍\",{\"1\":{\"18\":1}}],[\"轴线之间的间隔平均分布\",{\"1\":{\"18\":1}}],[\"轴线\",{\"1\":{\"14\":1}}],[\"raw\",{\"1\":{\"232\":2}}],[\"rules\",{\"1\":{\"191\":1,\"195\":1,\"233\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":3,\"244\":2,\"252\":1,\"255\":1,\"256\":1,\"265\":1}}],[\"runtimechunk\",{\"1\":{\"268\":1}}],[\"runtime\",{\"1\":{\"268\":1}}],[\"run\",{\"1\":{\"40\":2,\"194\":1,\"204\":2,\"205\":2}}],[\"r1\",{\"1\":{\"69\":2}}],[\"rootdir\",{\"1\":{\"186\":2}}],[\"root4444\",{\"1\":{\"79\":2}}],[\"root\",{\"1\":{\"59\":2,\"79\":2,\"90\":2,\"103\":1}}],[\"row\",{\"1\":{\"13\":2}}],[\"r\",{\"1\":{\"29\":1,\"61\":1,\"68\":1,\"90\":1}}],[\"r=\",{\"1\":{\"29\":1,\"40\":1,\"41\":1}}],[\"ry\",{\"1\":{\"28\":8,\"30\":1,\"36\":21,\"37\":5}}],[\"ry=\",{\"1\":{\"28\":1,\"30\":1}}],[\"rx\",{\"1\":{\"28\":8,\"30\":1,\"36\":23,\"37\":8}}],[\"rx=\",{\"1\":{\"28\":1,\"30\":1}}],[\"reuseexistingchunk\",{\"1\":{\"260\":2,\"268\":1}}],[\"removecomments\",{\"1\":{\"186\":1,\"244\":2}}],[\"register\",{\"1\":{\"262\":1}}],[\"reg1\",{\"1\":{\"91\":2,\"92\":1}}],[\"reg\",{\"1\":{\"91\":2,\"92\":3,\"93\":4,\"100\":2}}],[\"react\",{\"0\":{\"173\":1},\"1\":{\"256\":1},\"2\":{\"174\":1}}],[\"readonly\",{\"1\":{\"199\":1}}],[\"readtext\",{\"1\":{\"87\":2}}],[\"readystate\",{\"1\":{\"68\":2,\"87\":1}}],[\"readfile\",{\"1\":{\"68\":5,\"87\":1}}],[\"reason=>\",{\"1\":{\"68\":2,\"87\":1}}],[\"reason\",{\"1\":{\"68\":8,\"87\":3}}],[\"requirejs\",{\"1\":{\"80\":1}}],[\"require\",{\"1\":{\"68\":1,\"87\":1,\"191\":3,\"233\":1,\"234\":2,\"235\":4,\"236\":2,\"237\":4,\"238\":3,\"239\":3,\"240\":4,\"241\":3,\"242\":9,\"244\":8,\"255\":2,\"256\":6}}],[\"request\",{\"1\":{\"67\":1}}],[\"reject\",{\"1\":{\"68\":8,\"87\":7,\"102\":3}}],[\"replacement\",{\"1\":{\"247\":1}}],[\"replace\",{\"1\":{\"65\":2}}],[\"repeatcount=\",{\"1\":{\"40\":1,\"41\":1}}],[\"reflect\",{\"1\":{\"63\":1,\"64\":2}}],[\"res\",{\"1\":{\"260\":2}}],[\"response\",{\"1\":{\"68\":2,\"87\":1}}],[\"resource\",{\"1\":{\"232\":1,\"236\":1,\"237\":2,\"244\":2,\"252\":2}}],[\"resources\",{\"1\":{\"68\":5,\"87\":1}}],[\"resolver\",{\"1\":{\"241\":1,\"242\":3,\"244\":1}}],[\"resolve\",{\"0\":{\"266\":1},\"1\":{\"68\":13,\"87\":8,\"102\":3,\"191\":2,\"233\":2,\"234\":2,\"235\":4,\"236\":2,\"237\":6,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":6,\"244\":4,\"247\":1,\"255\":2,\"256\":7,\"258\":1,\"260\":1,\"264\":1,\"265\":1,\"266\":3,\"267\":2}}],[\"rest\",{\"0\":{\"90\":1},\"1\":{\"60\":2,\"61\":1,\"90\":5}}],[\"rest参数与spread扩展运算符\",{\"1\":{\"90\":1}}],[\"rest参数非常适合不定个数参数函数的场景\",{\"1\":{\"60\":1}}],[\"rest参数\",{\"0\":{\"60\":1}}],[\"result0\",{\"1\":{\"97\":2}}],[\"result1\",{\"1\":{\"69\":2,\"91\":4,\"92\":2,\"95\":2,\"97\":2,\"102\":2}}],[\"result\",{\"1\":{\"56\":1,\"59\":2,\"66\":2,\"69\":4,\"87\":9,\"91\":4,\"92\":2,\"93\":7,\"95\":2,\"97\":2,\"100\":3,\"102\":2,\"165\":3}}],[\"red\",{\"1\":{\"40\":1,\"41\":1,\"178\":5}}],[\"return\",{\"1\":{\"36\":2,\"37\":2,\"38\":2,\"39\":2,\"58\":2,\"59\":1,\"66\":3,\"67\":1,\"68\":2,\"71\":1,\"78\":1,\"87\":4,\"143\":1,\"155\":6,\"157\":1,\"165\":1,\"200\":1,\"201\":1,\"207\":2,\"208\":1,\"210\":1,\"214\":1,\"216\":1}}],[\"rect2path\",{\"1\":{\"36\":1}}],[\"rect\",{\"0\":{\"36\":1},\"1\":{\"26\":1,\"36\":4}}],[\"reverse\",{\"1\":{\"13\":2,\"14\":2}}],[\"|eval\",{\"1\":{\"249\":1}}],[\"|hidden\",{\"1\":{\"249\":1}}],[\"||\",{\"1\":{\"15\":1,\"24\":1,\"36\":5,\"38\":4}}],[\"|\",{\"1\":{\"13\":3,\"14\":2,\"16\":4,\"17\":4,\"18\":5,\"23\":1,\"24\":1,\"25\":5,\"178\":6}}],[\"37\",{\"1\":{\"178\":1}}],[\"360\",{\"1\":{\"161\":1}}],[\"33\",{\"1\":{\"178\":1}}],[\"333\",{\"1\":{\"67\":4}}],[\"3306\",{\"1\":{\"59\":1,\"79\":1,\"90\":1}}],[\"3symbol内置值\",{\"0\":{\"65\":1}}],[\"3s\",{\"1\":{\"40\":1}}],[\"35\",{\"1\":{\"33\":1}}],[\"300300600\",{\"1\":{\"79\":1}}],[\"3000\",{\"1\":{\"67\":1,\"237\":2,\"247\":1,\"267\":2}}],[\"300\",{\"1\":{\"40\":1}}],[\"300px\",{\"1\":{\"40\":1}}],[\"30\",{\"1\":{\"28\":4,\"33\":1,\"207\":1,\"260\":2,\"268\":1}}],[\"3\",{\"0\":{\"12\":1,\"15\":1,\"22\":1,\"55\":1,\"92\":1,\"97\":1,\"102\":1,\"120\":1,\"123\":1,\"136\":1,\"142\":1,\"144\":1,\"151\":1,\"156\":1,\"228\":1,\"254\":1,\"260\":1,\"265\":1},\"1\":{\"51\":1,\"58\":1,\"60\":2,\"68\":4,\"69\":5,\"70\":1,\"78\":6,\"79\":1,\"84\":1,\"87\":1,\"97\":3,\"116\":1,\"129\":1,\"135\":1,\"137\":1,\"138\":2,\"140\":2,\"141\":1,\"142\":1,\"143\":3,\"146\":2,\"150\":1,\"154\":1,\"155\":4,\"158\":1,\"162\":1,\"163\":1,\"164\":2,\"165\":1,\"178\":4,\"195\":1,\"201\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":3,\"242\":4,\"244\":3,\"252\":1,\"253\":1,\"254\":1,\"255\":1,\"261\":1,\"263\":1,\"268\":1}}],[\"3px\",{\"1\":{\"11\":1}}],[\"fullname\",{\"1\":{\"178\":2}}],[\"fun\",{\"1\":{\"141\":2,\"155\":15}}],[\"func\",{\"1\":{\"134\":1}}],[\"function声明的属性\",{\"1\":{\"141\":1}}],[\"function声明的全局函数==\",{\"1\":{\"141\":1}}],[\"function的显式原型\",{\"1\":{\"138\":1}}],[\"function\",{\"1\":{\"36\":1,\"37\":1,\"38\":1,\"39\":2,\"57\":1,\"59\":2,\"60\":2,\"61\":1,\"64\":8,\"66\":1,\"67\":10,\"68\":12,\"71\":10,\"78\":1,\"80\":4,\"87\":7,\"90\":1,\"103\":1,\"104\":2,\"114\":1,\"115\":1,\"129\":2,\"130\":1,\"134\":2,\"135\":1,\"136\":6,\"138\":5,\"140\":2,\"143\":5,\"147\":4,\"149\":4,\"155\":6,\"157\":5,\"158\":10,\"165\":4,\"178\":2,\"206\":1,\"207\":1,\"208\":1,\"210\":1,\"214\":1,\"216\":1,\"247\":1,\"260\":2,\"261\":1}}],[\"frontmatter\",{\"1\":{\"170\":1}}],[\"fromentries\",{\"0\":{\"95\":1},\"1\":{\"95\":3}}],[\"from\",{\"1\":{\"40\":1,\"80\":4,\"82\":1,\"104\":1}}],[\"found\",{\"1\":{\"275\":1}}],[\"foo\",{\"1\":{\"143\":5}}],[\"for\",{\"1\":{\"63\":4,\"64\":4,\"65\":1,\"66\":6,\"69\":1,\"70\":1,\"100\":1,\"149\":3}}],[\"fb\",{\"1\":{\"143\":6}}],[\"f的实例对象的隐式原型指向其构造函数f的显式原型\",{\"1\":{\"138\":1}}],[\"fs\",{\"1\":{\"68\":8,\"87\":3}}],[\"false\",{\"1\":{\"66\":1,\"78\":1,\"114\":1,\"136\":1,\"178\":2,\"186\":5,\"191\":2,\"235\":1,\"259\":1,\"267\":1}}],[\"f\",{\"1\":{\"66\":1,\"138\":10,\"147\":2}}],[\"fn5\",{\"1\":{\"58\":2}}],[\"fn4\",{\"1\":{\"58\":1}}],[\"fn3\",{\"1\":{\"58\":1}}],[\"fn2\",{\"1\":{\"58\":1,\"140\":3,\"147\":4}}],[\"fn\",{\"1\":{\"58\":1,\"61\":2,\"87\":4,\"135\":7,\"136\":9,\"140\":1,\"147\":6,\"178\":1,\"206\":2}}],[\"fix\",{\"1\":{\"241\":2,\"242\":3,\"244\":2}}],[\"fibonacci\",{\"1\":{\"165\":4}}],[\"firefox\",{\"1\":{\"160\":1,\"161\":1,\"239\":1,\"240\":1,\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"first\",{\"1\":{\"55\":1}}],[\"field\",{\"1\":{\"101\":1}}],[\"findjob\",{\"1\":{\"80\":3}}],[\"filepath\",{\"1\":{\"256\":1}}],[\"file\",{\"1\":{\"232\":2,\"235\":2,\"236\":1,\"237\":2,\"244\":1,\"252\":1}}],[\"filename\",{\"1\":{\"191\":1,\"233\":1,\"234\":1,\"235\":3,\"236\":1,\"237\":4,\"238\":2,\"239\":2,\"240\":2,\"241\":1,\"242\":3,\"244\":5,\"252\":2,\"255\":1,\"256\":2,\"258\":2,\"260\":1,\"264\":1}}],[\"files\",{\"1\":{\"185\":1}}],[\"filter\",{\"1\":{\"69\":2}}],[\"fill=\",{\"1\":{\"29\":1,\"40\":3,\"41\":2}}],[\"fff\",{\"1\":{\"29\":1}}],[\"ffffff\",{\"1\":{\"11\":1}}],[\"flagincludedchunksplugin\",{\"1\":{\"230\":1}}],[\"flagdependencyusageplugin\",{\"1\":{\"230\":1}}],[\"flatmap\",{\"1\":{\"97\":3}}],[\"flat\",{\"1\":{\"97\":5}}],[\"flat与flatmap\",{\"0\":{\"97\":1}}],[\"flow属性是flex\",{\"1\":{\"15\":1}}],[\"flow\",{\"0\":{\"15\":1},\"1\":{\"15\":1}}],[\"flex属性是flex\",{\"1\":{\"24\":1}}],[\"flex属性\",{\"0\":{\"24\":1}}],[\"flex布局\",{\"0\":{\"12\":1}}],[\"flex\",{\"0\":{\"13\":1,\"14\":1,\"15\":1,\"21\":1,\"22\":1,\"23\":1},\"1\":{\"10\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":4,\"17\":4,\"18\":4,\"21\":2,\"22\":2,\"23\":2,\"24\":6,\"25\":2}}],[\"2优化代码调试\",{\"0\":{\"248\":1}}],[\"25kb\",{\"1\":{\"235\":1,\"237\":1,\"244\":1,\"252\":1}}],[\"25\",{\"1\":{\"235\":1,\"237\":1,\"244\":1,\"252\":1}}],[\"2的相同操作\",{\"1\":{\"146\":1}}],[\"24\",{\"1\":{\"88\":1,\"95\":2}}],[\"2499\",{\"1\":{\"71\":1}}],[\"21\",{\"0\":{\"82\":1}}],[\"2204460492503130808472633361816e\",{\"1\":{\"73\":1,\"78\":1}}],[\"222\",{\"1\":{\"67\":4}}],[\"2里面没的\",{\"1\":{\"69\":1}}],[\"2999\",{\"1\":{\"71\":1}}],[\"299\",{\"1\":{\"68\":4,\"87\":1}}],[\"2使用symbol的几种方式\",{\"0\":{\"64\":1}}],[\"262\",{\"1\":{\"49\":1,\"50\":1,\"51\":2}}],[\"2019\",{\"1\":{\"51\":1}}],[\"2018\",{\"1\":{\"51\":1}}],[\"2017\",{\"1\":{\"51\":1}}],[\"2016\",{\"1\":{\"51\":1}}],[\"2015\",{\"1\":{\"51\":1}}],[\"2009\",{\"1\":{\"51\":1}}],[\"2007\",{\"1\":{\"51\":1}}],[\"200\",{\"1\":{\"41\":1,\"68\":4,\"87\":1,\"103\":1}}],[\"20000\",{\"1\":{\"78\":1,\"260\":1}}],[\"2000\",{\"1\":{\"40\":1,\"41\":1,\"67\":1}}],[\"205\",{\"1\":{\"33\":2}}],[\"20\",{\"0\":{\"81\":1},\"1\":{\"30\":1,\"34\":12,\"40\":3,\"41\":4,\"58\":1,\"147\":1,\"260\":1,\"268\":1}}],[\"2\",{\"0\":{\"11\":1,\"14\":1,\"21\":1,\"54\":1,\"85\":1,\"88\":1,\"91\":1,\"96\":1,\"101\":1,\"117\":1,\"119\":1,\"132\":1,\"135\":1,\"139\":1,\"141\":1,\"150\":1,\"158\":1,\"225\":1,\"226\":1,\"227\":2,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":2,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":2,\"254\":1,\"255\":1,\"256\":1,\"257\":2,\"258\":2,\"259\":3,\"260\":2,\"261\":2,\"262\":2,\"264\":1},\"1\":{\"32\":2,\"33\":2,\"36\":5,\"37\":2,\"39\":4,\"51\":1,\"58\":1,\"59\":2,\"60\":2,\"63\":4,\"64\":1,\"68\":3,\"69\":3,\"70\":1,\"73\":1,\"78\":7,\"79\":1,\"84\":1,\"85\":2,\"87\":2,\"91\":1,\"93\":1,\"97\":4,\"105\":1,\"116\":1,\"122\":1,\"128\":1,\"129\":1,\"135\":1,\"137\":1,\"138\":2,\"140\":1,\"141\":1,\"142\":1,\"143\":4,\"146\":2,\"147\":1,\"150\":1,\"151\":1,\"152\":2,\"154\":1,\"155\":5,\"158\":1,\"162\":1,\"163\":1,\"164\":2,\"165\":3,\"178\":6,\"234\":2,\"235\":4,\"236\":2,\"237\":6,\"239\":1,\"240\":1,\"242\":3,\"244\":1,\"249\":1,\"254\":1,\"255\":2,\"260\":1,\"261\":1,\"262\":2,\"263\":1,\"268\":1}}],[\"cnpm\",{\"1\":{\"231\":2}}],[\"createperson\",{\"1\":{\"157\":3}}],[\"create\",{\"1\":{\"88\":1}}],[\"cmd\",{\"1\":{\"80\":1}}],[\"cities\",{\"1\":{\"79\":2}}],[\"circle>\",{\"1\":{\"29\":1,\"40\":1,\"41\":1}}],[\"circle\",{\"0\":{\"37\":1},\"1\":{\"26\":1,\"27\":1}}],[\"chunk\",{\"1\":{\"264\":1}}],[\"chunkfilename\",{\"1\":{\"264\":1}}],[\"chunks\",{\"1\":{\"260\":1,\"268\":1}}],[\"chunkhash\",{\"0\":{\"258\":1},\"1\":{\"258\":1}}],[\"chuizi\",{\"1\":{\"71\":15}}],[\"cheap\",{\"1\":{\"249\":9}}],[\"checkjs\",{\"1\":{\"186\":2}}],[\"checker\",{\"1\":{\"185\":1}}],[\"chrome\",{\"1\":{\"160\":1,\"161\":1,\"193\":1,\"195\":1,\"239\":1,\"240\":1,\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"charset=\",{\"1\":{\"80\":2,\"87\":2,\"149\":1,\"165\":1}}],[\"change\",{\"1\":{\"57\":1,\"71\":6,\"80\":2}}],[\"cachegroups\",{\"1\":{\"260\":1,\"268\":1}}],[\"cachedirectory\",{\"1\":{\"253\":2,\"254\":1}}],[\"cache\",{\"1\":{\"103\":1,\"268\":1}}],[\"call和apply的参数列表\",{\"1\":{\"186\":1}}],[\"call\",{\"1\":{\"71\":12,\"115\":1,\"129\":1,\"131\":1,\"136\":1,\"158\":2}}],[\"catch\",{\"1\":{\"68\":2,\"87\":1,\"260\":1,\"262\":1}}],[\"cleanwebpackplugin\",{\"1\":{\"191\":2}}],[\"clean\",{\"1\":{\"190\":2,\"191\":1}}],[\"clear\",{\"1\":{\"69\":3,\"70\":3}}],[\"client\",{\"1\":{\"267\":1}}],[\"clientsclaim\",{\"1\":{\"262\":1}}],[\"cli\",{\"1\":{\"81\":2,\"190\":2,\"231\":4}}],[\"class中的getter和setter设置\",{\"1\":{\"71\":1}}],[\"class中的getter和setter\",{\"1\":{\"71\":1}}],[\"class静态成员\",{\"1\":{\"71\":2}}],[\"class\",{\"0\":{\"205\":1},\"1\":{\"71\":13,\"101\":2,\"197\":2,\"198\":4,\"199\":6,\"200\":1,\"201\":1,\"203\":2,\"204\":2,\"205\":2,\"206\":1,\"207\":2,\"215\":1}}],[\"class类\",{\"0\":{\"71\":1}}],[\"class=\",{\"1\":{\"40\":2}}],[\"ccc\",{\"1\":{\"67\":1}}],[\"c\",{\"1\":{\"59\":2,\"66\":3,\"138\":5,\"143\":6,\"155\":3,\"178\":3,\"198\":2}}],[\"css压缩\",{\"1\":{\"240\":1}}],[\"css兼容性loader\",{\"1\":{\"240\":1}}],[\"css兼容性处理\",{\"1\":{\"239\":1,\"240\":1}}],[\"css|js|html|less|jpg|png|gif\",{\"1\":{\"237\":1,\"244\":1,\"252\":1}}],[\"css|js|html\",{\"1\":{\"236\":1,\"237\":1}}],[\"css资源以外的资源\",{\"1\":{\"236\":1,\"237\":2}}],[\"css$\",{\"1\":{\"233\":1,\"236\":1,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"244\":1,\"252\":1,\"265\":1}}],[\"css在内存中的相关处理\",{\"1\":{\"161\":1}}],[\"css模块\",{\"1\":{\"161\":1}}],[\"css文档解析模块\",{\"1\":{\"161\":1}}],[\"css\",{\"0\":{\"44\":1,\"238\":1,\"239\":1,\"240\":1},\"1\":{\"224\":1,\"232\":1,\"233\":3,\"234\":2,\"235\":2,\"236\":2,\"237\":5,\"238\":6,\"239\":5,\"240\":8,\"244\":6,\"252\":1,\"255\":2,\"256\":2,\"258\":2,\"259\":1,\"265\":1,\"266\":2},\"2\":{\"45\":1}}],[\"css相关\",{\"0\":{\"9\":1}}],[\"c180\",{\"1\":{\"41\":2}}],[\"c20\",{\"1\":{\"41\":2}}],[\"c点到a做180度顺时针画弧即可\",{\"1\":{\"37\":1}}],[\"cy\",{\"1\":{\"29\":1,\"30\":1,\"37\":3}}],[\"cy=\",{\"1\":{\"29\":1,\"30\":1,\"40\":1}}],[\"cx\",{\"1\":{\"29\":1,\"30\":1,\"37\":3}}],[\"cx=\",{\"1\":{\"29\":1,\"30\":1,\"40\":1}}],[\"center\",{\"1\":{\"16\":2,\"17\":2,\"18\":2,\"25\":1}}],[\"count\",{\"1\":{\"263\":1}}],[\"code\",{\"0\":{\"260\":1}}],[\"coffee\",{\"1\":{\"241\":1,\"242\":3,\"244\":2}}],[\"corejs\",{\"1\":{\"195\":1,\"242\":4,\"244\":3,\"252\":1,\"253\":1,\"254\":1}}],[\"core\",{\"1\":{\"164\":1,\"185\":1,\"195\":5,\"242\":5,\"244\":1}}],[\"collapsewhitespace\",{\"1\":{\"244\":2}}],[\"color\",{\"1\":{\"71\":11,\"178\":12}}],[\"column\",{\"1\":{\"10\":1,\"13\":2}}],[\"commoncssloader\",{\"1\":{\"244\":3,\"252\":2}}],[\"commonjs\",{\"1\":{\"80\":1,\"186\":2,\"232\":1}}],[\"compress\",{\"1\":{\"237\":2,\"247\":1,\"267\":1}}],[\"compileroptions\",{\"0\":{\"186\":1},\"1\":{\"186\":7,\"192\":1}}],[\"components\",{\"1\":{\"183\":1}}],[\"computer\",{\"1\":{\"48\":1}}],[\"com\",{\"1\":{\"59\":1,\"79\":1,\"91\":2}}],[\"confg\",{\"1\":{\"237\":1}}],[\"configs\",{\"1\":{\"184\":1}}],[\"config\",{\"1\":{\"103\":5,\"191\":1,\"195\":1,\"232\":2,\"233\":1,\"241\":5,\"242\":9,\"244\":3,\"256\":3}}],[\"configuration\",{\"1\":{\"88\":1}}],[\"config2\",{\"1\":{\"79\":2}}],[\"config1\",{\"1\":{\"79\":2}}],[\"concat\",{\"1\":{\"65\":1}}],[\"connect\",{\"1\":{\"59\":2,\"90\":2}}],[\"console\",{\"1\":{\"57\":2,\"58\":2,\"59\":5,\"60\":2,\"61\":1,\"63\":3,\"64\":6,\"66\":9,\"67\":20,\"68\":13,\"69\":12,\"70\":5,\"71\":27,\"78\":24,\"79\":6,\"80\":12,\"84\":1,\"85\":2,\"87\":8,\"88\":6,\"90\":4,\"91\":6,\"92\":2,\"93\":3,\"95\":2,\"96\":4,\"97\":6,\"98\":1,\"100\":2,\"101\":7,\"102\":2,\"103\":1,\"105\":8,\"134\":4,\"135\":3,\"136\":9,\"138\":3,\"140\":2,\"143\":7,\"147\":3,\"155\":1,\"158\":2,\"165\":4,\"197\":1,\"199\":3,\"200\":1,\"201\":2,\"203\":1,\"204\":3,\"205\":2,\"206\":2,\"207\":1,\"260\":2,\"261\":1,\"262\":2}}],[\"constructor\",{\"1\":{\"71\":7,\"101\":1,\"134\":3,\"158\":2,\"197\":2,\"198\":4,\"199\":6,\"200\":1,\"203\":1,\"204\":1,\"206\":1,\"207\":1,\"215\":1}}],[\"const关键字\",{\"0\":{\"54\":1}}],[\"const\",{\"1\":{\"51\":1,\"54\":2,\"55\":2,\"66\":3,\"68\":8,\"71\":3,\"79\":4,\"87\":5,\"88\":2,\"90\":5,\"91\":4,\"92\":4,\"93\":3,\"95\":3,\"97\":6,\"100\":2,\"101\":1,\"102\":4,\"103\":2,\"104\":1,\"191\":3,\"197\":1,\"199\":3,\"200\":1,\"203\":1,\"204\":1,\"207\":1,\"233\":1,\"234\":2,\"235\":4,\"236\":2,\"237\":4,\"238\":3,\"239\":3,\"240\":4,\"241\":3,\"242\":9,\"244\":9,\"255\":2,\"256\":6}}],[\"contenthash\",{\"0\":{\"258\":1},\"1\":{\"258\":3,\"260\":1}}],[\"contentbase\",{\"1\":{\"191\":1,\"247\":1,\"267\":1}}],[\"content\",{\"1\":{\"16\":1,\"18\":1}}],[\"content属性定义了多根轴线\",{\"1\":{\"18\":1}}],[\"content属性定义了项目在主轴上的对齐方式\",{\"1\":{\"16\":1}}],[\"content属性\",{\"0\":{\"16\":1,\"18\":1}}],[\"workboxwebpackplugin\",{\"1\":{\"262\":1}}],[\"workbox\",{\"1\":{\"262\":2}}],[\"worker代码必须运行在服务器上\",{\"1\":{\"262\":1}}],[\"worker内代码不能操作dom\",{\"1\":{\"165\":1}}],[\"worker\",{\"1\":{\"165\":8,\"262\":1}}],[\"worker运行而不冻结用户界面\",{\"1\":{\"165\":1}}],[\"workers\",{\"0\":{\"165\":1},\"1\":{\"165\":1,\"254\":1}}],[\"workers可以实现多线程运行\",{\"1\":{\"160\":1}}],[\"weight\",{\"1\":{\"101\":5}}],[\"webpackprefetch\",{\"1\":{\"261\":1}}],[\"webpackchunkname\",{\"1\":{\"260\":1,\"261\":1}}],[\"webpack5\",{\"0\":{\"239\":1},\"1\":{\"235\":2,\"241\":2,\"242\":3,\"244\":1}}],[\"webpack5以下使用方式\",{\"1\":{\"236\":1,\"244\":1,\"252\":1}}],[\"webpack5以下\",{\"1\":{\"235\":2}}],[\"webpack配置\",{\"1\":{\"233\":1}}],[\"webpack会以\",{\"1\":{\"232\":2}}],[\"webpack4以上的版本需要全局\",{\"1\":{\"231\":1}}],[\"webpack相关\",{\"0\":{\"223\":1}}],[\"webpack中的清除插件\",{\"1\":{\"190\":1}}],[\"webpack中html插件\",{\"1\":{\"190\":1}}],[\"webpack的配置文件\",{\"1\":{\"233\":1}}],[\"webpack的开发服务器\",{\"1\":{\"190\":1}}],[\"webpack的命令行工具\",{\"1\":{\"190\":1}}],[\"webpack\",{\"0\":{\"221\":1,\"224\":1,\"225\":1},\"1\":{\"190\":9,\"191\":2,\"193\":2,\"224\":1,\"226\":1,\"227\":1,\"228\":2,\"230\":1,\"231\":6,\"232\":9,\"233\":1,\"234\":3,\"235\":2,\"236\":1,\"237\":7,\"238\":1,\"239\":1,\"240\":4,\"241\":6,\"242\":15,\"244\":8,\"255\":2,\"256\":16,\"262\":2},\"2\":{\"222\":1}}],[\"webpack整合\",{\"0\":{\"188\":1}}],[\"webworker\",{\"1\":{\"186\":1}}],[\"webkit\",{\"1\":{\"161\":2}}],[\"web\",{\"0\":{\"7\":1,\"165\":1},\"1\":{\"165\":1},\"2\":{\"42\":1,\"107\":1,\"166\":1,\"217\":1,\"269\":1}}],[\"while\",{\"1\":{\"93\":1}}],[\"writable\",{\"1\":{\"88\":1}}],[\"wrap>\",{\"1\":{\"15\":1}}],[\"wrap\",{\"1\":{\"14\":5}}],[\"wrap属性的简写形式\",{\"1\":{\"15\":1}}],[\"wrap属性定义\",{\"1\":{\"14\":1}}],[\"wrap属性\",{\"0\":{\"14\":1}}],[\"window\",{\"1\":{\"129\":1,\"131\":1,\"141\":1,\"142\":1,\"143\":1,\"155\":3,\"262\":2,\"264\":2}}],[\"with环境排除\",{\"1\":{\"65\":1}}],[\"with\",{\"1\":{\"65\":1}}],[\"width=\",{\"1\":{\"28\":2,\"40\":5}}],[\"width\",{\"1\":{\"10\":1,\"28\":2,\"36\":9}}],[\"w\",{\"1\":{\"61\":1,\"90\":2,\"180\":2}}],[\"watch\",{\"1\":{\"267\":1}}],[\"water\",{\"1\":{\"40\":3}}],[\"warn\",{\"1\":{\"68\":2,\"87\":2}}],[\"wangfei\",{\"1\":{\"55\":2}}],[\"w3\",{\"1\":{\"40\":1,\"41\":1}}],[\"www\",{\"1\":{\"40\":1,\"41\":1,\"50\":1,\"51\":1,\"91\":2}}],[\"dllreferenceplugin\",{\"1\":{\"256\":1}}],[\"dllplugin\",{\"1\":{\"256\":1}}],[\"dll是可以将某些库分离出来单独打包一次后\",{\"1\":{\"256\":1}}],[\"dll\",{\"0\":{\"256\":1},\"1\":{\"256\":7}}],[\"db\",{\"1\":{\"103\":4}}],[\"dbhost\",{\"1\":{\"103\":3}}],[\"d+\",{\"1\":{\"92\":2}}],[\"dead\",{\"1\":{\"239\":1,\"240\":1}}],[\"development\",{\"1\":{\"230\":2,\"233\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":2,\"238\":1,\"239\":3,\"240\":3,\"241\":1,\"242\":3}}],[\"devserver\",{\"0\":{\"237\":1,\"267\":1},\"1\":{\"191\":1,\"237\":4,\"247\":2,\"267\":1}}],[\"devtool\",{\"1\":{\"191\":1,\"249\":1}}],[\"dev\",{\"1\":{\"190\":2,\"237\":2}}],[\"decimal\",{\"1\":{\"178\":1}}],[\"declared\",{\"1\":{\"101\":1}}],[\"defineplugin\",{\"1\":{\"230\":2}}],[\"defined\",{\"1\":{\"147\":1}}],[\"defaultvendors\",{\"1\":{\"260\":1}}],[\"default\",{\"1\":{\"21\":1,\"22\":1,\"23\":1,\"80\":3,\"260\":1,\"268\":1}}],[\"description\",{\"0\":{\"98\":1},\"1\":{\"98\":2}}],[\"delete\",{\"1\":{\"69\":3}}],[\"ddd\",{\"1\":{\"67\":1}}],[\"dog\",{\"1\":{\"203\":4,\"204\":4,\"205\":1}}],[\"dom事件\",{\"1\":{\"164\":1}}],[\"dom事件回调\",{\"1\":{\"129\":1}}],[\"dom\",{\"1\":{\"161\":2,\"186\":2}}],[\"document\",{\"1\":{\"104\":1,\"149\":1,\"165\":2,\"261\":1}}],[\"doctype\",{\"1\":{\"80\":2,\"87\":2,\"149\":1,\"165\":1}}],[\"dot就是\",{\"1\":{\"93\":1}}],[\"dotall\",{\"1\":{\"93\":2}}],[\"dotall模式\",{\"0\":{\"93\":1}}],[\"done\",{\"1\":{\"66\":3}}],[\"down\",{\"1\":{\"64\":5}}],[\"dur=\",{\"1\":{\"40\":1,\"41\":1}}],[\"d=\",{\"1\":{\"34\":4,\"40\":3,\"41\":1}}],[\"d\",{\"1\":{\"34\":2,\"66\":3,\"78\":1,\"81\":1,\"178\":3,\"190\":1,\"195\":1,\"231\":1,\"233\":1,\"234\":1,\"235\":1,\"237\":1,\"238\":2,\"239\":3,\"240\":4,\"241\":2,\"242\":6,\"244\":1,\"254\":1,\"256\":1,\"262\":1}}],[\"date\",{\"1\":{\"134\":3}}],[\"dataurlcondition\",{\"1\":{\"235\":1,\"237\":1,\"244\":1,\"252\":1}}],[\"data\",{\"1\":{\"67\":6,\"68\":13,\"87\":2,\"93\":3,\"165\":3,\"232\":3}}],[\"database\",{\"0\":{\"3\":1},\"2\":{\"4\":1}}],[\"dashoffset\",{\"1\":{\"40\":1}}],[\"dashoffset来实现\",{\"1\":{\"26\":1}}],[\"dasharray=\",{\"1\":{\"40\":3}}],[\"dasharray\",{\"1\":{\"40\":3}}],[\"dasharray和stroke\",{\"1\":{\"26\":1}}],[\"dashed\",{\"1\":{\"11\":1}}],[\"directory\",{\"1\":{\"237\":2,\"267\":1}}],[\"direction>\",{\"1\":{\"15\":1}}],[\"direction属性和flex\",{\"1\":{\"15\":1}}],[\"direction属性决定主轴的方向\",{\"1\":{\"13\":1}}],[\"direction属性\",{\"0\":{\"13\":1}}],[\"direction\",{\"1\":{\"10\":1,\"13\":1}}],[\"dirname\",{\"1\":{\"191\":1,\"233\":2,\"234\":1,\"235\":2,\"236\":1,\"237\":4,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":3,\"244\":2,\"247\":1,\"255\":1,\"256\":5,\"258\":1,\"260\":1,\"264\":1,\"265\":1,\"266\":2,\"267\":2}}],[\"disable\",{\"1\":{\"260\":1}}],[\"dist\",{\"1\":{\"81\":3,\"186\":4,\"191\":2}}],[\"display\",{\"1\":{\"10\":1}}],[\"div虚线边框\",{\"0\":{\"11\":1}}],[\"div上下布局\",{\"0\":{\"10\":1}}],[\"1hmr\",{\"0\":{\"247\":1}}],[\"1优化打包构建速度\",{\"0\":{\"246\":1}}],[\"17\",{\"0\":{\"72\":1},\"1\":{\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1}}],[\"168\",{\"1\":{\"103\":2}}],[\"16\",{\"0\":{\"71\":1},\"1\":{\"73\":1,\"78\":1,\"157\":1}}],[\"160\",{\"1\":{\"33\":1}}],[\"1s后控制台输出111\",{\"1\":{\"67\":1}}],[\"1基本使用\",{\"0\":{\"63\":1}}],[\"18\",{\"0\":{\"79\":1},\"1\":{\"55\":1,\"101\":1,\"157\":1,\"197\":1,\"199\":3}}],[\"180\",{\"1\":{\"33\":4,\"41\":4}}],[\"15inch\",{\"1\":{\"71\":2}}],[\"15\",{\"0\":{\"70\":1},\"1\":{\"40\":1}}],[\"150\",{\"1\":{\"31\":1,\"32\":1,\"41\":4}}],[\"192\",{\"1\":{\"103\":2}}],[\"19\",{\"0\":{\"80\":1},\"1\":{\"60\":1,\"197\":1,\"207\":1}}],[\"1999\",{\"1\":{\"51\":1,\"71\":2}}],[\"1998\",{\"1\":{\"51\":1}}],[\"1997\",{\"1\":{\"51\":1}}],[\"1994\",{\"1\":{\"48\":1,\"93\":2,\"100\":2}}],[\"195\",{\"1\":{\"33\":1}}],[\"190\",{\"1\":{\"33\":2}}],[\"1415926\",{\"1\":{\"201\":1}}],[\"1415926神奇\",{\"1\":{\"78\":1}}],[\"14\",{\"0\":{\"69\":1}}],[\"145\",{\"1\":{\"32\":1}}],[\"140\",{\"1\":{\"32\":1}}],[\"13\",{\"0\":{\"68\":1},\"1\":{\"59\":1}}],[\"135\",{\"1\":{\"32\":1}}],[\"1306\",{\"1\":{\"40\":2}}],[\"130\",{\"1\":{\"32\":1}}],[\"123\",{\"1\":{\"71\":1,\"78\":1,\"87\":1,\"105\":1,\"134\":1,\"201\":1}}],[\"12\",{\"0\":{\"67\":1},\"1\":{\"157\":3}}],[\"127\",{\"1\":{\"59\":1,\"90\":1}}],[\"125\",{\"1\":{\"32\":1,\"40\":1}}],[\"120\",{\"1\":{\"32\":1,\"79\":2}}],[\"111的返回\",{\"1\":{\"67\":1}}],[\"111\",{\"1\":{\"67\":4}}],[\"11\",{\"0\":{\"66\":1},\"1\":{\"65\":1,\"195\":1}}],[\"115\",{\"1\":{\"32\":1}}],[\"110\",{\"1\":{\"31\":1,\"32\":1}}],[\"1024\",{\"1\":{\"235\":2,\"237\":1,\"244\":1,\"252\":1,\"268\":1}}],[\"10<\",{\"1\":{\"93\":1,\"100\":1}}],[\"10s\",{\"1\":{\"40\":1,\"41\":1}}],[\"10\",{\"0\":{\"62\":1,\"63\":1,\"64\":1,\"65\":1},\"1\":{\"28\":5,\"31\":1,\"34\":12,\"40\":5,\"51\":1,\"58\":1,\"59\":1,\"85\":2,\"97\":3,\"147\":2,\"178\":1,\"212\":1,\"213\":1,\"214\":1,\"242\":1,\"244\":2,\"252\":1,\"253\":1,\"254\":1,\"258\":3,\"260\":2,\"268\":1}}],[\"100n\",{\"1\":{\"105\":1,\"178\":1}}],[\"100px\",{\"1\":{\"40\":1}}],[\"1000\",{\"1\":{\"40\":2,\"67\":7,\"68\":2,\"102\":2}}],[\"100\",{\"1\":{\"10\":1,\"29\":2,\"32\":1,\"40\":1,\"41\":1,\"60\":1,\"78\":4,\"103\":1}}],[\"1\",{\"0\":{\"10\":1,\"13\":1,\"20\":1,\"53\":1,\"84\":1,\"87\":1,\"90\":1,\"95\":1,\"100\":1,\"112\":1,\"113\":1,\"118\":1,\"133\":1,\"134\":1,\"140\":1,\"149\":1,\"157\":1,\"224\":2,\"225\":1,\"226\":2,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"245\":1,\"246\":1,\"247\":2,\"248\":1,\"249\":2,\"251\":1,\"252\":2,\"253\":1,\"254\":1,\"255\":1,\"256\":1,\"258\":1,\"263\":1},\"1\":{\"22\":1,\"24\":3,\"32\":2,\"33\":2,\"36\":5,\"37\":2,\"40\":2,\"51\":1,\"58\":1,\"59\":3,\"60\":2,\"64\":1,\"68\":3,\"69\":3,\"70\":1,\"78\":5,\"79\":1,\"84\":2,\"87\":2,\"90\":1,\"91\":1,\"93\":1,\"97\":3,\"102\":1,\"103\":2,\"105\":1,\"116\":1,\"122\":1,\"128\":1,\"129\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":3,\"140\":1,\"141\":1,\"142\":1,\"143\":8,\"146\":1,\"147\":1,\"149\":3,\"150\":1,\"151\":1,\"152\":2,\"154\":1,\"155\":7,\"158\":1,\"162\":1,\"163\":1,\"164\":2,\"165\":3,\"178\":8,\"193\":1,\"231\":2,\"234\":2,\"235\":4,\"236\":2,\"237\":6,\"239\":3,\"240\":3,\"242\":3,\"244\":1,\"249\":1,\"253\":1,\"255\":2,\"260\":1,\"262\":2,\"263\":1,\"268\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
